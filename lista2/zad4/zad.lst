
zad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000001fe  2**0
                  ALLOC
  3 .stab         00000690  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc5  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001555  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000213e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main()
{

  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  90:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  94:	87 7e       	andi	r24, 0xE7	; 231
  96:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  LED_DDR |= 0b11111111;
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a b9       	out	0x0a, r24	; 10
  MULT_DDC |= 0b11111111;
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	87 b9       	out	0x07, r24	; 7

  tab[0] = 0b00111111;
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  tab[1] = 0b00000110;
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
  tab[2] = 0b01011011;
  b0:	8b e5       	ldi	r24, 0x5B	; 91
  b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
  tab[3] = 0b01001111;
  b6:	8f e4       	ldi	r24, 0x4F	; 79
  b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
  tab[4] = 0b01100110;
  bc:	86 e6       	ldi	r24, 0x66	; 102
  be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_edata+0x4>
  tab[5] = 0b01101101;
  c2:	8d e6       	ldi	r24, 0x6D	; 109
  c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_edata+0x5>
  tab[6] = 0b01111101;
  c8:	8d e7       	ldi	r24, 0x7D	; 125
  ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_edata+0x6>
  tab[7] = 0b00000111;
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_edata+0x7>
  tab[8] = 0b01111111;
  d4:	8f e7       	ldi	r24, 0x7F	; 127
  d6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_edata+0x8>
  tab[9] = 0b01101111;
  da:	8f e6       	ldi	r24, 0x6F	; 111
  dc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_edata+0x9>
  tab[10]= 0b00000000;
  e0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_edata+0xa>
  uint8_t i = 0;
  uint8_t n1 = 0;
  uint8_t n2 = 0;
  while(1)
  {
    n1 = i%10;
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  tab[6] = 0b01111101;
  tab[7] = 0b00000111;
  tab[8] = 0b01111111;
  tab[9] = 0b01101111;
  tab[10]= 0b00000000;
  uint8_t i = 0;
  e6:	60 e0       	ldi	r22, 0x00	; 0
  while(1)
  {
    n1 = i%10;
    n2 = i/10;
    if( n2 == 0)
      n2 = 10;
  e8:	ea e0       	ldi	r30, 0x0A	; 10
    SHOW(2000, 1000, n1, n2);
  ea:	5f ef       	ldi	r21, 0xFF	; 255
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	7d ec       	ldi	r23, 0xCD	; 205
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  while(1)
  {
    n1 = i%10;
    n2 = i/10;
    if( n2 == 0)
      n2 = 10;
  f6:	2a ef       	ldi	r18, 0xFA	; 250
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	a0 50       	subi	r26, 0x00	; 0
  fc:	bf 4f       	sbci	r27, 0xFF	; 255
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	ff 4f       	sbci	r31, 0xFF	; 255
    SHOW(2000, 1000, n1, n2);
 102:	5b b9       	out	0x0b, r21	; 11
 104:	48 b9       	out	0x08, r20	; 8
 106:	8c 91       	ld	r24, X
 108:	80 95       	com	r24
 10a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	cf e3       	ldi	r28, 0x3F	; 63
 10e:	df e1       	ldi	r29, 0x1F	; 31
 110:	21 97       	sbiw	r28, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x80>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x86>
 116:	00 00       	nop
 118:	98 b9       	out	0x08, r25	; 8
 11a:	80 81       	ld	r24, Z
 11c:	80 95       	com	r24
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	cf e3       	ldi	r28, 0x3F	; 63
 122:	df e1       	ldi	r29, 0x1F	; 31
 124:	21 97       	sbiw	r28, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x94>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x9a>
 12a:	00 00       	nop
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	31 09       	sbc	r19, r1
 130:	41 f7       	brne	.-48     	; 0x102 <main+0x72>
    //SHOW(50, 1000, n1+1, n2+2);
    i++;
 132:	6f 5f       	subi	r22, 0xFF	; 255
    if(i == 60)
 134:	6c 33       	cpi	r22, 0x3C	; 60
 136:	99 f0       	breq	.+38     	; 0x15e <main+0xce>
 138:	67 9f       	mul	r22, r23
 13a:	e1 2d       	mov	r30, r1
 13c:	11 24       	eor	r1, r1
 13e:	ae 2f       	mov	r26, r30
 140:	a6 95       	lsr	r26
 142:	a6 95       	lsr	r26
 144:	a6 95       	lsr	r26
 146:	86 2f       	mov	r24, r22
 148:	2a e0       	ldi	r18, 0x0A	; 10
 14a:	a2 9f       	mul	r26, r18
 14c:	80 19       	sub	r24, r0
 14e:	11 24       	eor	r1, r1
 150:	a8 2f       	mov	r26, r24
 152:	e6 95       	lsr	r30
 154:	e6 95       	lsr	r30
 156:	e6 95       	lsr	r30
  uint8_t n2 = 0;
  while(1)
  {
    n1 = i%10;
    n2 = i/10;
    if( n2 == 0)
 158:	61 f6       	brne	.-104    	; 0xf2 <main+0x62>
      n2 = 10;
 15a:	ea e0       	ldi	r30, 0x0A	; 10
 15c:	ca cf       	rjmp	.-108    	; 0xf2 <main+0x62>
 15e:	a0 e0       	ldi	r26, 0x00	; 0
    SHOW(2000, 1000, n1, n2);
    //SHOW(50, 1000, n1+1, n2+2);
    i++;
    if(i == 60)
      i = 0;
 160:	60 e0       	ldi	r22, 0x00	; 0
  while(1)
  {
    n1 = i%10;
    n2 = i/10;
    if( n2 == 0)
      n2 = 10;
 162:	ea e0       	ldi	r30, 0x0A	; 10
 164:	c6 cf       	rjmp	.-116    	; 0xf2 <main+0x62>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
