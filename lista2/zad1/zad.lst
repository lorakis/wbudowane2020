
zad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000142  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .stab         000005a0  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cb3  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000142b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 36       	cpi	r26, 0x66	; 102
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define BTN_PORT PORTB
bool tab[102];

int main()
{
  BTN_PORT |= _BV(BTN);
  90:	2c 9a       	sbi	0x05, 4	; 5
  LED_DDR |= _BV(LED);
  92:	25 9a       	sbi	0x04, 5	; 4
  int i = 0;
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  while(1)
  {

    if( tab[(i+1) % 101] == true)
  98:	c5 e6       	ldi	r28, 0x65	; 101
  9a:	d0 e0       	ldi	r29, 0x00	; 0
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
    if (BTN_PIN & _BV(BTN))
      tab[i] = true;
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	13 c0       	rjmp	.+38     	; 0xc6 <main+0x36>
  int i = 0;
  while(1)
  {

    if( tab[(i+1) % 101] == true)
      LED_PORT &= ~_BV(LED);
  a0:	2d 98       	cbi	0x05, 5	; 5
    else
      LED_PORT |= _BV(LED);
    if (BTN_PIN & _BV(BTN))
      tab[i] = true;
  a2:	d9 01       	movw	r26, r18
  a4:	a0 50       	subi	r26, 0x00	; 0
  a6:	bf 4f       	sbci	r27, 0xFF	; 255

    if( tab[(i+1) % 101] == true)
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
    if (BTN_PIN & _BV(BTN))
  a8:	1c 9b       	sbis	0x03, 4	; 3
  aa:	1f c0       	rjmp	.+62     	; 0xea <main+0x5a>
      tab[i] = true;
  ac:	4c 93       	st	X, r20
    else
      tab[i] = false;
    i++;
    if( i >= 101 )
  ae:	e5 36       	cpi	r30, 0x65	; 101
  b0:	f1 05       	cpc	r31, r1
  b2:	14 f0       	brlt	.+4      	; 0xb8 <main+0x28>
    {
      i = 0;
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f0 e0       	ldi	r31, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x2c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x32>
  c2:	00 00       	nop
  c4:	9f 01       	movw	r18, r30
  LED_DDR |= _BV(LED);
  int i = 0;
  while(1)
  {

    if( tab[(i+1) % 101] == true)
  c6:	f9 01       	movw	r30, r18
  c8:	31 96       	adiw	r30, 0x01	; 1
  ca:	cf 01       	movw	r24, r30
  cc:	be 01       	movw	r22, r28
  ce:	0e 94 77 00 	call	0xee	; 0xee <__divmodhi4>
  d2:	dc 01       	movw	r26, r24
  d4:	a0 50       	subi	r26, 0x00	; 0
  d6:	bf 4f       	sbci	r27, 0xFF	; 255
  d8:	8c 91       	ld	r24, X
  da:	81 11       	cpse	r24, r1
  dc:	e1 cf       	rjmp	.-62     	; 0xa0 <main+0x10>
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
  de:	2d 9a       	sbi	0x05, 5	; 5
    if (BTN_PIN & _BV(BTN))
      tab[i] = true;
  e0:	d9 01       	movw	r26, r18
  e2:	a0 50       	subi	r26, 0x00	; 0
  e4:	bf 4f       	sbci	r27, 0xFF	; 255

    if( tab[(i+1) % 101] == true)
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
    if (BTN_PIN & _BV(BTN))
  e6:	1c 99       	sbic	0x03, 4	; 3
  e8:	e1 cf       	rjmp	.-62     	; 0xac <main+0x1c>
      tab[i] = true;
    else
      tab[i] = false;
  ea:	1c 92       	st	X, r1
  ec:	e0 cf       	rjmp	.-64     	; 0xae <main+0x1e>

000000ee <__divmodhi4>:
  ee:	97 fb       	bst	r25, 7
  f0:	07 2e       	mov	r0, r23
  f2:	16 f4       	brtc	.+4      	; 0xf8 <__divmodhi4+0xa>
  f4:	00 94       	com	r0
  f6:	07 d0       	rcall	.+14     	; 0x106 <__divmodhi4_neg1>
  f8:	77 fd       	sbrc	r23, 7
  fa:	09 d0       	rcall	.+18     	; 0x10e <__divmodhi4_neg2>
  fc:	0e 94 8b 00 	call	0x116	; 0x116 <__udivmodhi4>
 100:	07 fc       	sbrc	r0, 7
 102:	05 d0       	rcall	.+10     	; 0x10e <__divmodhi4_neg2>
 104:	3e f4       	brtc	.+14     	; 0x114 <__divmodhi4_exit>

00000106 <__divmodhi4_neg1>:
 106:	90 95       	com	r25
 108:	81 95       	neg	r24
 10a:	9f 4f       	sbci	r25, 0xFF	; 255
 10c:	08 95       	ret

0000010e <__divmodhi4_neg2>:
 10e:	70 95       	com	r23
 110:	61 95       	neg	r22
 112:	7f 4f       	sbci	r23, 0xFF	; 255

00000114 <__divmodhi4_exit>:
 114:	08 95       	ret

00000116 <__udivmodhi4>:
 116:	aa 1b       	sub	r26, r26
 118:	bb 1b       	sub	r27, r27
 11a:	51 e1       	ldi	r21, 0x11	; 17
 11c:	07 c0       	rjmp	.+14     	; 0x12c <__udivmodhi4_ep>

0000011e <__udivmodhi4_loop>:
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	a6 17       	cp	r26, r22
 124:	b7 07       	cpc	r27, r23
 126:	10 f0       	brcs	.+4      	; 0x12c <__udivmodhi4_ep>
 128:	a6 1b       	sub	r26, r22
 12a:	b7 0b       	sbc	r27, r23

0000012c <__udivmodhi4_ep>:
 12c:	88 1f       	adc	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	5a 95       	dec	r21
 132:	a9 f7       	brne	.-22     	; 0x11e <__udivmodhi4_loop>
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	bc 01       	movw	r22, r24
 13a:	cd 01       	movw	r24, r26
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
