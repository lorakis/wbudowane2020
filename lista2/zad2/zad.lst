
zad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800100  00800100  00000336  2**0
                  ALLOC
  3 .stab         000009cc  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efc  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000027ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 33       	cpi	r26, 0x34	; 52
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  90:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  94:	95 ff       	sbrs	r25, 5
  96:	fc cf       	rjmp	.-8      	; 0x90 <uart_transmit>
  UDR0 = data;
  98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  a2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  a6:	87 ff       	sbrs	r24, 7
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <uart_receive>
  return UDR0;
  aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret

000000b2 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  be:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ce:	08 95       	ret

000000d0 <wypelnij_dek>:

char dek[32];

void wypelnij_dek()
{
    dek[2] = 't';
  d0:	ee e0       	ldi	r30, 0x0E	; 14
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	84 e7       	ldi	r24, 0x74	; 116
  d6:	82 83       	std	Z+2, r24	; 0x02
    dek[3] = 'e';
  d8:	85 e6       	ldi	r24, 0x65	; 101
  da:	83 83       	std	Z+3, r24	; 0x03
    dek[7] = 'i';
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	87 83       	std	Z+7, r24	; 0x07
    dek[6] = 'a';
  e0:	81 e6       	ldi	r24, 0x61	; 97
  e2:	86 83       	std	Z+6, r24	; 0x06
    dek[4] = 'm';
  e4:	8d e6       	ldi	r24, 0x6D	; 109
  e6:	84 83       	std	Z+4, r24	; 0x04
    dek[5] = 'n';
  e8:	8e e6       	ldi	r24, 0x6E	; 110
  ea:	85 83       	std	Z+5, r24	; 0x05
    dek[8] = 'o';
  ec:	8f e6       	ldi	r24, 0x6F	; 111
  ee:	80 87       	std	Z+8, r24	; 0x08
    dek[9] = 'g';
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	81 87       	std	Z+9, r24	; 0x09
    dek[10] = 'k';
  f4:	8b e6       	ldi	r24, 0x6B	; 107
  f6:	82 87       	std	Z+10, r24	; 0x0a
    dek[11] = 'd';
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	83 87       	std	Z+11, r24	; 0x0b
    dek[12] = 'w';
  fc:	87 e7       	ldi	r24, 0x77	; 119
  fe:	84 87       	std	Z+12, r24	; 0x0c
    dek[13] = 'r';
 100:	82 e7       	ldi	r24, 0x72	; 114
 102:	85 87       	std	Z+13, r24	; 0x0d
    dek[14] = 'u';
 104:	85 e7       	ldi	r24, 0x75	; 117
 106:	86 87       	std	Z+14, r24	; 0x0e
    dek[15] = 's';
 108:	83 e7       	ldi	r24, 0x73	; 115
 10a:	87 87       	std	Z+15, r24	; 0x0f
    dek[18] = 'q';
 10c:	81 e7       	ldi	r24, 0x71	; 113
 10e:	82 8b       	std	Z+18, r24	; 0x12
    dek[19] = 'z';
 110:	8a e7       	ldi	r24, 0x7A	; 122
 112:	83 8b       	std	Z+19, r24	; 0x13
    dek[20] = 'y';
 114:	89 e7       	ldi	r24, 0x79	; 121
 116:	84 8b       	std	Z+20, r24	; 0x14
    dek[21] = 'c';
 118:	83 e6       	ldi	r24, 0x63	; 99
 11a:	85 8b       	std	Z+21, r24	; 0x15
    dek[22] = 'x';
 11c:	88 e7       	ldi	r24, 0x78	; 120
 11e:	86 8b       	std	Z+22, r24	; 0x16
    dek[23] = 'b';
 120:	82 e6       	ldi	r24, 0x62	; 98
 122:	87 8b       	std	Z+23, r24	; 0x17
    dek[24] = 'j';
 124:	8a e6       	ldi	r24, 0x6A	; 106
 126:	80 8f       	std	Z+24, r24	; 0x18
    dek[25] = 'p';
 128:	80 e7       	ldi	r24, 0x70	; 112
 12a:	81 8f       	std	Z+25, r24	; 0x19

    dek[27] = 'l';
 12c:	8c e6       	ldi	r24, 0x6C	; 108
 12e:	83 8f       	std	Z+27, r24	; 0x1b

    dek[29] = 'f';
 130:	86 e6       	ldi	r24, 0x66	; 102
 132:	85 8f       	std	Z+29, r24	; 0x1d
    dek[30] = 'v';
 134:	86 e7       	ldi	r24, 0x76	; 118
 136:	86 8f       	std	Z+30, r24	; 0x1e
    dek[31] = 'h';
 138:	88 e6       	ldi	r24, 0x68	; 104
 13a:	87 8f       	std	Z+31, r24	; 0x1f
 13c:	08 95       	ret

0000013e <main>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 13e:	87 e6       	ldi	r24, 0x67	; 103
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 14a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
int main()
{
  // zainicjalizuj UART
 uart_init();
 // skonfiguruj strumienie wejścia/wyjścia
 fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	28 e4       	ldi	r18, 0x48	; 72
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_edata+0x9>
 166:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_edata+0x8>
 16a:	21 e5       	ldi	r18, 0x51	; 81
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <_edata+0xb>
 172:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <_edata+0xa>
 176:	23 e0       	ldi	r18, 0x03	; 3
 178:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <_edata+0x3>
 17c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <_edata+0xd>
 180:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_edata+0xc>
 stdin = stdout = stderr = &uart_file;
 184:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__iob+0x5>
 188:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__iob+0x4>
 18c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__iob+0x3>
 190:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__iob+0x2>
 194:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__iob+0x1>
 198:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__iob>

  BTN_PORT |= _BV(BTN);
 19c:	2c 9a       	sbi	0x05, 4	; 5
  LED_DDR |= _BV(LED);
 19e:	25 9a       	sbi	0x04, 5	; 4
  wypelnij_dek();
 1a0:	0e 94 68 00 	call	0xd0	; 0xd0 <wypelnij_dek>

  int time_on = 0;
  int time_off = 61;
  int lit = 1;
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
  BTN_PORT |= _BV(BTN);
  LED_DDR |= _BV(LED);
  wypelnij_dek();

  int time_on = 0;
  int time_off = 61;
 1a8:	cd e3       	ldi	r28, 0x3D	; 61
 1aa:	d0 e0       	ldi	r29, 0x00	; 0

  BTN_PORT |= _BV(BTN);
  LED_DDR |= _BV(LED);
  wypelnij_dek();

  int time_on = 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	1c c0       	rjmp	.+56     	; 0x1ea <main+0xac>
  {

    if (BTN_PIN & _BV(BTN))
    {
      time_on = 0;
      time_off++;
 1b2:	21 96       	adiw	r28, 0x01	; 1
      LED_PORT &= ~_BV(LED); //off
 1b4:	2d 98       	cbi	0x05, 5	; 5
      }

    }


    if( time_off == 60)
 1b6:	cc 33       	cpi	r28, 0x3C	; 60
 1b8:	d1 05       	cpc	r29, r1
 1ba:	31 f5       	brne	.+76     	; 0x208 <main+0xca>
    {
      LED_PORT |= _BV(LED); //on
 1bc:	2d 9a       	sbi	0x05, 5	; 5

      //printf("%d", lit);
      printf("%c", dek[lit]);
 1be:	f9 01       	movw	r30, r18
 1c0:	e2 5f       	subi	r30, 0xF2	; 242
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
 1c6:	08 2e       	mov	r0, r24
 1c8:	00 0c       	add	r0, r0
 1ca:	99 0b       	sbc	r25, r25
 1cc:	0e 94 0c 01 	call	0x218	; 0x218 <putchar>
  while(1)
  {

    if (BTN_PIN & _BV(BTN))
    {
      time_on = 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
    {
      LED_PORT |= _BV(LED); //on

      //printf("%d", lit);
      printf("%c", dek[lit]);
      lit = 1;
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	4f ef       	ldi	r20, 0xFF	; 255
 1da:	59 ef       	ldi	r21, 0xF9	; 249
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	41 50       	subi	r20, 0x01	; 1
 1e0:	50 40       	sbci	r21, 0x00	; 0
 1e2:	60 40       	sbci	r22, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0xa0>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xaa>
 1e8:	00 00       	nop
  int time_off = 61;
  int lit = 1;
  while(1)
  {

    if (BTN_PIN & _BV(BTN))
 1ea:	1c 99       	sbic	0x03, 4	; 3
 1ec:	e2 cf       	rjmp	.-60     	; 0x1b2 <main+0x74>
      LED_PORT &= ~_BV(LED); //off
    }
    else
    {
      //LED_PORT &= ~_BV(LED);//off
      time_on++;
 1ee:	01 96       	adiw	r24, 0x01	; 1
    }


    if( time_on > 0)
    {
      if( time_on == 1)
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	91 05       	cpc	r25, r1
 1f4:	61 f0       	breq	.+24     	; 0x20e <main+0xd0>
      {
        lit = lit << 1;
        lit += 1;
      }
      if( time_on == 60)
 1f6:	8c 33       	cpi	r24, 0x3C	; 60
 1f8:	91 05       	cpc	r25, r1
 1fa:	19 f4       	brne	.+6      	; 0x202 <main+0xc4>
      {
        LED_PORT |= _BV(LED); //on
 1fc:	2d 9a       	sbi	0x05, 5	; 5
        lit = lit - 1;
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
    {
      LED_PORT |= _BV(LED); //on

      //printf("%d", lit);
      printf("%c", dek[lit]);
      lit = 1;
 202:	c0 e0       	ldi	r28, 0x00	; 0
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	e8 cf       	rjmp	.-48     	; 0x1d8 <main+0x9a>
  while(1)
  {

    if (BTN_PIN & _BV(BTN))
    {
      time_on = 0;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	e5 cf       	rjmp	.-54     	; 0x1d8 <main+0x9a>

    if( time_on > 0)
    {
      if( time_on == 1)
      {
        lit = lit << 1;
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
        lit += 1;
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	f5 cf       	rjmp	.-22     	; 0x202 <main+0xc4>

00000218 <putchar>:
 218:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__iob+0x2>
 21c:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__iob+0x3>
 220:	0e 94 13 01 	call	0x226	; 0x226 <fputc>
 224:	08 95       	ret

00000226 <fputc>:
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	fb 01       	movw	r30, r22
 230:	23 81       	ldd	r18, Z+3	; 0x03
 232:	21 fd       	sbrc	r18, 1
 234:	03 c0       	rjmp	.+6      	; 0x23c <fputc+0x16>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	9f ef       	ldi	r25, 0xFF	; 255
 23a:	2c c0       	rjmp	.+88     	; 0x294 <fputc+0x6e>
 23c:	22 ff       	sbrs	r18, 2
 23e:	16 c0       	rjmp	.+44     	; 0x26c <fputc+0x46>
 240:	46 81       	ldd	r20, Z+6	; 0x06
 242:	57 81       	ldd	r21, Z+7	; 0x07
 244:	24 81       	ldd	r18, Z+4	; 0x04
 246:	35 81       	ldd	r19, Z+5	; 0x05
 248:	42 17       	cp	r20, r18
 24a:	53 07       	cpc	r21, r19
 24c:	44 f4       	brge	.+16     	; 0x25e <fputc+0x38>
 24e:	a0 81       	ld	r26, Z
 250:	b1 81       	ldd	r27, Z+1	; 0x01
 252:	9d 01       	movw	r18, r26
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	3f 4f       	sbci	r19, 0xFF	; 255
 258:	31 83       	std	Z+1, r19	; 0x01
 25a:	20 83       	st	Z, r18
 25c:	8c 93       	st	X, r24
 25e:	26 81       	ldd	r18, Z+6	; 0x06
 260:	37 81       	ldd	r19, Z+7	; 0x07
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	37 83       	std	Z+7, r19	; 0x07
 268:	26 83       	std	Z+6, r18	; 0x06
 26a:	14 c0       	rjmp	.+40     	; 0x294 <fputc+0x6e>
 26c:	8b 01       	movw	r16, r22
 26e:	ec 01       	movw	r28, r24
 270:	fb 01       	movw	r30, r22
 272:	00 84       	ldd	r0, Z+8	; 0x08
 274:	f1 85       	ldd	r31, Z+9	; 0x09
 276:	e0 2d       	mov	r30, r0
 278:	09 95       	icall
 27a:	89 2b       	or	r24, r25
 27c:	e1 f6       	brne	.-72     	; 0x236 <fputc+0x10>
 27e:	d8 01       	movw	r26, r16
 280:	16 96       	adiw	r26, 0x06	; 6
 282:	8d 91       	ld	r24, X+
 284:	9c 91       	ld	r25, X
 286:	17 97       	sbiw	r26, 0x07	; 7
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	17 96       	adiw	r26, 0x07	; 7
 28c:	9c 93       	st	X, r25
 28e:	8e 93       	st	-X, r24
 290:	16 97       	sbiw	r26, 0x06	; 6
 292:	ce 01       	movw	r24, r28
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
