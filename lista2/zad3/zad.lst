
zad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000008d0  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cfc  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <debounce1>:

#define DEBOUNCE_TIME 1000

uint8_t debounce1(void)
{
  if (bit_is_clear(BTN_PIN, BTN1))
  80:	1c 9b       	sbis	0x03, 4	; 3
  82:	02 c0       	rjmp	.+4      	; 0x88 <debounce1+0x8>
  if (bit_is_clear(BTN_PIN, BTN1))
  { /* still pressed */
    return (1);
  }
}
 return (0);
  84:	80 e0       	ldi	r24, 0x00	; 0
}
  86:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e9       	ldi	r24, 0x9F	; 159
  8a:	9f e0       	ldi	r25, 0x0F	; 15
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <debounce1+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <debounce1+0x12>
  92:	00 00       	nop
uint8_t debounce1(void)
{
  if (bit_is_clear(BTN_PIN, BTN1))
  { /* button is pressed now */
    _delay_us(DEBOUNCE_TIME);
  if (bit_is_clear(BTN_PIN, BTN1))
  94:	83 b1       	in	r24, 0x03	; 3
  { /* still pressed */
    return (1);
  }
}
 return (0);
  96:	82 95       	swap	r24
  98:	81 70       	andi	r24, 0x01	; 1
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	89 27       	eor	r24, r25
  9e:	08 95       	ret

000000a0 <debounce2>:
}
uint8_t debounce2(void)
{
  if (bit_is_clear(BTN_PIN, BTN2))
  a0:	1b 9b       	sbis	0x03, 3	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <debounce2+0x8>
  if (bit_is_clear(BTN_PIN, BTN2))
  { /* still pressed */
    return (1);
  }
}
 return (0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
}
  a6:	08 95       	ret
  a8:	8f e9       	ldi	r24, 0x9F	; 159
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <debounce2+0xc>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <debounce2+0x12>
  b2:	00 00       	nop
uint8_t debounce2(void)
{
  if (bit_is_clear(BTN_PIN, BTN2))
  { /* button is pressed now */
    _delay_us(DEBOUNCE_TIME);
  if (bit_is_clear(BTN_PIN, BTN2))
  b4:	83 b1       	in	r24, 0x03	; 3
  { /* still pressed */
    return (1);
  }
}
 return (0);
  b6:	83 fb       	bst	r24, 3
  b8:	99 27       	eor	r25, r25
  ba:	90 f9       	bld	r25, 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	89 27       	eor	r24, r25
  c0:	08 95       	ret

000000c2 <debounce3>:
}
uint8_t debounce3(void)
{
  if (bit_is_clear(BTN_PIN, BTN3))
  c2:	1a 9b       	sbis	0x03, 2	; 3
  c4:	02 c0       	rjmp	.+4      	; 0xca <debounce3+0x8>
    if (bit_is_clear(BTN_PIN, BTN3))
    { /* still pressed */
      return (1);
    }
  }
 return (0);
  c6:	80 e0       	ldi	r24, 0x00	; 0
}
  c8:	08 95       	ret
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <debounce3+0xc>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <debounce3+0x12>
  d4:	00 00       	nop
uint8_t debounce3(void)
{
  if (bit_is_clear(BTN_PIN, BTN3))
  { /* button is pressed now */
    _delay_us(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, BTN3))
  d6:	83 b1       	in	r24, 0x03	; 3
    { /* still pressed */
      return (1);
    }
  }
 return (0);
  d8:	82 fb       	bst	r24, 2
  da:	99 27       	eor	r25, r25
  dc:	90 f9       	bld	r25, 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	89 27       	eor	r24, r25
  e2:	08 95       	ret

000000e4 <main>:
}

int main()
{
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  e4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e8:	87 7e       	andi	r24, 0xE7	; 231
  ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  BTN_PORT |= 0b11111111;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	85 b9       	out	0x05, r24	; 5
  LED_DDR |= 0b11111111;
  f4:	9a b1       	in	r25, 0x0a	; 10
  f6:	8a b9       	out	0x0a, r24	; 10
  LED_PORT |= 0b00000000;
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8b b9       	out	0x0b, r24	; 11
  uint8_t i = 0b00000000;
  uint8_t kod = 0b00000000;
  uint8_t button1WasPressed = 0;
  uint8_t button2WasPressed = 0;
  uint8_t button3WasPressed = 0;
  fc:	30 e0       	ldi	r19, 0x00	; 0
  LED_DDR |= 0b11111111;
  LED_PORT |= 0b00000000;
  uint8_t i = 0b00000000;
  uint8_t kod = 0b00000000;
  uint8_t button1WasPressed = 0;
  uint8_t button2WasPressed = 0;
  fe:	20 e0       	ldi	r18, 0x00	; 0
  BTN_PORT |= 0b11111111;
  LED_DDR |= 0b11111111;
  LED_PORT |= 0b00000000;
  uint8_t i = 0b00000000;
  uint8_t kod = 0b00000000;
  uint8_t button1WasPressed = 0;
 100:	90 e0       	ldi	r25, 0x00	; 0
{
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  BTN_PORT |= 0b11111111;
  LED_DDR |= 0b11111111;
  LED_PORT |= 0b00000000;
  uint8_t i = 0b00000000;
 102:	80 e0       	ldi	r24, 0x00	; 0

#define DEBOUNCE_TIME 1000

uint8_t debounce1(void)
{
  if (bit_is_clear(BTN_PIN, BTN1))
 104:	1c 9b       	sbis	0x03, 4	; 3
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0x36>
       button1WasPressed = 1; /* update the state */
      }
    }
    else
    { /* button is not pressed now */
      button1WasPressed = 0; /* update the state */
 108:	90 e0       	ldi	r25, 0x00	; 0
}
 return (0);
}
uint8_t debounce2(void)
{
  if (bit_is_clear(BTN_PIN, BTN2))
 10a:	1b 9b       	sbis	0x03, 3	; 3
 10c:	13 c0       	rjmp	.+38     	; 0x134 <main+0x50>
        button2WasPressed = 1; /* update the state */
      }
    }
    else
    { /* button is not pressed now */
      button2WasPressed = 0; /* update the state */
 10e:	20 e0       	ldi	r18, 0x00	; 0
}
 return (0);
}
uint8_t debounce3(void)
{
  if (bit_is_clear(BTN_PIN, BTN3))
 110:	1a 9b       	sbis	0x03, 2	; 3
 112:	22 c0       	rjmp	.+68     	; 0x158 <main+0x74>
        button3WasPressed = 1; /* update the state */
      }
    }
    else
    { /* button is not pressed now */
      button3WasPressed = 0; /* update the state */
 114:	30 e0       	ldi	r19, 0x00	; 0

#define DEBOUNCE_TIME 1000

uint8_t debounce1(void)
{
  if (bit_is_clear(BTN_PIN, BTN1))
 116:	1c 99       	sbic	0x03, 4	; 3
 118:	f7 cf       	rjmp	.-18     	; 0x108 <main+0x24>
 11a:	ef e9       	ldi	r30, 0x9F	; 159
 11c:	ff e0       	ldi	r31, 0x0F	; 15
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x3a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x40>
 124:	00 00       	nop
  { /* button is pressed now */
    _delay_us(DEBOUNCE_TIME);
  if (bit_is_clear(BTN_PIN, BTN1))
 126:	1c 99       	sbic	0x03, 4	; 3
 128:	ef cf       	rjmp	.-34     	; 0x108 <main+0x24>
  uint8_t button3WasPressed = 0;
  while(1)
  {
    if(debounce1())
    { /* debounced button press */
      if(button1WasPressed == 0)
 12a:	99 23       	and	r25, r25
 12c:	09 f1       	breq	.+66     	; 0x170 <main+0x8c>
 12e:	91 e0       	ldi	r25, 0x01	; 1
}
 return (0);
}
uint8_t debounce2(void)
{
  if (bit_is_clear(BTN_PIN, BTN2))
 130:	1b 99       	sbic	0x03, 3	; 3
 132:	ed cf       	rjmp	.-38     	; 0x10e <main+0x2a>
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x54>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x5a>
 13e:	00 00       	nop
  { /* button is pressed now */
    _delay_us(DEBOUNCE_TIME);
  if (bit_is_clear(BTN_PIN, BTN2))
 140:	1b 99       	sbic	0x03, 3	; 3
 142:	e5 cf       	rjmp	.-54     	; 0x10e <main+0x2a>
    { /* button is not pressed now */
      button1WasPressed = 0; /* update the state */
    }
    if(debounce2())
    { /* debounced button press */
      if(button2WasPressed == 0)
 144:	21 11       	cpse	r18, r1
 146:	05 c0       	rjmp	.+10     	; 0x152 <main+0x6e>
      { /* but wasn't last time through */
        i++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
        i %= 256;
        kod = i ^ (i >> 1);/* do whatever */
 14a:	28 2f       	mov	r18, r24
 14c:	26 95       	lsr	r18
 14e:	28 27       	eor	r18, r24
        LED_PORT = kod;
 150:	2b b9       	out	0x0b, r18	; 11
        button2WasPressed = 1; /* update the state */
 152:	21 e0       	ldi	r18, 0x01	; 1
}
 return (0);
}
uint8_t debounce3(void)
{
  if (bit_is_clear(BTN_PIN, BTN3))
 154:	1a 99       	sbic	0x03, 2	; 3
 156:	de cf       	rjmp	.-68     	; 0x114 <main+0x30>
 158:	ef e9       	ldi	r30, 0x9F	; 159
 15a:	ff e0       	ldi	r31, 0x0F	; 15
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x78>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x7e>
 162:	00 00       	nop
  { /* button is pressed now */
    _delay_us(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, BTN3))
 164:	1a 99       	sbic	0x03, 2	; 3
 166:	d6 cf       	rjmp	.-84     	; 0x114 <main+0x30>
    { /* button is not pressed now */
      button2WasPressed = 0; /* update the state */
    }
    if(debounce3())
    { /* debounced button press */
      if(button3WasPressed == 0)
 168:	33 23       	and	r19, r19
 16a:	31 f0       	breq	.+12     	; 0x178 <main+0x94>
 16c:	31 e0       	ldi	r19, 0x01	; 1
 16e:	ca cf       	rjmp	.-108    	; 0x104 <main+0x20>
    { /* debounced button press */
      if(button1WasPressed == 0)
      { /* but wasn't last time through */
        kod = 0b00000000; /* do whatever */
        i = 0b00000000;
        LED_PORT = kod;
 170:	1b b8       	out	0x0b, r1	; 11
       button1WasPressed = 1; /* update the state */
 172:	91 e0       	ldi	r25, 0x01	; 1
    if(debounce1())
    { /* debounced button press */
      if(button1WasPressed == 0)
      { /* but wasn't last time through */
        kod = 0b00000000; /* do whatever */
        i = 0b00000000;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	c9 cf       	rjmp	.-110    	; 0x10a <main+0x26>
    }
    if(debounce3())
    { /* debounced button press */
      if(button3WasPressed == 0)
      { /* but wasn't last time through */
        i--;
 178:	81 50       	subi	r24, 0x01	; 1
        i %= 256;
        kod = i ^ (i >> 1);/* do whatever */
 17a:	38 2f       	mov	r19, r24
 17c:	36 95       	lsr	r19
 17e:	38 27       	eor	r19, r24
        LED_PORT = kod;
 180:	3b b9       	out	0x0b, r19	; 11
        button3WasPressed = 1; /* update the state */
 182:	31 e0       	ldi	r19, 0x01	; 1
 184:	bf cf       	rjmp	.-130    	; 0x104 <main+0x20>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
