   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 189               	vSerial:
 190               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  * Header file inclusions.
   3:main.c        ****  ******************************************************************************/
   4:main.c        **** 
   5:main.c        **** #include "FreeRTOS.h"
   6:main.c        **** #include "task.h"
   7:main.c        **** 
   8:main.c        **** #include <avr/io.h>
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** #include <stdio.h>
  12:main.c        **** #include "uart.h"
  13:main.c        **** 
  14:main.c        **** /******************************************************************************
  15:main.c        ****  * Private macro definitions.
  16:main.c        ****  ******************************************************************************/
  17:main.c        **** 
  18:main.c        **** #define mainLED_TASK_PRIORITY   1
  19:main.c        **** 
  20:main.c        **** #define mainSERIAL_TASK_PRIORITY 2
  21:main.c        **** 
  22:main.c        **** #define LED PB5
  23:main.c        **** #define LED_DDR DDRB
  24:main.c        **** #define LED_PORT PORTB
  25:main.c        **** /******************************************************************************
  26:main.c        ****  * Private function prototypes.
  27:main.c        ****  ******************************************************************************/
  28:main.c        **** 
  29:main.c        **** static void vBlinkLed(void* pvParameters);
  30:main.c        **** 
  31:main.c        **** static void vSerial(void* pvParameters);
  32:main.c        **** 
  33:main.c        **** /******************************************************************************
  34:main.c        ****  * Public function definitions.
  35:main.c        ****  ******************************************************************************/
  36:main.c        **** 
  37:main.c        **** /**************************************************************************//**
  38:main.c        ****  * \fn int main(void)
  39:main.c        ****  *
  40:main.c        ****  * \brief Main function.
  41:main.c        ****  *
  42:main.c        ****  * \return
  43:main.c        ****  ******************************************************************************/
  44:main.c        **** int main(void)
  45:main.c        **** {
  46:main.c        ****     /* Create task. w uart.h
  47:main.c        ****     QueueHandle_t in;
  48:main.c        ****     QueueHandle_t out; */
  49:main.c        ****     xTaskHandle blink_handle;
  50:main.c        ****     xTaskHandle serial_handle;
  51:main.c        **** 
  52:main.c        ****     in = xQueueCreate(10, sizeof(char));
  53:main.c        ****     out = xQueueCreate(10, sizeof(char));
  54:main.c        **** 
  55:main.c        ****     xTaskCreate
  56:main.c        ****         (
  57:main.c        ****          vBlinkLed,
  58:main.c        ****          "blink",
  59:main.c        ****          configMINIMAL_STACK_SIZE,
  60:main.c        ****          NULL,
  61:main.c        ****          mainLED_TASK_PRIORITY,
  62:main.c        ****          &blink_handle
  63:main.c        ****         );
  64:main.c        **** 
  65:main.c        ****     xTaskCreate
  66:main.c        ****         (
  67:main.c        ****          vSerial,
  68:main.c        ****          "serial",
  69:main.c        ****          configMINIMAL_STACK_SIZE,
  70:main.c        ****          NULL,
  71:main.c        ****          mainSERIAL_TASK_PRIORITY,
  72:main.c        ****          &serial_handle
  73:main.c        ****         );
  74:main.c        **** 
  75:main.c        ****     // Start scheduler.
  76:main.c        ****     vTaskStartScheduler();
  77:main.c        **** 
  78:main.c        ****     return 0;
  79:main.c        **** }
  80:main.c        **** 
  81:main.c        **** /**************************************************************************//**
  82:main.c        ****  * \fn static vApplicationIdleHook(void)
  83:main.c        ****  *
  84:main.c        ****  * \brief
  85:main.c        ****  ******************************************************************************/
  86:main.c        **** void vApplicationIdleHook(void)
  87:main.c        **** {
  88:main.c        **** 
  89:main.c        **** }
  90:main.c        **** 
  91:main.c        **** /******************************************************************************
  92:main.c        ****  * Private function definitions.
  93:main.c        ****  ******************************************************************************/
  94:main.c        **** 
  95:main.c        **** /**************************************************************************//**
  96:main.c        ****  * \fn static void vBlinkLed(void* pvParameters)
  97:main.c        ****  *
  98:main.c        ****  * \brief
  99:main.c        ****  *
 100:main.c        ****  * \param[in]   pvParameters
 101:main.c        ****  ******************************************************************************/
 102:main.c        **** static void vBlinkLed(void* pvParameters)
 103:main.c        **** {
 104:main.c        ****     DDRB |= _BV(PB5);
 105:main.c        **** 
 106:main.c        ****     for ( ;; )
 107:main.c        ****     {
 108:main.c        ****         LED_PORT &= ~_BV(LED);
 109:main.c        ****         vTaskDelay(500 / portTICK_PERIOD_MS);
 110:main.c        ****         LED_PORT |= _BV(LED);
 111:main.c        ****         vTaskDelay(500 / portTICK_PERIOD_MS);
 112:main.c        ****     }
 113:main.c        **** }
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** /**************************************************************************//**
 117:main.c        ****  * \fn static void vSerial(void* pvParameters)
 118:main.c        ****  *
 119:main.c        ****  * \brief
 120:main.c        ****  *
 121:main.c        ****  * \param[in]   pvParameters
 122:main.c        ****  ******************************************************************************/
 123:main.c        **** static void vSerial(void* pvParameters)
 124:main.c        **** {
 192               	.LM0:
 193               	.LFBB1:
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
 125:main.c        ****     uart_init();
 199               	.LM1:
 200 0000 0E94 0000 		call uart_init
 126:main.c        ****     stdin = stdout = stderr = &uart_file;
 202               	.LM2:
 203 0004 80E0      		ldi r24,lo8(uart_file)
 204 0006 90E0      		ldi r25,hi8(uart_file)
 205 0008 9093 0000 		sts __iob+4+1,r25
 206 000c 8093 0000 		sts __iob+4,r24
 207 0010 9093 0000 		sts __iob+2+1,r25
 208 0014 8093 0000 		sts __iob+2,r24
 209 0018 9093 0000 		sts __iob+1,r25
 210 001c 8093 0000 		sts __iob,r24
 211               	.L3:
 127:main.c        **** 
 128:main.c        ****     char input;
 129:main.c        **** 
 130:main.c        ****     for ( ;; )
 131:main.c        ****     {
 132:main.c        ****       sei();
 213               	.LM3:
 214               	/* #APP */
 215               	 ;  132 "main.c" 1
 216 0020 7894      		sei
 217               	 ;  0 "" 2
 218               	/* #NOAPP */
 219 0022 C0E3      		ldi r28,lo8(48)
 220 0024 D0E0      		ldi r29,0
 221               	.L2:
 222               	.LBB2:
 133:main.c        ****       input = getchar;
 134:main.c        ****       for(int i =0; i<10; i++)
 135:main.c        ****         //printf("%d\r\n", i);
 136:main.c        ****         putchar('0'+i);
 224               	.LM4:
 225 0026 6091 0000 		lds r22,__iob+2
 226 002a 7091 0000 		lds r23,__iob+2+1
 227 002e CE01      		movw r24,r28
 228 0030 0E94 0000 		call fputc
 229 0034 2196      		adiw r28,1
 134:main.c        ****         //printf("%d\r\n", i);
 231               	.LM5:
 232 0036 CA33      		cpi r28,58
 233 0038 D105      		cpc r29,__zero_reg__
 234 003a 01F4      		brne .L2
 235               	.LBE2:
 137:main.c        ****       cli();
 237               	.LM6:
 238               	/* #APP */
 239               	 ;  137 "main.c" 1
 240 003c F894      		cli
 241               	 ;  0 "" 2
 138:main.c        ****     }
 243               	.LM7:
 244               	/* #NOAPP */
 245 003e 00C0      		rjmp .L3
 247               	.Lscope1:
 249               		.stabd	78,0,0
 253               	vBlinkLed:
 254               		.stabd	46,0,0
 103:main.c        ****     DDRB |= _BV(PB5);
 256               	.LM8:
 257               	.LFBB2:
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 104:main.c        **** 
 263               	.LM9:
 264 0040 259A      		sbi 0x4,5
 265               	.L7:
 108:main.c        ****         vTaskDelay(500 / portTICK_PERIOD_MS);
 267               	.LM10:
 268 0042 2D98      		cbi 0x5,5
 109:main.c        ****         LED_PORT |= _BV(LED);
 270               	.LM11:
 271 0044 84EF      		ldi r24,lo8(-12)
 272 0046 91E0      		ldi r25,lo8(1)
 273 0048 0E94 0000 		call vTaskDelay
 110:main.c        ****         vTaskDelay(500 / portTICK_PERIOD_MS);
 275               	.LM12:
 276 004c 2D9A      		sbi 0x5,5
 111:main.c        ****     }
 278               	.LM13:
 279 004e 84EF      		ldi r24,lo8(-12)
 280 0050 91E0      		ldi r25,lo8(1)
 281 0052 0E94 0000 		call vTaskDelay
 282 0056 00C0      		rjmp .L7
 284               	.Lscope2:
 286               		.stabd	78,0,0
 287               		.section	.rodata.str1.1,"aMS",@progbits,1
 288               	.LC0:
 289 0000 626C 696E 		.string	"blink"
 289      6B00 
 290               	.LC1:
 291 0006 7365 7269 		.string	"serial"
 291      616C 00
 292               		.section	.text.startup,"ax",@progbits
 294               	.global	main
 296               	main:
 297               		.stabd	46,0,0
  45:main.c        ****     /* Create task. w uart.h
 299               	.LM14:
 300               	.LFBB3:
 301 0000 EF92      		push r14
 302 0002 FF92      		push r15
 303 0004 0F93      		push r16
 304 0006 CF93      		push r28
 305 0008 DF93      		push r29
 306 000a 00D0      		rcall .
 307 000c 00D0      		rcall .
 308 000e CDB7      		in r28,__SP_L__
 309 0010 DEB7      		in r29,__SP_H__
 310               	/* prologue: function */
 311               	/* frame size = 4 */
 312               	/* stack size = 9 */
 313               	.L__stack_usage = 9
  52:main.c        ****     out = xQueueCreate(10, sizeof(char));
 315               	.LM15:
 316 0012 40E0      		ldi r20,0
 317 0014 61E0      		ldi r22,lo8(1)
 318 0016 8AE0      		ldi r24,lo8(10)
 319 0018 0E94 0000 		call xQueueGenericCreate
 320 001c 9093 0000 		sts in+1,r25
 321 0020 8093 0000 		sts in,r24
  53:main.c        **** 
 323               	.LM16:
 324 0024 40E0      		ldi r20,0
 325 0026 61E0      		ldi r22,lo8(1)
 326 0028 8AE0      		ldi r24,lo8(10)
 327 002a 0E94 0000 		call xQueueGenericCreate
 328 002e 9093 0000 		sts out+1,r25
 329 0032 8093 0000 		sts out,r24
  55:main.c        ****         (
 331               	.LM17:
 332 0036 CE01      		movw r24,r28
 333 0038 0396      		adiw r24,3
 334 003a 7C01      		movw r14,r24
 335 003c 01E0      		ldi r16,lo8(1)
 336 003e 20E0      		ldi r18,0
 337 0040 30E0      		ldi r19,0
 338 0042 45E5      		ldi r20,lo8(85)
 339 0044 50E0      		ldi r21,0
 340 0046 60E0      		ldi r22,lo8(.LC0)
 341 0048 70E0      		ldi r23,hi8(.LC0)
 342 004a 80E0      		ldi r24,lo8(gs(vBlinkLed))
 343 004c 90E0      		ldi r25,hi8(gs(vBlinkLed))
 344 004e 0E94 0000 		call xTaskCreate
  65:main.c        ****         (
 346               	.LM18:
 347 0052 CE01      		movw r24,r28
 348 0054 0196      		adiw r24,1
 349 0056 7C01      		movw r14,r24
 350 0058 02E0      		ldi r16,lo8(2)
 351 005a 20E0      		ldi r18,0
 352 005c 30E0      		ldi r19,0
 353 005e 45E5      		ldi r20,lo8(85)
 354 0060 50E0      		ldi r21,0
 355 0062 60E0      		ldi r22,lo8(.LC1)
 356 0064 70E0      		ldi r23,hi8(.LC1)
 357 0066 80E0      		ldi r24,lo8(gs(vSerial))
 358 0068 90E0      		ldi r25,hi8(gs(vSerial))
 359 006a 0E94 0000 		call xTaskCreate
  76:main.c        **** 
 361               	.LM19:
 362 006e 0E94 0000 		call vTaskStartScheduler
  79:main.c        **** 
 364               	.LM20:
 365 0072 80E0      		ldi r24,0
 366 0074 90E0      		ldi r25,0
 367               	/* epilogue start */
 368 0076 0F90      		pop __tmp_reg__
 369 0078 0F90      		pop __tmp_reg__
 370 007a 0F90      		pop __tmp_reg__
 371 007c 0F90      		pop __tmp_reg__
 372 007e DF91      		pop r29
 373 0080 CF91      		pop r28
 374 0082 0F91      		pop r16
 375 0084 FF90      		pop r15
 376 0086 EF90      		pop r14
 377 0088 0895      		ret
 383               	.Lscope3:
 385               		.stabd	78,0,0
 386               		.text
 388               	.global	vApplicationIdleHook
 390               	vApplicationIdleHook:
 391               		.stabd	46,0,0
  87:main.c        **** 
 393               	.LM21:
 394               	.LFBB4:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399 0058 0895      		ret
 401               	.Lscope4:
 403               		.stabd	78,0,0
 405               	.global	__vector_19
 407               	__vector_19:
 408               		.stabd	46,0,0
 139:main.c        **** }
 140:main.c        **** 
 141:main.c        **** ISR(USART_UDRE_vect)
 142:main.c        **** {
 410               	.LM22:
 411               	.LFBB5:
 413               	.LM23:
 414 005a 1F92      		push r1
 415 005c 0F92      		push r0
 416 005e 0FB6      		in r0,__SREG__
 417 0060 0F92      		push r0
 418 0062 1124      		clr __zero_reg__
 419 0064 2F93      		push r18
 420 0066 3F93      		push r19
 421 0068 4F93      		push r20
 422 006a 5F93      		push r21
 423 006c 6F93      		push r22
 424 006e 7F93      		push r23
 425 0070 8F93      		push r24
 426 0072 9F93      		push r25
 427 0074 AF93      		push r26
 428 0076 BF93      		push r27
 429 0078 EF93      		push r30
 430 007a FF93      		push r31
 431               	/* prologue: Signal */
 432               	/* frame size = 0 */
 433               	/* stack size = 15 */
 434               	.L__stack_usage = 15
 143:main.c        ****   if(xQueueIsQueueEmptyFromISR(out) == pdFALSE)
 436               	.LM24:
 437 007c 8091 0000 		lds r24,out
 438 0080 9091 0000 		lds r25,out+1
 439 0084 0E94 0000 		call xQueueIsQueueEmptyFromISR
 440 0088 8111      		cpse r24,__zero_reg__
 441 008a 00C0      		rjmp .L10
 144:main.c        ****     xQueueReceiveFromISR(out, (void*)&UDR0, NULL);
 443               	.LM25:
 444 008c 40E0      		ldi r20,0
 445 008e 50E0      		ldi r21,0
 446 0090 66EC      		ldi r22,lo8(-58)
 447 0092 70E0      		ldi r23,0
 448 0094 8091 0000 		lds r24,out
 449 0098 9091 0000 		lds r25,out+1
 450 009c 0E94 0000 		call xQueueReceiveFromISR
 451               	.L10:
 452               	/* epilogue start */
 145:main.c        **** }
 454               	.LM26:
 455 00a0 FF91      		pop r31
 456 00a2 EF91      		pop r30
 457 00a4 BF91      		pop r27
 458 00a6 AF91      		pop r26
 459 00a8 9F91      		pop r25
 460 00aa 8F91      		pop r24
 461 00ac 7F91      		pop r23
 462 00ae 6F91      		pop r22
 463 00b0 5F91      		pop r21
 464 00b2 4F91      		pop r20
 465 00b4 3F91      		pop r19
 466 00b6 2F91      		pop r18
 467 00b8 0F90      		pop r0
 468 00ba 0FBE      		out __SREG__,r0
 469 00bc 0F90      		pop r0
 470 00be 1F90      		pop r1
 471 00c0 1895      		reti
 473               	.Lscope5:
 475               		.stabd	78,0,0
 477               	.global	__vector_18
 479               	__vector_18:
 480               		.stabd	46,0,0
 146:main.c        **** 
 147:main.c        **** ISR(USART_RX_vect)
 148:main.c        **** {
 482               	.LM27:
 483               	.LFBB6:
 484 00c2 1F92      		push r1
 485 00c4 0F92      		push r0
 486 00c6 0FB6      		in r0,__SREG__
 487 00c8 0F92      		push r0
 488 00ca 1124      		clr __zero_reg__
 489 00cc 2F93      		push r18
 490 00ce 3F93      		push r19
 491 00d0 4F93      		push r20
 492 00d2 5F93      		push r21
 493 00d4 6F93      		push r22
 494 00d6 7F93      		push r23
 495 00d8 8F93      		push r24
 496 00da 9F93      		push r25
 497 00dc AF93      		push r26
 498 00de BF93      		push r27
 499 00e0 EF93      		push r30
 500 00e2 FF93      		push r31
 501               	/* prologue: Signal */
 502               	/* frame size = 0 */
 503               	/* stack size = 15 */
 504               	.L__stack_usage = 15
 149:main.c        ****   xQueueSendFromISR(in, (void*)&UDR0, NULL);
 506               	.LM28:
 507 00e4 20E0      		ldi r18,0
 508 00e6 40E0      		ldi r20,0
 509 00e8 50E0      		ldi r21,0
 510 00ea 66EC      		ldi r22,lo8(-58)
 511 00ec 70E0      		ldi r23,0
 512 00ee 8091 0000 		lds r24,in
 513 00f2 9091 0000 		lds r25,in+1
 514 00f6 0E94 0000 		call xQueueGenericSendFromISR
 515               	/* epilogue start */
 150:main.c        **** }
 517               	.LM29:
 518 00fa FF91      		pop r31
 519 00fc EF91      		pop r30
 520 00fe BF91      		pop r27
 521 0100 AF91      		pop r26
 522 0102 9F91      		pop r25
 523 0104 8F91      		pop r24
 524 0106 7F91      		pop r23
 525 0108 6F91      		pop r22
 526 010a 5F91      		pop r21
 527 010c 4F91      		pop r20
 528 010e 3F91      		pop r19
 529 0110 2F91      		pop r18
 530 0112 0F90      		pop r0
 531 0114 0FBE      		out __SREG__,r0
 532 0116 0F90      		pop r0
 533 0118 1F90      		pop r1
 534 011a 1895      		reti
 536               	.Lscope6:
 538               		.stabd	78,0,0
 539               		.comm	out,2,1
 540               		.comm	in,2,1
 541               		.comm	uart_file,14,1
 546               	.Letext0:
 547               		.ident	"GCC: (GNU) 5.4.0"
 548               	.global __do_copy_data
 549               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBJdCCx.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBJdCCx.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBJdCCx.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBJdCCx.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBJdCCx.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBJdCCx.s:189    .text:0000000000000000 vSerial
                            *COM*:000000000000000e uart_file
     /tmp/ccBJdCCx.s:253    .text:0000000000000040 vBlinkLed
     /tmp/ccBJdCCx.s:296    .text.startup:0000000000000000 main
                            *COM*:0000000000000002 in
                            *COM*:0000000000000002 out
     /tmp/ccBJdCCx.s:390    .text:0000000000000058 vApplicationIdleHook
     /tmp/ccBJdCCx.s:407    .text:000000000000005a __vector_19
     /tmp/ccBJdCCx.s:479    .text:00000000000000c2 __vector_18

UNDEFINED SYMBOLS
uart_init
__iob
fputc
vTaskDelay
xQueueGenericCreate
xTaskCreate
vTaskStartScheduler
xQueueIsQueueEmptyFromISR
xQueueReceiveFromISR
xQueueGenericSendFromISR
__do_copy_data
__do_clear_bss
