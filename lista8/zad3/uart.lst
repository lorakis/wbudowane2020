   1               		.file	"uart.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 189               	.global	uart_transmit
 191               	uart_transmit:
 192               		.stabd	46,0,0
   1:uart.c        **** #include "FreeRTOS.h"
   2:uart.c        **** #include "task.h"
   3:uart.c        **** #include <avr/io.h>
   4:uart.c        **** #include <stdio.h>
   5:uart.c        **** #include "uart.h"
   6:uart.c        **** 
   7:uart.c        **** #ifndef F_CPU
   8:uart.c        **** #define F_CPU 16000000UL
   9:uart.c        **** #endif
  10:uart.c        **** #ifndef BAUD
  11:uart.c        **** #define BAUD 9600
  12:uart.c        **** #endif
  13:uart.c        **** #include <util/setbaud.h>
  14:uart.c        **** 
  15:uart.c        **** int uart_transmit(char c, FILE *stream);
  16:uart.c        **** int uart_receive(FILE *stream);
  17:uart.c        **** 
  18:uart.c        **** FILE uart_file = FDEV_SETUP_STREAM(uart_transmit, uart_receive, _FDEV_SETUP_RW);
  19:uart.c        **** 
  20:uart.c        **** void uart_init() {
  21:uart.c        ****   UBRR0H = UBRRH_VALUE;
  22:uart.c        ****   UBRR0L = UBRRL_VALUE;
  23:uart.c        **** #if USE_2X
  24:uart.c        ****   UCSR0A |= _BV(U2X0);
  25:uart.c        **** #else
  26:uart.c        ****   UCSR0A &= ~(_BV(U2X0));
  27:uart.c        **** #endif
  28:uart.c        ****   UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  29:uart.c        ****   UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0) | _BV(UDRIE0); /* Enable RX and TX i włączamy in
  30:uart.c        **** }
  31:uart.c        **** 
  32:uart.c        **** int uart_transmit(char c, FILE *stream)
  33:uart.c        **** {
 194               	.LM0:
 195               	.LFBB1:
 196 0000 CF93      		push r28
 197 0002 DF93      		push r29
 198 0004 1F92      		push __zero_reg__
 199 0006 CDB7      		in r28,__SP_L__
 200 0008 DEB7      		in r29,__SP_H__
 201               	/* prologue: function */
 202               	/* frame size = 1 */
 203               	/* stack size = 3 */
 204               	.L__stack_usage = 3
 205 000a 8983      		std Y+1,r24
  34:uart.c        ****   /*
  35:uart.c        ****   if(uxQueueSpacesAvailable(out) == 0)
  36:uart.c        ****     while (!(UCSR0A & _BV(UDRE0))) taskYIELD();
  37:uart.c        ****   */
  38:uart.c        ****   xQueueSend(out, (void*)&c, (TickType_t)portMAX_DELAY);
 207               	.LM1:
 208 000c 20E0      		ldi r18,0
 209 000e 4FEF      		ldi r20,lo8(-1)
 210 0010 5FEF      		ldi r21,lo8(-1)
 211 0012 BE01      		movw r22,r28
 212 0014 6F5F      		subi r22,-1
 213 0016 7F4F      		sbci r23,-1
 214 0018 8091 0000 		lds r24,out
 215 001c 9091 0000 		lds r25,out+1
 216 0020 0E94 0000 		call xQueueGenericSend
  39:uart.c        **** 
  40:uart.c        ****   return 0;
  41:uart.c        **** }
 218               	.LM2:
 219 0024 80E0      		ldi r24,0
 220 0026 90E0      		ldi r25,0
 221               	/* epilogue start */
 222 0028 0F90      		pop __tmp_reg__
 223 002a DF91      		pop r29
 224 002c CF91      		pop r28
 225 002e 0895      		ret
 227               	.Lscope1:
 229               		.stabd	78,0,0
 232               	.global	uart_receive
 234               	uart_receive:
 235               		.stabd	46,0,0
  42:uart.c        **** 
  43:uart.c        **** int uart_receive(FILE *stream)
  44:uart.c        **** {
 237               	.LM3:
 238               	.LFBB2:
 239 0030 CF93      		push r28
 240 0032 DF93      		push r29
 241 0034 1F92      		push __zero_reg__
 242 0036 CDB7      		in r28,__SP_L__
 243 0038 DEB7      		in r29,__SP_H__
 244               	/* prologue: function */
 245               	/* frame size = 1 */
 246               	/* stack size = 3 */
 247               	.L__stack_usage = 3
  45:uart.c        ****   uint8_t data;
  46:uart.c        ****   /*
  47:uart.c        ****   while(xQueueReceive(in, (void*)&data, (TickType_t)0) == pdFALSE) // xQueueReceiveFromISR useless
  48:uart.c        ****     vTaskDelay(10 / portTICK_PERIOD_MS);
  49:uart.c        ****     */
  50:uart.c        ****   xQueueReceive(in, (void*)&data, (TickType_t)portMAX_DELAY);
 249               	.LM4:
 250 003a 4FEF      		ldi r20,lo8(-1)
 251 003c 5FEF      		ldi r21,lo8(-1)
 252 003e BE01      		movw r22,r28
 253 0040 6F5F      		subi r22,-1
 254 0042 7F4F      		sbci r23,-1
 255 0044 8091 0000 		lds r24,in
 256 0048 9091 0000 		lds r25,in+1
 257 004c 0E94 0000 		call xQueueReceive
  51:uart.c        ****   return (char)data;
 259               	.LM5:
 260 0050 8981      		ldd r24,Y+1
  52:uart.c        **** }
 262               	.LM6:
 263 0052 082E      		mov __tmp_reg__,r24
 264 0054 000C      		lsl r0
 265 0056 990B      		sbc r25,r25
 266               	/* epilogue start */
 267 0058 0F90      		pop __tmp_reg__
 268 005a DF91      		pop r29
 269 005c CF91      		pop r28
 270 005e 0895      		ret
 275               	.Lscope2:
 277               		.stabd	78,0,0
 279               	.global	uart_init
 281               	uart_init:
 282               		.stabd	46,0,0
  20:uart.c        ****   UBRR0H = UBRRH_VALUE;
 284               	.LM7:
 285               	.LFBB3:
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
  21:uart.c        ****   UBRR0L = UBRRL_VALUE;
 291               	.LM8:
 292 0060 1092 C500 		sts 197,__zero_reg__
  22:uart.c        **** #if USE_2X
 294               	.LM9:
 295 0064 87E6      		ldi r24,lo8(103)
 296 0066 8093 C400 		sts 196,r24
  26:uart.c        **** #endif
 298               	.LM10:
 299 006a E0EC      		ldi r30,lo8(-64)
 300 006c F0E0      		ldi r31,0
 301 006e 8081      		ld r24,Z
 302 0070 8D7F      		andi r24,lo8(-3)
 303 0072 8083      		st Z,r24
  28:uart.c        ****   UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0) | _BV(UDRIE0); /* Enable RX and TX i włączamy in
 305               	.LM11:
 306 0074 86E0      		ldi r24,lo8(6)
 307 0076 8093 C200 		sts 194,r24
  29:uart.c        **** }
 309               	.LM12:
 310 007a 88EB      		ldi r24,lo8(-72)
 311 007c 8093 C100 		sts 193,r24
 312 0080 0895      		ret
 314               	.Lscope3:
 316               		.stabd	78,0,0
 317               		.comm	out,2,1
 318               		.comm	in,2,1
 319               	.global	uart_file
 320               		.data
 323               	uart_file:
 324 0000 0000 00   		.zero	3
 325 0003 03        		.byte	3
 326 0004 0000 0000 		.zero	4
 327 0008 0000      		.word	gs(uart_transmit)
 328 000a 0000      		.word	gs(uart_receive)
 329 000c 0000      		.word	0
 333               		.text
 335               	.Letext0:
 336               		.ident	"GCC: (GNU) 5.4.0"
 337               	.global __do_copy_data
 338               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
     /tmp/ccgwYaYU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccgwYaYU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccgwYaYU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccgwYaYU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgwYaYU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgwYaYU.s:191    .text:0000000000000000 uart_transmit
                            *COM*:0000000000000002 out
     /tmp/ccgwYaYU.s:234    .text:0000000000000030 uart_receive
                            *COM*:0000000000000002 in
     /tmp/ccgwYaYU.s:281    .text:0000000000000060 uart_init
     /tmp/ccgwYaYU.s:323    .data:0000000000000000 uart_file

UNDEFINED SYMBOLS
xQueueGenericSend
xQueueReceive
__do_copy_data
__do_clear_bss
