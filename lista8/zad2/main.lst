   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 184               		.section	.rodata.str1.1,"aMS",@progbits,1
 185               	.LC0:
 186 0000 2575 0D0A 		.string	"%u\r\n"
 186      00
 187               		.text
 191               	vBlinkLed:
 192               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  * Header file inclusions.
   3:main.c        ****  ******************************************************************************/
   4:main.c        **** 
   5:main.c        **** #include "FreeRTOS.h"
   6:main.c        **** #include "task.h"
   7:main.c        **** 
   8:main.c        **** #include <avr/io.h>
   9:main.c        **** #include "queue.h"
  10:main.c        **** 
  11:main.c        **** #include <stdio.h>
  12:main.c        **** #include "uart.h"
  13:main.c        **** 
  14:main.c        **** /******************************************************************************
  15:main.c        ****  * Private macro definitions.
  16:main.c        ****  ******************************************************************************/
  17:main.c        **** 
  18:main.c        **** #define mainLED_TASK_PRIORITY   2
  19:main.c        **** 
  20:main.c        **** #define mainSERIAL_TASK_PRIORITY 1
  21:main.c        **** 
  22:main.c        **** #define LED PB5
  23:main.c        **** #define LED_DDR DDRB
  24:main.c        **** #define LED_PORT PORTB
  25:main.c        **** 
  26:main.c        **** /******************************************************************************
  27:main.c        ****  * Private function prototypes.
  28:main.c        ****  ******************************************************************************/
  29:main.c        **** 
  30:main.c        **** static void vBlinkLed(void* pvParameters);
  31:main.c        **** 
  32:main.c        **** static void vSerial(void* pvParameters);
  33:main.c        **** 
  34:main.c        **** /******************************************************************************
  35:main.c        ****  * Public function definitions.
  36:main.c        ****  ******************************************************************************/
  37:main.c        **** 
  38:main.c        **** /**************************************************************************//**
  39:main.c        ****  * \fn int main(void)
  40:main.c        ****  *
  41:main.c        ****  * \brief Main function.
  42:main.c        ****  *
  43:main.c        ****  * \return
  44:main.c        ****  ******************************************************************************/
  45:main.c        **** int main(void)
  46:main.c        **** {
  47:main.c        ****     // Create task.
  48:main.c        ****     xTaskHandle blink_handle;
  49:main.c        ****     xTaskHandle serial_handle;
  50:main.c        ****     QueueHandle_t xQueue = xQueueCreate(100, sizeof(uint16_t));
  51:main.c        **** 
  52:main.c        ****     xTaskCreate
  53:main.c        ****     (
  54:main.c        ****       vSerial,
  55:main.c        ****       "serial",
  56:main.c        ****       configMINIMAL_STACK_SIZE,
  57:main.c        ****       (void *)xQueue,
  58:main.c        ****       mainSERIAL_TASK_PRIORITY,
  59:main.c        ****       &serial_handle
  60:main.c        ****     );
  61:main.c        ****     xTaskCreate
  62:main.c        ****     (
  63:main.c        ****      vBlinkLed,
  64:main.c        ****      "blink",
  65:main.c        ****      configMINIMAL_STACK_SIZE,
  66:main.c        ****      (void *)xQueue,
  67:main.c        ****      mainLED_TASK_PRIORITY,
  68:main.c        ****      &blink_handle
  69:main.c        ****     );
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        ****     // Start scheduler.
  73:main.c        ****     vTaskStartScheduler();
  74:main.c        **** 
  75:main.c        ****     return 0;
  76:main.c        **** }
  77:main.c        **** 
  78:main.c        **** /**************************************************************************//**
  79:main.c        ****  * \fn static vApplicationIdleHook(void)
  80:main.c        ****  *
  81:main.c        ****  * \brief
  82:main.c        ****  ******************************************************************************/
  83:main.c        **** void vApplicationIdleHook(void)
  84:main.c        **** {
  85:main.c        **** 
  86:main.c        **** }
  87:main.c        **** 
  88:main.c        **** /******************************************************************************
  89:main.c        ****  * Private function definitions.
  90:main.c        ****  ******************************************************************************/
  91:main.c        **** 
  92:main.c        **** /**************************************************************************//**
  93:main.c        ****  * \fn static void vBlinkLed(void* pvParameters)
  94:main.c        ****  *
  95:main.c        ****  * \brief
  96:main.c        ****  *
  97:main.c        ****  * \param[in]   pvParameters
  98:main.c        ****  ******************************************************************************/
  99:main.c        **** static void vBlinkLed(void* pvParameters)
 100:main.c        **** {
 194               	.LM0:
 195               	.LFBB1:
 196 0000 CF93      		push r28
 197 0002 DF93      		push r29
 198 0004 00D0      		rcall .
 199 0006 CDB7      		in r28,__SP_L__
 200 0008 DEB7      		in r29,__SP_H__
 201               	/* prologue: function */
 202               	/* frame size = 2 */
 203               	/* stack size = 4 */
 204               	.L__stack_usage = 4
 205 000a 7C01      		movw r14,r24
 101:main.c        ****     QueueHandle_t xQueue = (QueueHandle_t)pvParameters;
 102:main.c        ****     LED_DDR |= _BV(LED);
 207               	.LM1:
 208 000c 259A      		sbi 0x4,5
 103:main.c        ****     uint16_t value;
 104:main.c        ****     for ( ;; )
 105:main.c        ****     {
 106:main.c        ****         if (xQueueReceive(xQueue, &value, (TickType_t)10) == pdTRUE)
 107:main.c        ****         {
 108:main.c        ****           printf("%"PRIu16"\r\n", value);
 210               	.LM2:
 211 000e 00E0      		ldi r16,lo8(.LC0)
 212 0010 10E0      		ldi r17,hi8(.LC0)
 213               	.L2:
 106:main.c        ****         {
 215               	.LM3:
 216 0012 4AE0      		ldi r20,lo8(10)
 217 0014 50E0      		ldi r21,0
 218 0016 BE01      		movw r22,r28
 219 0018 6F5F      		subi r22,-1
 220 001a 7F4F      		sbci r23,-1
 221 001c C701      		movw r24,r14
 222 001e 0E94 0000 		call xQueueReceive
 223 0022 8130      		cpi r24,lo8(1)
 224 0024 01F4      		brne .L2
 226               	.LM4:
 227 0026 8A81      		ldd r24,Y+2
 228 0028 8F93      		push r24
 229 002a 8981      		ldd r24,Y+1
 230 002c 8F93      		push r24
 231 002e 1F93      		push r17
 232 0030 0F93      		push r16
 233 0032 0E94 0000 		call printf
 109:main.c        ****           LED_PORT |= _BV(LED);
 235               	.LM5:
 236 0036 2D9A      		sbi 0x5,5
 110:main.c        ****           vTaskDelay(value / portTICK_PERIOD_MS);
 238               	.LM6:
 239 0038 8981      		ldd r24,Y+1
 240 003a 9A81      		ldd r25,Y+2
 241 003c 0E94 0000 		call vTaskDelay
 111:main.c        ****           LED_PORT &= ~_BV(LED);
 243               	.LM7:
 244 0040 2D98      		cbi 0x5,5
 112:main.c        ****           vTaskDelay(1000 / portTICK_PERIOD_MS);
 246               	.LM8:
 247 0042 88EE      		ldi r24,lo8(-24)
 248 0044 93E0      		ldi r25,lo8(3)
 249 0046 0E94 0000 		call vTaskDelay
 250 004a 0F90      		pop __tmp_reg__
 251 004c 0F90      		pop __tmp_reg__
 252 004e 0F90      		pop __tmp_reg__
 253 0050 0F90      		pop __tmp_reg__
 254 0052 00C0      		rjmp .L2
 259               	.Lscope1:
 261               		.stabd	78,0,0
 262               		.section	.rodata.str1.1
 263               	.LC1:
 264 0005 2575 00   		.string	"%u"
 265               	.LC2:
 266 0008 0D00      		.string	"\r"
 267               	.LC3:
 268 000a 626C 6164 		.string	"blad\r"
 268      0D00 
 269               		.text
 273               	vSerial:
 274               		.stabd	46,0,0
 113:main.c        ****         }
 114:main.c        ****     }
 115:main.c        **** }
 116:main.c        **** 
 117:main.c        **** 
 118:main.c        **** /**************************************************************************//**
 119:main.c        ****  * \fn static void vSerial(void* pvParameters)
 120:main.c        ****  *
 121:main.c        ****  * \brief
 122:main.c        ****  *
 123:main.c        ****  * \param[in]   pvParameters
 124:main.c        ****  ******************************************************************************/
 125:main.c        **** static void vSerial(void* pvParameters)
 126:main.c        **** {
 276               	.LM9:
 277               	.LFBB2:
 278 0054 CF93      		push r28
 279 0056 DF93      		push r29
 280 0058 00D0      		rcall .
 281 005a CDB7      		in r28,__SP_L__
 282 005c DEB7      		in r29,__SP_H__
 283               	/* prologue: function */
 284               	/* frame size = 2 */
 285               	/* stack size = 4 */
 286               	.L__stack_usage = 4
 287 005e 6C01      		movw r12,r24
 127:main.c        ****     uart_init();
 289               	.LM10:
 290 0060 0E94 0000 		call uart_init
 128:main.c        ****     stdin = stdout = stderr = &uart_file;
 292               	.LM11:
 293 0064 80E0      		ldi r24,lo8(uart_file)
 294 0066 90E0      		ldi r25,hi8(uart_file)
 295 0068 9093 0000 		sts __iob+4+1,r25
 296 006c 8093 0000 		sts __iob+4,r24
 297 0070 9093 0000 		sts __iob+2+1,r25
 298 0074 8093 0000 		sts __iob+2,r24
 299 0078 9093 0000 		sts __iob+1,r25
 300 007c 8093 0000 		sts __iob,r24
 129:main.c        ****     QueueHandle_t xQueue = (QueueHandle_t)pvParameters;
 130:main.c        ****     char input;
 131:main.c        ****     uint16_t value;
 132:main.c        ****     for ( ;; )
 133:main.c        ****     {
 134:main.c        ****         value = 0;
 135:main.c        ****         input = getchar();
 136:main.c        ****         //printf("%"PRIu16", input - '0');
 137:main.c        ****         while (input >= '0' && input <= '9')
 138:main.c        ****         {
 139:main.c        ****           printf("%"PRIu16"", input - '0');
 302               	.LM12:
 303 0080 80E0      		ldi r24,lo8(.LC1)
 304 0082 E82E      		mov r14,r24
 305 0084 80E0      		ldi r24,hi8(.LC1)
 306 0086 F82E      		mov r15,r24
 140:main.c        ****           value = value * 10 + (input - '0');
 308               	.LM13:
 309 0088 9AE0      		ldi r25,lo8(10)
 310 008a B92E      		mov r11,r25
 311               	.L9:
 134:main.c        ****         input = getchar();
 313               	.LM14:
 314 008c 1A82      		std Y+2,__zero_reg__
 315 008e 1982      		std Y+1,__zero_reg__
 135:main.c        ****         //printf("%"PRIu16", input - '0');
 317               	.LM15:
 318 0090 8091 0000 		lds r24,__iob
 319 0094 9091 0000 		lds r25,__iob+1
 320 0098 0E94 0000 		call fgetc
 321               	.L7:
 137:main.c        ****         {
 323               	.LM16:
 324 009c 90ED      		ldi r25,lo8(-48)
 325 009e 980F      		add r25,r24
 326 00a0 9A30      		cpi r25,lo8(10)
 327 00a2 00F4      		brsh .L13
 139:main.c        ****           value = value * 10 + (input - '0');
 329               	.LM17:
 330 00a4 082F      		mov r16,r24
 331 00a6 880F      		lsl r24
 332 00a8 110B      		sbc r17,r17
 333 00aa C801      		movw r24,r16
 334 00ac C097      		sbiw r24,48
 335 00ae 9F93      		push r25
 336 00b0 8F93      		push r24
 337 00b2 FF92      		push r15
 338 00b4 EF92      		push r14
 339 00b6 0E94 0000 		call printf
 341               	.LM18:
 342 00ba 2981      		ldd r18,Y+1
 343 00bc 3A81      		ldd r19,Y+2
 344 00be B29E      		mul r11,r18
 345 00c0 C001      		movw r24,r0
 346 00c2 B39E      		mul r11,r19
 347 00c4 900D      		add r25,r0
 348 00c6 1124      		clr __zero_reg__
 349 00c8 C097      		sbiw r24,48
 350 00ca 080F      		add r16,r24
 351 00cc 191F      		adc r17,r25
 352 00ce 1A83      		std Y+2,r17
 353 00d0 0983      		std Y+1,r16
 141:main.c        ****           input = getchar();
 355               	.LM19:
 356 00d2 8091 0000 		lds r24,__iob
 357 00d6 9091 0000 		lds r25,__iob+1
 358 00da 0E94 0000 		call fgetc
 359 00de 0F90      		pop __tmp_reg__
 360 00e0 0F90      		pop __tmp_reg__
 361 00e2 0F90      		pop __tmp_reg__
 362 00e4 0F90      		pop __tmp_reg__
 363 00e6 00C0      		rjmp .L7
 364               	.L13:
 142:main.c        ****         }
 143:main.c        ****         printf("\r\n");
 366               	.LM20:
 367 00e8 80E0      		ldi r24,lo8(.LC2)
 368 00ea 90E0      		ldi r25,hi8(.LC2)
 369 00ec 0E94 0000 		call puts
 144:main.c        ****         if( xQueueSend( xQueue,
 371               	.LM21:
 372 00f0 20E0      		ldi r18,0
 373 00f2 40E0      		ldi r20,0
 374 00f4 50E0      		ldi r21,0
 375 00f6 BE01      		movw r22,r28
 376 00f8 6F5F      		subi r22,-1
 377 00fa 7F4F      		sbci r23,-1
 378 00fc C601      		movw r24,r12
 379 00fe 0E94 0000 		call xQueueGenericSend
 380 0102 8130      		cpi r24,lo8(1)
 381 0104 01F0      		breq .L9
 145:main.c        ****                        ( void * ) &value,
 146:main.c        ****                        ( TickType_t ) 0 ) != pdPASS )
 147:main.c        ****         {
 148:main.c        ****             printf("blad\r\n");
 383               	.LM22:
 384 0106 80E0      		ldi r24,lo8(.LC3)
 385 0108 90E0      		ldi r25,hi8(.LC3)
 386 010a 0E94 0000 		call puts
 387 010e 00C0      		rjmp .L9
 393               	.Lscope2:
 395               		.stabd	78,0,0
 396               		.section	.rodata.str1.1
 397               	.LC4:
 398 0010 7365 7269 		.string	"serial"
 398      616C 00
 399               	.LC5:
 400 0017 626C 696E 		.string	"blink"
 400      6B00 
 401               		.section	.text.startup,"ax",@progbits
 403               	.global	main
 405               	main:
 406               		.stabd	46,0,0
  46:main.c        ****     // Create task.
 408               	.LM23:
 409               	.LFBB3:
 410 0000 CF92      		push r12
 411 0002 DF92      		push r13
 412 0004 EF92      		push r14
 413 0006 FF92      		push r15
 414 0008 0F93      		push r16
 415 000a CF93      		push r28
 416 000c DF93      		push r29
 417 000e 00D0      		rcall .
 418 0010 00D0      		rcall .
 419 0012 CDB7      		in r28,__SP_L__
 420 0014 DEB7      		in r29,__SP_H__
 421               	/* prologue: function */
 422               	/* frame size = 4 */
 423               	/* stack size = 11 */
 424               	.L__stack_usage = 11
  50:main.c        **** 
 426               	.LM24:
 427 0016 40E0      		ldi r20,0
 428 0018 62E0      		ldi r22,lo8(2)
 429 001a 84E6      		ldi r24,lo8(100)
 430 001c 0E94 0000 		call xQueueGenericCreate
 431 0020 6C01      		movw r12,r24
  52:main.c        ****     (
 433               	.LM25:
 434 0022 CE01      		movw r24,r28
 435 0024 0196      		adiw r24,1
 436 0026 7C01      		movw r14,r24
 437 0028 01E0      		ldi r16,lo8(1)
 438 002a 9601      		movw r18,r12
 439 002c 45E5      		ldi r20,lo8(85)
 440 002e 50E0      		ldi r21,0
 441 0030 60E0      		ldi r22,lo8(.LC4)
 442 0032 70E0      		ldi r23,hi8(.LC4)
 443 0034 80E0      		ldi r24,lo8(gs(vSerial))
 444 0036 90E0      		ldi r25,hi8(gs(vSerial))
 445 0038 0E94 0000 		call xTaskCreate
  61:main.c        ****     (
 447               	.LM26:
 448 003c CE01      		movw r24,r28
 449 003e 0396      		adiw r24,3
 450 0040 7C01      		movw r14,r24
 451 0042 02E0      		ldi r16,lo8(2)
 452 0044 9601      		movw r18,r12
 453 0046 45E5      		ldi r20,lo8(85)
 454 0048 50E0      		ldi r21,0
 455 004a 60E0      		ldi r22,lo8(.LC5)
 456 004c 70E0      		ldi r23,hi8(.LC5)
 457 004e 80E0      		ldi r24,lo8(gs(vBlinkLed))
 458 0050 90E0      		ldi r25,hi8(gs(vBlinkLed))
 459 0052 0E94 0000 		call xTaskCreate
  73:main.c        **** 
 461               	.LM27:
 462 0056 0E94 0000 		call vTaskStartScheduler
  76:main.c        **** 
 464               	.LM28:
 465 005a 80E0      		ldi r24,0
 466 005c 90E0      		ldi r25,0
 467               	/* epilogue start */
 468 005e 0F90      		pop __tmp_reg__
 469 0060 0F90      		pop __tmp_reg__
 470 0062 0F90      		pop __tmp_reg__
 471 0064 0F90      		pop __tmp_reg__
 472 0066 DF91      		pop r29
 473 0068 CF91      		pop r28
 474 006a 0F91      		pop r16
 475 006c FF90      		pop r15
 476 006e EF90      		pop r14
 477 0070 DF90      		pop r13
 478 0072 CF90      		pop r12
 479 0074 0895      		ret
 486               	.Lscope3:
 488               		.stabd	78,0,0
 489               		.text
 491               	.global	vApplicationIdleHook
 493               	vApplicationIdleHook:
 494               		.stabd	46,0,0
  84:main.c        **** 
 496               	.LM29:
 497               	.LFBB4:
 498               	/* prologue: function */
 499               	/* frame size = 0 */
 500               	/* stack size = 0 */
 501               	.L__stack_usage = 0
 502 0110 0895      		ret
 504               	.Lscope4:
 506               		.stabd	78,0,0
 507               		.comm	uart_file,14,1
 510               	.Letext0:
 511               		.ident	"GCC: (GNU) 5.4.0"
 512               	.global __do_copy_data
 513               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccmXvqHO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmXvqHO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmXvqHO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmXvqHO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmXvqHO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmXvqHO.s:191    .text:0000000000000000 vBlinkLed
     /tmp/ccmXvqHO.s:273    .text:0000000000000054 vSerial
                            *COM*:000000000000000e uart_file
     /tmp/ccmXvqHO.s:405    .text.startup:0000000000000000 main
     /tmp/ccmXvqHO.s:493    .text:0000000000000110 vApplicationIdleHook

UNDEFINED SYMBOLS
xQueueReceive
printf
vTaskDelay
uart_init
__iob
fgetc
puts
xQueueGenericSend
xQueueGenericCreate
xTaskCreate
vTaskStartScheduler
__do_copy_data
__do_clear_bss
