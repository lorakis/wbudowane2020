
zad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005a0  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca6  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

#define LED_DDR DDRD
#define LED_PORT PORTD

int main() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	2a 97       	sbiw	r28, 0x0a	; 10
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
  uint8_t tab[10];
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  94:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  98:	87 7e       	andi	r24, 0xE7	; 231
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  LED_DDR |= 0b11111111;
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a b9       	out	0x0a, r24	; 10
  E = 0b00010000;
  F = 0b00100000;
  G = 0b01000000;


  tab[0] = 0b00111111;
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	89 83       	std	Y+1, r24	; 0x01
  tab[1] = 0b00000110;
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	8a 83       	std	Y+2, r24	; 0x02
  tab[2] = 0b01011011;
  ac:	8b e5       	ldi	r24, 0x5B	; 91
  ae:	8b 83       	std	Y+3, r24	; 0x03
  tab[3] = 0b01001111;
  b0:	8f e4       	ldi	r24, 0x4F	; 79
  b2:	8c 83       	std	Y+4, r24	; 0x04
  tab[4] = 0b01100110;
  b4:	86 e6       	ldi	r24, 0x66	; 102
  b6:	8d 83       	std	Y+5, r24	; 0x05
  tab[5] = 0b01101101;
  b8:	8d e6       	ldi	r24, 0x6D	; 109
  ba:	8e 83       	std	Y+6, r24	; 0x06
  tab[6] = 0b01111101;
  bc:	8d e7       	ldi	r24, 0x7D	; 125
  be:	8f 83       	std	Y+7, r24	; 0x07
  tab[7] = 0b00000111;
  c0:	87 e0       	ldi	r24, 0x07	; 7
  c2:	88 87       	std	Y+8, r24	; 0x08
  tab[8] = 0b01111111;
  c4:	8f e7       	ldi	r24, 0x7F	; 127
  c6:	89 87       	std	Y+9, r24	; 0x09
  tab[9] = 0b01101111;
  c8:	8f e6       	ldi	r24, 0x6F	; 111
  ca:	8a 87       	std	Y+10, r24	; 0x0a
  cc:	9e 01       	movw	r18, r28
  ce:	25 5f       	subi	r18, 0xF5	; 245
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	fe 01       	movw	r30, r28
  d4:	31 96       	adiw	r30, 0x01	; 1
  while(1)
  {

    for(int i = 0; i < 10; i++)
    {
      LED_PORT = ~tab[i];
  d6:	81 91       	ld	r24, Z+
  d8:	80 95       	com	r24
  da:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
  tab[9] = 0b01101111;

  while(1)
  {

    for(int i = 0; i < 10; i++)
  ee:	e2 17       	cp	r30, r18
  f0:	f3 07       	cpc	r31, r19
  f2:	89 f7       	brne	.-30     	; 0xd6 <main+0x56>
  f4:	ee cf       	rjmp	.-36     	; 0xd2 <main+0x52>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
