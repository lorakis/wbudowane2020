
zad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000630  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c90  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <left>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	83 ec       	ldi	r24, 0xC3	; 195
  84:	99 e0       	ldi	r25, 0x09	; 9
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <left+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <left+0x10>
  90:	00 00       	nop
#define LED_PORT PORTD

void left()
{
  _delay_ms(200);
  LED_PORT <<= 1;
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	88 0f       	add	r24, r24
  96:	8b b9       	out	0x0b, r24	; 11
  98:	08 95       	ret

0000009a <right>:
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	83 ec       	ldi	r24, 0xC3	; 195
  9e:	99 e0       	ldi	r25, 0x09	; 9
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <right+0x6>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <right+0x10>
  aa:	00 00       	nop
}
void right()
{
  _delay_ms(200);
  LED_PORT >>= 1;
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	86 95       	lsr	r24
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <main>:
}

int main() {
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  b4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  b8:	87 7e       	andi	r24, 0xE7	; 231
  ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  LED_DDR |= 0b11111111;
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a b9       	out	0x0a, r24	; 10
  LED_PORT |= 0b00000001;
  c4:	58 9a       	sbi	0x0b, 0	; 11
{
  _delay_ms(200);
  LED_PORT >>= 1;
}

int main() {
  c6:	27 e0       	ldi	r18, 0x07	; 7
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x26>
  da:	00 00       	nop
#define LED_PORT PORTD

void left()
{
  _delay_ms(200);
  LED_PORT <<= 1;
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	88 0f       	add	r24, r24
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  LED_DDR |= 0b11111111;
  LED_PORT |= 0b00000001;
  while(1)
  {
    for(int i = 0; i < 7; i++)
  e6:	89 f7       	brne	.-30     	; 0xca <main+0x16>
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	83 ec       	ldi	r24, 0xC3	; 195
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x3e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x48>
  fc:	00 00       	nop
  LED_PORT <<= 1;
}
void right()
{
  _delay_ms(200);
  LED_PORT >>= 1;
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	86 95       	lsr	r24
 102:	8b b9       	out	0x0b, r24	; 11
 104:	21 50       	subi	r18, 0x01	; 1
 106:	31 09       	sbc	r19, r1
  LED_PORT |= 0b00000001;
  while(1)
  {
    for(int i = 0; i < 7; i++)
      left();
    for(int i = 0; i < 7; i++)
 108:	89 f7       	brne	.-30     	; 0xec <main+0x38>
 10a:	dd cf       	rjmp	.-70     	; 0xc6 <main+0x12>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
