
zad4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000235c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000235c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000022b0  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001022  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000056a2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000056b4  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000628a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__c.2529>:
     16a:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     17a:	47 00                                               G.

0000017c <pstr_an>:
     17c:	61 6e 00                                            an.

0000017f <pstr_nfinity>:
     17f:	6e 66 69 6e 69 74 79 00                             nfinity.

00000187 <pwr_m10>:
     187:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     197:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000019f <pwr_p10>:
     19f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1af:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001b7 <astro_tempo>:
     1b7:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     1c7:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     1d7:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     1e7:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     1f7:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     207:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     217:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     227:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     237:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     247:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     257:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     267:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     277:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     287:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     297:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................
     2a7:	c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00 c8 00     ................

000002b7 <astro>:
     2b7:	fb 04 00 00 fb 04 54 03 bb 03 00 00 4c 04 00 00     ......T.....L...
     2c7:	88 04 00 00 88 04 88 04 bb 03 00 00 4c 04 88 04     ............L...
     2d7:	fb 04 00 00 fb 04 12 02 38 02 12 02 38 02 12 02     ........8...8...
     2e7:	fb 04 00 00 fb 04 12 02 38 02 12 02 38 02 12 02     ........8...8...
     2f7:	fb 04 00 00 fb 04 54 03 bb 03 00 00 4c 04 00 00     ......T.....L...
     307:	88 04 00 00 88 04 88 04 bb 03 00 00 4c 04 88 04     ............L...
     317:	fb 04 00 00 fb 04 12 02 38 02 12 02 38 02 12 02     ........8...8...
     327:	fb 04 00 00 fb 04 12 02 38 02 12 02 38 02 12 02     ........8...8...
     337:	fb 04 00 00 fb 04 54 03 bb 03 00 00 4c 04 00 00     ......T.....L...
     347:	88 04 00 00 88 04 88 04 bb 03 00 00 4c 04 88 04     ............L...
     357:	fb 04 00 00 fb 04 12 02 38 02 12 02 38 02 12 02     ........8...8...
     367:	fb 04 00 00 fb 04 12 02 38 02 12 02 38 02 12 02     ........8...8...
     377:	4c 04 4c 04 4c 04 4c 04 54 03 54 03 54 03 54 03     L.L.L.L.T.T.T.T.
     387:	bb 03 bb 03 bb 03 bb 03 cc 02 cc 02 cc 02 cc 02     ................
     397:	7e 02 7e 02 7e 02 7e 02 7e 02 7e 02 7e 02 7e 02     ~.~.~.~.~.~.~.~.
     3a7:	7e 02 7e 02 7e 02 7e 02 bb 03 4c 04 88 04 78 05     ~.~.~.~...L...x.
	...

000003b8 <__ctors_end>:
     3b8:	11 24       	eor	r1, r1
     3ba:	1f be       	out	0x3f, r1	; 63
     3bc:	cf ef       	ldi	r28, 0xFF	; 255
     3be:	d8 e0       	ldi	r29, 0x08	; 8
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <main>
     3c8:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <_LCD_OutNibble>:
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     3d0:	80 ff       	sbrs	r24, 0
     3d2:	0b c0       	rjmp	.+22     	; 0x3ea <_LCD_OutNibble+0x1a>
	LCD_DB4_PORT |= LCD_DB4;
     3d4:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     3d6:	81 ff       	sbrs	r24, 1
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <_LCD_OutNibble+0x20>
	LCD_DB5_PORT |= LCD_DB5;
     3da:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     3dc:	82 ff       	sbrs	r24, 2
     3de:	0b c0       	rjmp	.+22     	; 0x3f6 <_LCD_OutNibble+0x26>
	LCD_DB6_PORT |= LCD_DB6;
     3e0:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     3e2:	83 fd       	sbrc	r24, 3
     3e4:	0b c0       	rjmp	.+22     	; 0x3fc <_LCD_OutNibble+0x2c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     3e6:	5b 98       	cbi	0x0b, 3	; 11
     3e8:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     3ea:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     3ec:	81 fd       	sbrc	r24, 1
     3ee:	f5 cf       	rjmp	.-22     	; 0x3da <_LCD_OutNibble+0xa>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     3f0:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     3f2:	82 fd       	sbrc	r24, 2
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <_LCD_OutNibble+0x10>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     3f6:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     3f8:	83 ff       	sbrs	r24, 3
     3fa:	f5 cf       	rjmp	.-22     	; 0x3e6 <_LCD_OutNibble+0x16>
	LCD_DB7_PORT |= LCD_DB7;
     3fc:	5b 9a       	sbi	0x0b, 3	; 11
     3fe:	08 95       	ret

00000400 <_LCD_Write>:
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     400:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     402:	98 2f       	mov	r25, r24
     404:	92 95       	swap	r25
     406:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     408:	90 ff       	sbrs	r25, 0
     40a:	20 c0       	rjmp	.+64     	; 0x44c <_LCD_Write+0x4c>
	LCD_DB4_PORT |= LCD_DB4;
     40c:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     40e:	91 ff       	sbrs	r25, 1
     410:	20 c0       	rjmp	.+64     	; 0x452 <_LCD_Write+0x52>
	LCD_DB5_PORT |= LCD_DB5;
     412:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     414:	92 ff       	sbrs	r25, 2
     416:	20 c0       	rjmp	.+64     	; 0x458 <_LCD_Write+0x58>
	LCD_DB6_PORT |= LCD_DB6;
     418:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     41a:	98 70       	andi	r25, 0x08	; 8
     41c:	01 f5       	brne	.+64     	; 0x45e <_LCD_Write+0x5e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     41e:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     420:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     422:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     424:	80 ff       	sbrs	r24, 0
     426:	20 c0       	rjmp	.+64     	; 0x468 <_LCD_Write+0x68>
	LCD_DB4_PORT |= LCD_DB4;
     428:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     42a:	81 ff       	sbrs	r24, 1
     42c:	20 c0       	rjmp	.+64     	; 0x46e <_LCD_Write+0x6e>
	LCD_DB5_PORT |= LCD_DB5;
     42e:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     430:	82 ff       	sbrs	r24, 2
     432:	20 c0       	rjmp	.+64     	; 0x474 <_LCD_Write+0x74>
	LCD_DB6_PORT |= LCD_DB6;
     434:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     436:	83 fd       	sbrc	r24, 3
     438:	20 c0       	rjmp	.+64     	; 0x47a <_LCD_Write+0x7a>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     43a:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     43c:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43e:	87 ec       	ldi	r24, 0xC7	; 199
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <_LCD_Write+0x42>
     446:	00 c0       	rjmp	.+0      	; 0x448 <_LCD_Write+0x48>
     448:	00 00       	nop
     44a:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     44c:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     44e:	91 fd       	sbrc	r25, 1
     450:	e0 cf       	rjmp	.-64     	; 0x412 <_LCD_Write+0x12>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     452:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     454:	92 fd       	sbrc	r25, 2
     456:	e0 cf       	rjmp	.-64     	; 0x418 <_LCD_Write+0x18>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     458:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     45a:	98 70       	andi	r25, 0x08	; 8
     45c:	01 f3       	breq	.-64     	; 0x41e <_LCD_Write+0x1e>
	LCD_DB7_PORT |= LCD_DB7;
     45e:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     460:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     462:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     464:	80 fd       	sbrc	r24, 0
     466:	e0 cf       	rjmp	.-64     	; 0x428 <_LCD_Write+0x28>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     468:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     46a:	81 fd       	sbrc	r24, 1
     46c:	e0 cf       	rjmp	.-64     	; 0x42e <_LCD_Write+0x2e>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     46e:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     470:	82 fd       	sbrc	r24, 2
     472:	e0 cf       	rjmp	.-64     	; 0x434 <_LCD_Write+0x34>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     474:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     476:	83 ff       	sbrs	r24, 3
     478:	e0 cf       	rjmp	.-64     	; 0x43a <_LCD_Write+0x3a>
	LCD_DB7_PORT |= LCD_DB7;
     47a:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     47c:	5f 98       	cbi	0x0b, 7	; 11
     47e:	87 ec       	ldi	r24, 0xC7	; 199
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <_LCD_Write+0x82>
     486:	00 c0       	rjmp	.+0      	; 0x488 <_LCD_Write+0x88>
     488:	00 00       	nop
     48a:	08 95       	ret

0000048c <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     48c:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     48e:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     490:	98 2f       	mov	r25, r24
     492:	92 95       	swap	r25
     494:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     496:	90 ff       	sbrs	r25, 0
     498:	20 c0       	rjmp	.+64     	; 0x4da <LCD_WriteCommand+0x4e>
	LCD_DB4_PORT |= LCD_DB4;
     49a:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     49c:	91 ff       	sbrs	r25, 1
     49e:	20 c0       	rjmp	.+64     	; 0x4e0 <LCD_WriteCommand+0x54>
	LCD_DB5_PORT |= LCD_DB5;
     4a0:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     4a2:	92 ff       	sbrs	r25, 2
     4a4:	20 c0       	rjmp	.+64     	; 0x4e6 <LCD_WriteCommand+0x5a>
	LCD_DB6_PORT |= LCD_DB6;
     4a6:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     4a8:	98 70       	andi	r25, 0x08	; 8
     4aa:	01 f5       	brne	.+64     	; 0x4ec <LCD_WriteCommand+0x60>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     4ac:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     4ae:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     4b0:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     4b2:	80 ff       	sbrs	r24, 0
     4b4:	20 c0       	rjmp	.+64     	; 0x4f6 <LCD_WriteCommand+0x6a>
	LCD_DB4_PORT |= LCD_DB4;
     4b6:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     4b8:	81 ff       	sbrs	r24, 1
     4ba:	20 c0       	rjmp	.+64     	; 0x4fc <LCD_WriteCommand+0x70>
	LCD_DB5_PORT |= LCD_DB5;
     4bc:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     4be:	82 ff       	sbrs	r24, 2
     4c0:	20 c0       	rjmp	.+64     	; 0x502 <LCD_WriteCommand+0x76>
	LCD_DB6_PORT |= LCD_DB6;
     4c2:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     4c4:	83 fd       	sbrc	r24, 3
     4c6:	20 c0       	rjmp	.+64     	; 0x508 <LCD_WriteCommand+0x7c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     4c8:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     4ca:	5f 98       	cbi	0x0b, 7	; 11
     4cc:	87 ec       	ldi	r24, 0xC7	; 199
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_WriteCommand+0x44>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_WriteCommand+0x4a>
     4d6:	00 00       	nop
     4d8:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     4da:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     4dc:	91 fd       	sbrc	r25, 1
     4de:	e0 cf       	rjmp	.-64     	; 0x4a0 <LCD_WriteCommand+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     4e0:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     4e2:	92 fd       	sbrc	r25, 2
     4e4:	e0 cf       	rjmp	.-64     	; 0x4a6 <LCD_WriteCommand+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     4e6:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     4e8:	98 70       	andi	r25, 0x08	; 8
     4ea:	01 f3       	breq	.-64     	; 0x4ac <LCD_WriteCommand+0x20>
	LCD_DB7_PORT |= LCD_DB7;
     4ec:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     4ee:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     4f0:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     4f2:	80 fd       	sbrc	r24, 0
     4f4:	e0 cf       	rjmp	.-64     	; 0x4b6 <LCD_WriteCommand+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     4f6:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     4f8:	81 fd       	sbrc	r24, 1
     4fa:	e0 cf       	rjmp	.-64     	; 0x4bc <LCD_WriteCommand+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     4fc:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     4fe:	82 fd       	sbrc	r24, 2
     500:	e0 cf       	rjmp	.-64     	; 0x4c2 <LCD_WriteCommand+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     502:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     504:	83 ff       	sbrs	r24, 3
     506:	e0 cf       	rjmp	.-64     	; 0x4c8 <LCD_WriteCommand+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
     508:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     50a:	5f 98       	cbi	0x0b, 7	; 11
     50c:	87 ec       	ldi	r24, 0xC7	; 199
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <LCD_WriteCommand+0x84>
     514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_WriteCommand+0x8a>
     516:	00 00       	nop
     518:	08 95       	ret

0000051a <LCD_WriteData>:
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
     51a:	28 9a       	sbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     51c:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     51e:	98 2f       	mov	r25, r24
     520:	92 95       	swap	r25
     522:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     524:	90 ff       	sbrs	r25, 0
     526:	20 c0       	rjmp	.+64     	; 0x568 <LCD_WriteData+0x4e>
	LCD_DB4_PORT |= LCD_DB4;
     528:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     52a:	91 ff       	sbrs	r25, 1
     52c:	20 c0       	rjmp	.+64     	; 0x56e <LCD_WriteData+0x54>
	LCD_DB5_PORT |= LCD_DB5;
     52e:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     530:	92 ff       	sbrs	r25, 2
     532:	20 c0       	rjmp	.+64     	; 0x574 <LCD_WriteData+0x5a>
	LCD_DB6_PORT |= LCD_DB6;
     534:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     536:	98 70       	andi	r25, 0x08	; 8
     538:	01 f5       	brne	.+64     	; 0x57a <LCD_WriteData+0x60>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     53a:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     53c:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     53e:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     540:	80 ff       	sbrs	r24, 0
     542:	20 c0       	rjmp	.+64     	; 0x584 <LCD_WriteData+0x6a>
	LCD_DB4_PORT |= LCD_DB4;
     544:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     546:	81 ff       	sbrs	r24, 1
     548:	20 c0       	rjmp	.+64     	; 0x58a <LCD_WriteData+0x70>
	LCD_DB5_PORT |= LCD_DB5;
     54a:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     54c:	82 ff       	sbrs	r24, 2
     54e:	20 c0       	rjmp	.+64     	; 0x590 <LCD_WriteData+0x76>
	LCD_DB6_PORT |= LCD_DB6;
     550:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     552:	83 fd       	sbrc	r24, 3
     554:	20 c0       	rjmp	.+64     	; 0x596 <LCD_WriteData+0x7c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     556:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     558:	5f 98       	cbi	0x0b, 7	; 11
     55a:	87 ec       	ldi	r24, 0xC7	; 199
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <LCD_WriteData+0x44>
     562:	00 c0       	rjmp	.+0      	; 0x564 <LCD_WriteData+0x4a>
     564:	00 00       	nop
     566:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     568:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     56a:	91 fd       	sbrc	r25, 1
     56c:	e0 cf       	rjmp	.-64     	; 0x52e <LCD_WriteData+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     56e:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     570:	92 fd       	sbrc	r25, 2
     572:	e0 cf       	rjmp	.-64     	; 0x534 <LCD_WriteData+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     574:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     576:	98 70       	andi	r25, 0x08	; 8
     578:	01 f3       	breq	.-64     	; 0x53a <LCD_WriteData+0x20>
	LCD_DB7_PORT |= LCD_DB7;
     57a:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     57c:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     57e:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     580:	80 fd       	sbrc	r24, 0
     582:	e0 cf       	rjmp	.-64     	; 0x544 <LCD_WriteData+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     584:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     586:	81 fd       	sbrc	r24, 1
     588:	e0 cf       	rjmp	.-64     	; 0x54a <LCD_WriteData+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     58a:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     58c:	82 fd       	sbrc	r24, 2
     58e:	e0 cf       	rjmp	.-64     	; 0x550 <LCD_WriteData+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     590:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     592:	83 ff       	sbrs	r24, 3
     594:	e0 cf       	rjmp	.-64     	; 0x556 <LCD_WriteData+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
     596:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     598:	5f 98       	cbi	0x0b, 7	; 11
     59a:	87 ec       	ldi	r24, 0xC7	; 199
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <LCD_WriteData+0x84>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <LCD_WriteData+0x8a>
     5a4:	00 00       	nop
     5a6:	08 95       	ret

000005a8 <LCD_WriteText>:
//
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
     5a8:	fc 01       	movw	r30, r24
while(*text)
     5aa:	90 81       	ld	r25, Z
     5ac:	99 23       	and	r25, r25
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <LCD_WriteText+0xa>
     5b0:	44 c0       	rjmp	.+136    	; 0x63a <LCD_WriteText+0x92>
     5b2:	31 96       	adiw	r30, 0x01	; 1
     5b4:	22 c0       	rjmp	.+68     	; 0x5fa <LCD_WriteText+0x52>
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
     5b6:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     5b8:	21 ff       	sbrs	r18, 1
     5ba:	29 c0       	rjmp	.+82     	; 0x60e <LCD_WriteText+0x66>
	LCD_DB5_PORT |= LCD_DB5;
     5bc:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     5be:	22 ff       	sbrs	r18, 2
     5c0:	29 c0       	rjmp	.+82     	; 0x614 <LCD_WriteText+0x6c>
	LCD_DB6_PORT |= LCD_DB6;
     5c2:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     5c4:	28 70       	andi	r18, 0x08	; 8
     5c6:	49 f5       	brne	.+82     	; 0x61a <LCD_WriteText+0x72>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     5c8:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     5ca:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     5cc:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     5ce:	90 ff       	sbrs	r25, 0
     5d0:	29 c0       	rjmp	.+82     	; 0x624 <LCD_WriteText+0x7c>
	LCD_DB4_PORT |= LCD_DB4;
     5d2:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     5d4:	91 ff       	sbrs	r25, 1
     5d6:	29 c0       	rjmp	.+82     	; 0x62a <LCD_WriteText+0x82>
	LCD_DB5_PORT |= LCD_DB5;
     5d8:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     5da:	92 ff       	sbrs	r25, 2
     5dc:	29 c0       	rjmp	.+82     	; 0x630 <LCD_WriteText+0x88>
	LCD_DB6_PORT |= LCD_DB6;
     5de:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     5e0:	93 fd       	sbrc	r25, 3
     5e2:	29 c0       	rjmp	.+82     	; 0x636 <LCD_WriteText+0x8e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     5e4:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     5e6:	5f 98       	cbi	0x0b, 7	; 11
     5e8:	87 ec       	ldi	r24, 0xC7	; 199
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_WriteText+0x44>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_WriteText+0x4a>
     5f2:	00 00       	nop
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
     5f4:	91 91       	ld	r25, Z+
     5f6:	99 23       	and	r25, r25
     5f8:	01 f1       	breq	.+64     	; 0x63a <LCD_WriteText+0x92>
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
     5fa:	28 9a       	sbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     5fc:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     5fe:	29 2f       	mov	r18, r25
     600:	22 95       	swap	r18
     602:	2f 70       	andi	r18, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     604:	20 fd       	sbrc	r18, 0
     606:	d7 cf       	rjmp	.-82     	; 0x5b6 <LCD_WriteText+0xe>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     608:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     60a:	21 fd       	sbrc	r18, 1
     60c:	d7 cf       	rjmp	.-82     	; 0x5bc <LCD_WriteText+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     60e:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     610:	22 fd       	sbrc	r18, 2
     612:	d7 cf       	rjmp	.-82     	; 0x5c2 <LCD_WriteText+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     614:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     616:	28 70       	andi	r18, 0x08	; 8
     618:	b9 f2       	breq	.-82     	; 0x5c8 <LCD_WriteText+0x20>
	LCD_DB7_PORT |= LCD_DB7;
     61a:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     61c:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     61e:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     620:	90 fd       	sbrc	r25, 0
     622:	d7 cf       	rjmp	.-82     	; 0x5d2 <LCD_WriteText+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     624:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     626:	91 fd       	sbrc	r25, 1
     628:	d7 cf       	rjmp	.-82     	; 0x5d8 <LCD_WriteText+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     62a:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     62c:	92 fd       	sbrc	r25, 2
     62e:	d7 cf       	rjmp	.-82     	; 0x5de <LCD_WriteText+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     630:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     632:	93 ff       	sbrs	r25, 3
     634:	d7 cf       	rjmp	.-82     	; 0x5e4 <LCD_WriteText+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
     636:	5b 9a       	sbi	0x0b, 3	; 11
     638:	d6 cf       	rjmp	.-84     	; 0x5e6 <LCD_WriteText+0x3e>
     63a:	08 95       	ret

0000063c <LCD_GoTo>:
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     63c:	90 e4       	ldi	r25, 0x40	; 64
     63e:	69 9f       	mul	r22, r25
     640:	80 0d       	add	r24, r0
     642:	11 24       	eor	r1, r1
     644:	80 68       	ori	r24, 0x80	; 128
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     646:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     648:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     64a:	98 2f       	mov	r25, r24
     64c:	92 95       	swap	r25
     64e:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     650:	90 ff       	sbrs	r25, 0
     652:	1e c0       	rjmp	.+60     	; 0x690 <LCD_GoTo+0x54>
	LCD_DB4_PORT |= LCD_DB4;
     654:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     656:	91 ff       	sbrs	r25, 1
     658:	1e c0       	rjmp	.+60     	; 0x696 <LCD_GoTo+0x5a>
	LCD_DB5_PORT |= LCD_DB5;
     65a:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     65c:	92 ff       	sbrs	r25, 2
     65e:	1e c0       	rjmp	.+60     	; 0x69c <LCD_GoTo+0x60>
	LCD_DB6_PORT |= LCD_DB6;
     660:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
     662:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     664:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     666:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     668:	80 ff       	sbrs	r24, 0
     66a:	1e c0       	rjmp	.+60     	; 0x6a8 <LCD_GoTo+0x6c>
	LCD_DB4_PORT |= LCD_DB4;
     66c:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     66e:	81 ff       	sbrs	r24, 1
     670:	1e c0       	rjmp	.+60     	; 0x6ae <LCD_GoTo+0x72>
	LCD_DB5_PORT |= LCD_DB5;
     672:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     674:	82 ff       	sbrs	r24, 2
     676:	1e c0       	rjmp	.+60     	; 0x6b4 <LCD_GoTo+0x78>
	LCD_DB6_PORT |= LCD_DB6;
     678:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     67a:	83 fd       	sbrc	r24, 3
     67c:	1e c0       	rjmp	.+60     	; 0x6ba <LCD_GoTo+0x7e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     67e:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     680:	5f 98       	cbi	0x0b, 7	; 11
     682:	87 ec       	ldi	r24, 0xC7	; 199
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <LCD_GoTo+0x4a>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <LCD_GoTo+0x50>
     68c:	00 00       	nop
     68e:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     690:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     692:	91 fd       	sbrc	r25, 1
     694:	e2 cf       	rjmp	.-60     	; 0x65a <LCD_GoTo+0x1e>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     696:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     698:	92 fd       	sbrc	r25, 2
     69a:	e2 cf       	rjmp	.-60     	; 0x660 <LCD_GoTo+0x24>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     69c:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
     69e:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     6a0:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     6a2:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     6a4:	80 fd       	sbrc	r24, 0
     6a6:	e2 cf       	rjmp	.-60     	; 0x66c <LCD_GoTo+0x30>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     6a8:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     6aa:	81 fd       	sbrc	r24, 1
     6ac:	e2 cf       	rjmp	.-60     	; 0x672 <LCD_GoTo+0x36>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     6ae:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     6b0:	82 fd       	sbrc	r24, 2
     6b2:	e2 cf       	rjmp	.-60     	; 0x678 <LCD_GoTo+0x3c>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     6b4:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     6b6:	83 ff       	sbrs	r24, 3
     6b8:	e2 cf       	rjmp	.-60     	; 0x67e <LCD_GoTo+0x42>
	LCD_DB7_PORT |= LCD_DB7;
     6ba:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     6bc:	5f 98       	cbi	0x0b, 7	; 11
     6be:	87 ec       	ldi	r24, 0xC7	; 199
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCD_GoTo+0x86>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_GoTo+0x8c>
     6c8:	00 00       	nop
     6ca:	08 95       	ret

000006cc <LCD_Clear>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     6cc:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     6ce:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     6d0:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     6d2:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     6d4:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     6d6:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     6d8:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     6da:	5f 9a       	sbi	0x0b, 7	; 11
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
     6dc:	5e 9a       	sbi	0x0b, 6	; 11
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     6de:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     6e0:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     6e2:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     6e4:	5f 98       	cbi	0x0b, 7	; 11
     6e6:	87 ec       	ldi	r24, 0xC7	; 199
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_Clear+0x1e>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_Clear+0x24>
     6f0:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f2:	8f e3       	ldi	r24, 0x3F	; 63
     6f4:	9f e1       	ldi	r25, 0x1F	; 31
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_Clear+0x2a>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <LCD_Clear+0x30>
     6fc:	00 00       	nop
     6fe:	08 95       	ret

00000700 <LCD_Home>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     700:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     702:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     704:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     706:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     708:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     70a:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     70c:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     70e:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     710:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
     712:	5d 9a       	sbi	0x0b, 5	; 11
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     714:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     716:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     718:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71a:	87 ec       	ldi	r24, 0xC7	; 199
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <LCD_Home+0x1e>
     722:	00 c0       	rjmp	.+0      	; 0x724 <LCD_Home+0x24>
     724:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     726:	8f e3       	ldi	r24, 0x3F	; 63
     728:	9f e1       	ldi	r25, 0x1F	; 31
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <LCD_Home+0x2a>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <LCD_Home+0x30>
     730:	00 00       	nop
     732:	08 95       	ret

00000734 <LCD_Initialize>:
     734:	56 9a       	sbi	0x0a, 6	; 10
     736:	55 9a       	sbi	0x0a, 5	; 10
     738:	54 9a       	sbi	0x0a, 4	; 10
     73a:	53 9a       	sbi	0x0a, 3	; 10
     73c:	57 9a       	sbi	0x0a, 7	; 10
     73e:	20 9a       	sbi	0x04, 0	; 4
     740:	8f e5       	ldi	r24, 0x5F	; 95
     742:	9a ee       	ldi	r25, 0xEA	; 234
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <LCD_Initialize+0x10>
     748:	00 c0       	rjmp	.+0      	; 0x74a <LCD_Initialize+0x16>
     74a:	00 00       	nop
     74c:	28 98       	cbi	0x05, 0	; 5
     74e:	5f 98       	cbi	0x0b, 7	; 11
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	5f 9a       	sbi	0x0b, 7	; 11
     754:	5e 9a       	sbi	0x0b, 6	; 11
     756:	5d 9a       	sbi	0x0b, 5	; 11
     758:	5c 98       	cbi	0x0b, 4	; 11
     75a:	5b 98       	cbi	0x0b, 3	; 11
     75c:	5f 98       	cbi	0x0b, 7	; 11
     75e:	ef e1       	ldi	r30, 0x1F	; 31
     760:	fe e4       	ldi	r31, 0x4E	; 78
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <LCD_Initialize+0x2e>
     766:	00 c0       	rjmp	.+0      	; 0x768 <LCD_Initialize+0x34>
     768:	00 00       	nop
     76a:	81 50       	subi	r24, 0x01	; 1
     76c:	91 f7       	brne	.-28     	; 0x752 <LCD_Initialize+0x1e>
     76e:	5f 9a       	sbi	0x0b, 7	; 11
     770:	5e 98       	cbi	0x0b, 6	; 11
     772:	5d 9a       	sbi	0x0b, 5	; 11
     774:	5c 98       	cbi	0x0b, 4	; 11
     776:	5b 98       	cbi	0x0b, 3	; 11
     778:	5f 98       	cbi	0x0b, 7	; 11
     77a:	8f e9       	ldi	r24, 0x9F	; 159
     77c:	9f e0       	ldi	r25, 0x0F	; 15
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <LCD_Initialize+0x4a>
     782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_Initialize+0x50>
     784:	00 00       	nop
     786:	28 98       	cbi	0x05, 0	; 5
     788:	5f 9a       	sbi	0x0b, 7	; 11
     78a:	5e 98       	cbi	0x0b, 6	; 11
     78c:	5d 9a       	sbi	0x0b, 5	; 11
     78e:	5c 98       	cbi	0x0b, 4	; 11
     790:	5b 98       	cbi	0x0b, 3	; 11
     792:	5f 98       	cbi	0x0b, 7	; 11
     794:	5f 9a       	sbi	0x0b, 7	; 11
     796:	5e 98       	cbi	0x0b, 6	; 11
     798:	5d 98       	cbi	0x0b, 5	; 11
     79a:	5c 98       	cbi	0x0b, 4	; 11
     79c:	5b 9a       	sbi	0x0b, 3	; 11
     79e:	5f 98       	cbi	0x0b, 7	; 11
     7a0:	e7 ec       	ldi	r30, 0xC7	; 199
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <LCD_Initialize+0x70>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <LCD_Initialize+0x76>
     7aa:	00 00       	nop
     7ac:	28 98       	cbi	0x05, 0	; 5
     7ae:	5f 9a       	sbi	0x0b, 7	; 11
     7b0:	5e 98       	cbi	0x0b, 6	; 11
     7b2:	5d 98       	cbi	0x0b, 5	; 11
     7b4:	5c 98       	cbi	0x0b, 4	; 11
     7b6:	5b 98       	cbi	0x0b, 3	; 11
     7b8:	5f 98       	cbi	0x0b, 7	; 11
     7ba:	5f 9a       	sbi	0x0b, 7	; 11
     7bc:	5e 98       	cbi	0x0b, 6	; 11
     7be:	5d 98       	cbi	0x0b, 5	; 11
     7c0:	5c 98       	cbi	0x0b, 4	; 11
     7c2:	5b 9a       	sbi	0x0b, 3	; 11
     7c4:	5f 98       	cbi	0x0b, 7	; 11
     7c6:	87 ec       	ldi	r24, 0xC7	; 199
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <LCD_Initialize+0x96>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <LCD_Initialize+0x9c>
     7d0:	00 00       	nop
     7d2:	28 98       	cbi	0x05, 0	; 5
     7d4:	5f 9a       	sbi	0x0b, 7	; 11
     7d6:	5e 98       	cbi	0x0b, 6	; 11
     7d8:	5d 98       	cbi	0x0b, 5	; 11
     7da:	5c 98       	cbi	0x0b, 4	; 11
     7dc:	5b 98       	cbi	0x0b, 3	; 11
     7de:	5f 98       	cbi	0x0b, 7	; 11
     7e0:	5f 9a       	sbi	0x0b, 7	; 11
     7e2:	5e 9a       	sbi	0x0b, 6	; 11
     7e4:	5d 98       	cbi	0x0b, 5	; 11
     7e6:	5c 98       	cbi	0x0b, 4	; 11
     7e8:	5b 98       	cbi	0x0b, 3	; 11
     7ea:	5f 98       	cbi	0x0b, 7	; 11
     7ec:	e7 ec       	ldi	r30, 0xC7	; 199
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	31 97       	sbiw	r30, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <LCD_Initialize+0xbc>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <LCD_Initialize+0xc2>
     7f6:	00 00       	nop
     7f8:	8f e3       	ldi	r24, 0x3F	; 63
     7fa:	9f e1       	ldi	r25, 0x1F	; 31
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <LCD_Initialize+0xc8>
     800:	00 c0       	rjmp	.+0      	; 0x802 <LCD_Initialize+0xce>
     802:	00 00       	nop
     804:	28 98       	cbi	0x05, 0	; 5
     806:	5f 9a       	sbi	0x0b, 7	; 11
     808:	5e 98       	cbi	0x0b, 6	; 11
     80a:	5d 98       	cbi	0x0b, 5	; 11
     80c:	5c 98       	cbi	0x0b, 4	; 11
     80e:	5b 98       	cbi	0x0b, 3	; 11
     810:	5f 98       	cbi	0x0b, 7	; 11
     812:	5f 9a       	sbi	0x0b, 7	; 11
     814:	5e 98       	cbi	0x0b, 6	; 11
     816:	5d 9a       	sbi	0x0b, 5	; 11
     818:	5c 9a       	sbi	0x0b, 4	; 11
     81a:	5b 98       	cbi	0x0b, 3	; 11
     81c:	5f 98       	cbi	0x0b, 7	; 11
     81e:	e7 ec       	ldi	r30, 0xC7	; 199
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <LCD_Initialize+0xee>
     826:	00 c0       	rjmp	.+0      	; 0x828 <LCD_Initialize+0xf4>
     828:	00 00       	nop
     82a:	28 98       	cbi	0x05, 0	; 5
     82c:	5f 9a       	sbi	0x0b, 7	; 11
     82e:	5e 98       	cbi	0x0b, 6	; 11
     830:	5d 98       	cbi	0x0b, 5	; 11
     832:	5c 98       	cbi	0x0b, 4	; 11
     834:	5b 98       	cbi	0x0b, 3	; 11
     836:	5f 98       	cbi	0x0b, 7	; 11
     838:	5f 9a       	sbi	0x0b, 7	; 11
     83a:	5e 98       	cbi	0x0b, 6	; 11
     83c:	5d 98       	cbi	0x0b, 5	; 11
     83e:	5c 9a       	sbi	0x0b, 4	; 11
     840:	5b 9a       	sbi	0x0b, 3	; 11
     842:	5f 98       	cbi	0x0b, 7	; 11
     844:	87 ec       	ldi	r24, 0xC7	; 199
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_Initialize+0x114>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_Initialize+0x11a>
     84e:	00 00       	nop
     850:	08 95       	ret

00000852 <vfprintf>:
     852:	a0 e1       	ldi	r26, 0x10	; 16
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	ef e2       	ldi	r30, 0x2F	; 47
     858:	f4 e0       	ldi	r31, 0x04	; 4
     85a:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__prologue_saves__>
     85e:	7c 01       	movw	r14, r24
     860:	1b 01       	movw	r2, r22
     862:	6a 01       	movw	r12, r20
     864:	fc 01       	movw	r30, r24
     866:	17 82       	std	Z+7, r1	; 0x07
     868:	16 82       	std	Z+6, r1	; 0x06
     86a:	83 81       	ldd	r24, Z+3	; 0x03
     86c:	81 ff       	sbrs	r24, 1
     86e:	44 c3       	rjmp	.+1672   	; 0xef8 <__stack+0x5f9>
     870:	9e 01       	movw	r18, r28
     872:	2f 5f       	subi	r18, 0xFF	; 255
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	39 01       	movw	r6, r18
     878:	f7 01       	movw	r30, r14
     87a:	93 81       	ldd	r25, Z+3	; 0x03
     87c:	f1 01       	movw	r30, r2
     87e:	93 fd       	sbrc	r25, 3
     880:	85 91       	lpm	r24, Z+
     882:	93 ff       	sbrs	r25, 3
     884:	81 91       	ld	r24, Z+
     886:	1f 01       	movw	r2, r30
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <vfprintf+0x3c>
     88c:	31 c3       	rjmp	.+1634   	; 0xef0 <__stack+0x5f1>
     88e:	85 32       	cpi	r24, 0x25	; 37
     890:	39 f4       	brne	.+14     	; 0x8a0 <vfprintf+0x4e>
     892:	93 fd       	sbrc	r25, 3
     894:	85 91       	lpm	r24, Z+
     896:	93 ff       	sbrs	r25, 3
     898:	81 91       	ld	r24, Z+
     89a:	1f 01       	movw	r2, r30
     89c:	85 32       	cpi	r24, 0x25	; 37
     89e:	39 f4       	brne	.+14     	; 0x8ae <vfprintf+0x5c>
     8a0:	b7 01       	movw	r22, r14
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     8a8:	56 01       	movw	r10, r12
     8aa:	65 01       	movw	r12, r10
     8ac:	e5 cf       	rjmp	.-54     	; 0x878 <vfprintf+0x26>
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	51 2c       	mov	r5, r1
     8b2:	91 2c       	mov	r9, r1
     8b4:	ff e1       	ldi	r31, 0x1F	; 31
     8b6:	f9 15       	cp	r31, r9
     8b8:	d8 f0       	brcs	.+54     	; 0x8f0 <vfprintf+0x9e>
     8ba:	8b 32       	cpi	r24, 0x2B	; 43
     8bc:	79 f0       	breq	.+30     	; 0x8dc <vfprintf+0x8a>
     8be:	38 f4       	brcc	.+14     	; 0x8ce <vfprintf+0x7c>
     8c0:	80 32       	cpi	r24, 0x20	; 32
     8c2:	79 f0       	breq	.+30     	; 0x8e2 <vfprintf+0x90>
     8c4:	83 32       	cpi	r24, 0x23	; 35
     8c6:	a1 f4       	brne	.+40     	; 0x8f0 <vfprintf+0x9e>
     8c8:	f9 2d       	mov	r31, r9
     8ca:	f0 61       	ori	r31, 0x10	; 16
     8cc:	2e c0       	rjmp	.+92     	; 0x92a <__stack+0x2b>
     8ce:	8d 32       	cpi	r24, 0x2D	; 45
     8d0:	61 f0       	breq	.+24     	; 0x8ea <vfprintf+0x98>
     8d2:	80 33       	cpi	r24, 0x30	; 48
     8d4:	69 f4       	brne	.+26     	; 0x8f0 <vfprintf+0x9e>
     8d6:	29 2d       	mov	r18, r9
     8d8:	21 60       	ori	r18, 0x01	; 1
     8da:	2d c0       	rjmp	.+90     	; 0x936 <__stack+0x37>
     8dc:	39 2d       	mov	r19, r9
     8de:	32 60       	ori	r19, 0x02	; 2
     8e0:	93 2e       	mov	r9, r19
     8e2:	89 2d       	mov	r24, r9
     8e4:	84 60       	ori	r24, 0x04	; 4
     8e6:	98 2e       	mov	r9, r24
     8e8:	2a c0       	rjmp	.+84     	; 0x93e <__stack+0x3f>
     8ea:	e9 2d       	mov	r30, r9
     8ec:	e8 60       	ori	r30, 0x08	; 8
     8ee:	15 c0       	rjmp	.+42     	; 0x91a <__stack+0x1b>
     8f0:	97 fc       	sbrc	r9, 7
     8f2:	2d c0       	rjmp	.+90     	; 0x94e <__stack+0x4f>
     8f4:	20 ed       	ldi	r18, 0xD0	; 208
     8f6:	28 0f       	add	r18, r24
     8f8:	2a 30       	cpi	r18, 0x0A	; 10
     8fa:	88 f4       	brcc	.+34     	; 0x91e <__stack+0x1f>
     8fc:	96 fe       	sbrs	r9, 6
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
     900:	3a e0       	ldi	r19, 0x0A	; 10
     902:	13 9f       	mul	r17, r19
     904:	20 0d       	add	r18, r0
     906:	11 24       	eor	r1, r1
     908:	12 2f       	mov	r17, r18
     90a:	19 c0       	rjmp	.+50     	; 0x93e <__stack+0x3f>
     90c:	8a e0       	ldi	r24, 0x0A	; 10
     90e:	58 9e       	mul	r5, r24
     910:	20 0d       	add	r18, r0
     912:	11 24       	eor	r1, r1
     914:	52 2e       	mov	r5, r18
     916:	e9 2d       	mov	r30, r9
     918:	e0 62       	ori	r30, 0x20	; 32
     91a:	9e 2e       	mov	r9, r30
     91c:	10 c0       	rjmp	.+32     	; 0x93e <__stack+0x3f>
     91e:	8e 32       	cpi	r24, 0x2E	; 46
     920:	31 f4       	brne	.+12     	; 0x92e <__stack+0x2f>
     922:	96 fc       	sbrc	r9, 6
     924:	e5 c2       	rjmp	.+1482   	; 0xef0 <__stack+0x5f1>
     926:	f9 2d       	mov	r31, r9
     928:	f0 64       	ori	r31, 0x40	; 64
     92a:	9f 2e       	mov	r9, r31
     92c:	08 c0       	rjmp	.+16     	; 0x93e <__stack+0x3f>
     92e:	8c 36       	cpi	r24, 0x6C	; 108
     930:	21 f4       	brne	.+8      	; 0x93a <__stack+0x3b>
     932:	29 2d       	mov	r18, r9
     934:	20 68       	ori	r18, 0x80	; 128
     936:	92 2e       	mov	r9, r18
     938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0x3f>
     93a:	88 36       	cpi	r24, 0x68	; 104
     93c:	41 f4       	brne	.+16     	; 0x94e <__stack+0x4f>
     93e:	f1 01       	movw	r30, r2
     940:	93 fd       	sbrc	r25, 3
     942:	85 91       	lpm	r24, Z+
     944:	93 ff       	sbrs	r25, 3
     946:	81 91       	ld	r24, Z+
     948:	1f 01       	movw	r2, r30
     94a:	81 11       	cpse	r24, r1
     94c:	b3 cf       	rjmp	.-154    	; 0x8b4 <vfprintf+0x62>
     94e:	9b eb       	ldi	r25, 0xBB	; 187
     950:	98 0f       	add	r25, r24
     952:	93 30       	cpi	r25, 0x03	; 3
     954:	20 f4       	brcc	.+8      	; 0x95e <__stack+0x5f>
     956:	99 2d       	mov	r25, r9
     958:	90 61       	ori	r25, 0x10	; 16
     95a:	80 5e       	subi	r24, 0xE0	; 224
     95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
     95e:	9b e9       	ldi	r25, 0x9B	; 155
     960:	98 0f       	add	r25, r24
     962:	93 30       	cpi	r25, 0x03	; 3
     964:	08 f0       	brcs	.+2      	; 0x968 <__stack+0x69>
     966:	66 c1       	rjmp	.+716    	; 0xc34 <__stack+0x335>
     968:	99 2d       	mov	r25, r9
     96a:	9f 7e       	andi	r25, 0xEF	; 239
     96c:	96 ff       	sbrs	r25, 6
     96e:	16 e0       	ldi	r17, 0x06	; 6
     970:	9f 73       	andi	r25, 0x3F	; 63
     972:	99 2e       	mov	r9, r25
     974:	85 36       	cpi	r24, 0x65	; 101
     976:	19 f4       	brne	.+6      	; 0x97e <__stack+0x7f>
     978:	90 64       	ori	r25, 0x40	; 64
     97a:	99 2e       	mov	r9, r25
     97c:	08 c0       	rjmp	.+16     	; 0x98e <__stack+0x8f>
     97e:	86 36       	cpi	r24, 0x66	; 102
     980:	21 f4       	brne	.+8      	; 0x98a <__stack+0x8b>
     982:	39 2f       	mov	r19, r25
     984:	30 68       	ori	r19, 0x80	; 128
     986:	93 2e       	mov	r9, r19
     988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
     98a:	11 11       	cpse	r17, r1
     98c:	11 50       	subi	r17, 0x01	; 1
     98e:	97 fe       	sbrs	r9, 7
     990:	07 c0       	rjmp	.+14     	; 0x9a0 <__stack+0xa1>
     992:	1c 33       	cpi	r17, 0x3C	; 60
     994:	50 f4       	brcc	.+20     	; 0x9aa <__stack+0xab>
     996:	44 24       	eor	r4, r4
     998:	43 94       	inc	r4
     99a:	41 0e       	add	r4, r17
     99c:	27 e0       	ldi	r18, 0x07	; 7
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <__stack+0xb7>
     9a0:	18 30       	cpi	r17, 0x08	; 8
     9a2:	38 f0       	brcs	.+14     	; 0x9b2 <__stack+0xb3>
     9a4:	27 e0       	ldi	r18, 0x07	; 7
     9a6:	17 e0       	ldi	r17, 0x07	; 7
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__stack+0xb5>
     9aa:	27 e0       	ldi	r18, 0x07	; 7
     9ac:	9c e3       	ldi	r25, 0x3C	; 60
     9ae:	49 2e       	mov	r4, r25
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
     9b2:	21 2f       	mov	r18, r17
     9b4:	41 2c       	mov	r4, r1
     9b6:	56 01       	movw	r10, r12
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	a8 0e       	add	r10, r24
     9bc:	b1 1c       	adc	r11, r1
     9be:	f6 01       	movw	r30, r12
     9c0:	60 81       	ld	r22, Z
     9c2:	71 81       	ldd	r23, Z+1	; 0x01
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	04 2d       	mov	r16, r4
     9ca:	a3 01       	movw	r20, r6
     9cc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__ftoa_engine>
     9d0:	6c 01       	movw	r12, r24
     9d2:	f9 81       	ldd	r31, Y+1	; 0x01
     9d4:	fc 87       	std	Y+12, r31	; 0x0c
     9d6:	f0 ff       	sbrs	r31, 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
     9da:	f3 ff       	sbrs	r31, 3
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
     9de:	91 fc       	sbrc	r9, 1
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <__stack+0xef>
     9e2:	92 fe       	sbrs	r9, 2
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <__stack+0xf3>
     9e6:	00 e2       	ldi	r16, 0x20	; 32
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <__stack+0xf5>
     9ea:	0d e2       	ldi	r16, 0x2D	; 45
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <__stack+0xf5>
     9ee:	0b e2       	ldi	r16, 0x2B	; 43
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	00 e0       	ldi	r16, 0x00	; 0
     9f4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9f6:	8c 70       	andi	r24, 0x0C	; 12
     9f8:	19 f0       	breq	.+6      	; 0xa00 <__stack+0x101>
     9fa:	01 11       	cpse	r16, r1
     9fc:	5a c2       	rjmp	.+1204   	; 0xeb2 <__stack+0x5b3>
     9fe:	9b c2       	rjmp	.+1334   	; 0xf36 <__stack+0x637>
     a00:	97 fe       	sbrs	r9, 7
     a02:	10 c0       	rjmp	.+32     	; 0xa24 <__stack+0x125>
     a04:	4c 0c       	add	r4, r12
     a06:	fc 85       	ldd	r31, Y+12	; 0x0c
     a08:	f4 ff       	sbrs	r31, 4
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <__stack+0x115>
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	81 33       	cpi	r24, 0x31	; 49
     a10:	09 f4       	brne	.+2      	; 0xa14 <__stack+0x115>
     a12:	4a 94       	dec	r4
     a14:	14 14       	cp	r1, r4
     a16:	74 f5       	brge	.+92     	; 0xa74 <__stack+0x175>
     a18:	28 e0       	ldi	r18, 0x08	; 8
     a1a:	24 15       	cp	r18, r4
     a1c:	78 f5       	brcc	.+94     	; 0xa7c <__stack+0x17d>
     a1e:	88 e0       	ldi	r24, 0x08	; 8
     a20:	48 2e       	mov	r4, r24
     a22:	2c c0       	rjmp	.+88     	; 0xa7c <__stack+0x17d>
     a24:	96 fc       	sbrc	r9, 6
     a26:	2a c0       	rjmp	.+84     	; 0xa7c <__stack+0x17d>
     a28:	81 2f       	mov	r24, r17
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	8c 15       	cp	r24, r12
     a2e:	9d 05       	cpc	r25, r13
     a30:	9c f0       	brlt	.+38     	; 0xa58 <__stack+0x159>
     a32:	3c ef       	ldi	r19, 0xFC	; 252
     a34:	c3 16       	cp	r12, r19
     a36:	3f ef       	ldi	r19, 0xFF	; 255
     a38:	d3 06       	cpc	r13, r19
     a3a:	74 f0       	brlt	.+28     	; 0xa58 <__stack+0x159>
     a3c:	89 2d       	mov	r24, r9
     a3e:	80 68       	ori	r24, 0x80	; 128
     a40:	98 2e       	mov	r9, r24
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <__stack+0x159>
     a44:	e2 e0       	ldi	r30, 0x02	; 2
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	ec 0f       	add	r30, r28
     a4a:	fd 1f       	adc	r31, r29
     a4c:	e1 0f       	add	r30, r17
     a4e:	f1 1d       	adc	r31, r1
     a50:	80 81       	ld	r24, Z
     a52:	80 33       	cpi	r24, 0x30	; 48
     a54:	19 f4       	brne	.+6      	; 0xa5c <__stack+0x15d>
     a56:	11 50       	subi	r17, 0x01	; 1
     a58:	11 11       	cpse	r17, r1
     a5a:	f4 cf       	rjmp	.-24     	; 0xa44 <__stack+0x145>
     a5c:	97 fe       	sbrs	r9, 7
     a5e:	0e c0       	rjmp	.+28     	; 0xa7c <__stack+0x17d>
     a60:	44 24       	eor	r4, r4
     a62:	43 94       	inc	r4
     a64:	41 0e       	add	r4, r17
     a66:	81 2f       	mov	r24, r17
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	c8 16       	cp	r12, r24
     a6c:	d9 06       	cpc	r13, r25
     a6e:	2c f4       	brge	.+10     	; 0xa7a <__stack+0x17b>
     a70:	1c 19       	sub	r17, r12
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__stack+0x17d>
     a74:	44 24       	eor	r4, r4
     a76:	43 94       	inc	r4
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	97 fe       	sbrs	r9, 7
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <__stack+0x18d>
     a80:	1c 14       	cp	r1, r12
     a82:	1d 04       	cpc	r1, r13
     a84:	34 f4       	brge	.+12     	; 0xa92 <__stack+0x193>
     a86:	c6 01       	movw	r24, r12
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__stack+0x197>
     a8c:	85 e0       	ldi	r24, 0x05	; 5
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <__stack+0x197>
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	01 11       	cpse	r16, r1
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	11 23       	and	r17, r17
     a9c:	31 f0       	breq	.+12     	; 0xaaa <__stack+0x1ab>
     a9e:	21 2f       	mov	r18, r17
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	2f 5f       	subi	r18, 0xFF	; 255
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	25 2d       	mov	r18, r5
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	14 f4       	brge	.+4      	; 0xab8 <__stack+0x1b9>
     ab4:	58 1a       	sub	r5, r24
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	51 2c       	mov	r5, r1
     aba:	89 2d       	mov	r24, r9
     abc:	89 70       	andi	r24, 0x09	; 9
     abe:	49 f4       	brne	.+18     	; 0xad2 <__stack+0x1d3>
     ac0:	55 20       	and	r5, r5
     ac2:	39 f0       	breq	.+14     	; 0xad2 <__stack+0x1d3>
     ac4:	b7 01       	movw	r22, r14
     ac6:	80 e2       	ldi	r24, 0x20	; 32
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     ace:	5a 94       	dec	r5
     ad0:	f7 cf       	rjmp	.-18     	; 0xac0 <__stack+0x1c1>
     ad2:	00 23       	and	r16, r16
     ad4:	29 f0       	breq	.+10     	; 0xae0 <__stack+0x1e1>
     ad6:	b7 01       	movw	r22, r14
     ad8:	80 2f       	mov	r24, r16
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     ae0:	93 fc       	sbrc	r9, 3
     ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <__stack+0x1f7>
     ae4:	55 20       	and	r5, r5
     ae6:	39 f0       	breq	.+14     	; 0xaf6 <__stack+0x1f7>
     ae8:	b7 01       	movw	r22, r14
     aea:	80 e3       	ldi	r24, 0x30	; 48
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     af2:	5a 94       	dec	r5
     af4:	f7 cf       	rjmp	.-18     	; 0xae4 <__stack+0x1e5>
     af6:	97 fe       	sbrs	r9, 7
     af8:	4c c0       	rjmp	.+152    	; 0xb92 <__stack+0x293>
     afa:	46 01       	movw	r8, r12
     afc:	d7 fe       	sbrs	r13, 7
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <__stack+0x205>
     b00:	81 2c       	mov	r8, r1
     b02:	91 2c       	mov	r9, r1
     b04:	c6 01       	movw	r24, r12
     b06:	88 19       	sub	r24, r8
     b08:	99 09       	sbc	r25, r9
     b0a:	f3 01       	movw	r30, r6
     b0c:	e8 0f       	add	r30, r24
     b0e:	f9 1f       	adc	r31, r25
     b10:	fe 87       	std	Y+14, r31	; 0x0e
     b12:	ed 87       	std	Y+13, r30	; 0x0d
     b14:	96 01       	movw	r18, r12
     b16:	24 19       	sub	r18, r4
     b18:	31 09       	sbc	r19, r1
     b1a:	38 8b       	std	Y+16, r19	; 0x10
     b1c:	2f 87       	std	Y+15, r18	; 0x0f
     b1e:	01 2f       	mov	r16, r17
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	11 95       	neg	r17
     b24:	01 95       	neg	r16
     b26:	11 09       	sbc	r17, r1
     b28:	3f ef       	ldi	r19, 0xFF	; 255
     b2a:	83 16       	cp	r8, r19
     b2c:	93 06       	cpc	r9, r19
     b2e:	29 f4       	brne	.+10     	; 0xb3a <__stack+0x23b>
     b30:	b7 01       	movw	r22, r14
     b32:	8e e2       	ldi	r24, 0x2E	; 46
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     b3a:	c8 14       	cp	r12, r8
     b3c:	d9 04       	cpc	r13, r9
     b3e:	4c f0       	brlt	.+18     	; 0xb52 <__stack+0x253>
     b40:	8f 85       	ldd	r24, Y+15	; 0x0f
     b42:	98 89       	ldd	r25, Y+16	; 0x10
     b44:	88 15       	cp	r24, r8
     b46:	99 05       	cpc	r25, r9
     b48:	24 f4       	brge	.+8      	; 0xb52 <__stack+0x253>
     b4a:	ed 85       	ldd	r30, Y+13	; 0x0d
     b4c:	fe 85       	ldd	r31, Y+14	; 0x0e
     b4e:	81 81       	ldd	r24, Z+1	; 0x01
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <__stack+0x255>
     b52:	80 e3       	ldi	r24, 0x30	; 48
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	8f 1a       	sub	r8, r31
     b58:	91 08       	sbc	r9, r1
     b5a:	2d 85       	ldd	r18, Y+13	; 0x0d
     b5c:	3e 85       	ldd	r19, Y+14	; 0x0e
     b5e:	2f 5f       	subi	r18, 0xFF	; 255
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	3e 87       	std	Y+14, r19	; 0x0e
     b64:	2d 87       	std	Y+13, r18	; 0x0d
     b66:	80 16       	cp	r8, r16
     b68:	91 06       	cpc	r9, r17
     b6a:	2c f0       	brlt	.+10     	; 0xb76 <__stack+0x277>
     b6c:	b7 01       	movw	r22, r14
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     b74:	d9 cf       	rjmp	.-78     	; 0xb28 <__stack+0x229>
     b76:	c8 14       	cp	r12, r8
     b78:	d9 04       	cpc	r13, r9
     b7a:	41 f4       	brne	.+16     	; 0xb8c <__stack+0x28d>
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	96 33       	cpi	r25, 0x36	; 54
     b80:	20 f4       	brcc	.+8      	; 0xb8a <__stack+0x28b>
     b82:	95 33       	cpi	r25, 0x35	; 53
     b84:	19 f4       	brne	.+6      	; 0xb8c <__stack+0x28d>
     b86:	3c 85       	ldd	r19, Y+12	; 0x0c
     b88:	34 ff       	sbrs	r19, 4
     b8a:	81 e3       	ldi	r24, 0x31	; 49
     b8c:	b7 01       	movw	r22, r14
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	4e c0       	rjmp	.+156    	; 0xc2e <__stack+0x32f>
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	81 33       	cpi	r24, 0x31	; 49
     b96:	19 f0       	breq	.+6      	; 0xb9e <__stack+0x29f>
     b98:	9c 85       	ldd	r25, Y+12	; 0x0c
     b9a:	9f 7e       	andi	r25, 0xEF	; 239
     b9c:	9c 87       	std	Y+12, r25	; 0x0c
     b9e:	b7 01       	movw	r22, r14
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     ba6:	11 11       	cpse	r17, r1
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__stack+0x2b5>
     baa:	94 fc       	sbrc	r9, 4
     bac:	18 c0       	rjmp	.+48     	; 0xbde <__stack+0x2df>
     bae:	85 e6       	ldi	r24, 0x65	; 101
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <__stack+0x2e3>
     bb4:	b7 01       	movw	r22, r14
     bb6:	8e e2       	ldi	r24, 0x2E	; 46
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     bbe:	1e 5f       	subi	r17, 0xFE	; 254
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	01 e0       	ldi	r16, 0x01	; 1
     bc4:	08 0f       	add	r16, r24
     bc6:	f3 01       	movw	r30, r6
     bc8:	e8 0f       	add	r30, r24
     bca:	f1 1d       	adc	r31, r1
     bcc:	80 81       	ld	r24, Z
     bce:	b7 01       	movw	r22, r14
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     bd6:	80 2f       	mov	r24, r16
     bd8:	01 13       	cpse	r16, r17
     bda:	f3 cf       	rjmp	.-26     	; 0xbc2 <__stack+0x2c3>
     bdc:	e6 cf       	rjmp	.-52     	; 0xbaa <__stack+0x2ab>
     bde:	85 e4       	ldi	r24, 0x45	; 69
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     be8:	d7 fc       	sbrc	r13, 7
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <__stack+0x2f9>
     bec:	c1 14       	cp	r12, r1
     bee:	d1 04       	cpc	r13, r1
     bf0:	41 f4       	brne	.+16     	; 0xc02 <__stack+0x303>
     bf2:	ec 85       	ldd	r30, Y+12	; 0x0c
     bf4:	e4 ff       	sbrs	r30, 4
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <__stack+0x303>
     bf8:	d1 94       	neg	r13
     bfa:	c1 94       	neg	r12
     bfc:	d1 08       	sbc	r13, r1
     bfe:	8d e2       	ldi	r24, 0x2D	; 45
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <__stack+0x305>
     c02:	8b e2       	ldi	r24, 0x2B	; 43
     c04:	b7 01       	movw	r22, r14
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     c0c:	80 e3       	ldi	r24, 0x30	; 48
     c0e:	2a e0       	ldi	r18, 0x0A	; 10
     c10:	c2 16       	cp	r12, r18
     c12:	d1 04       	cpc	r13, r1
     c14:	2c f0       	brlt	.+10     	; 0xc20 <__stack+0x321>
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	fa e0       	ldi	r31, 0x0A	; 10
     c1a:	cf 1a       	sub	r12, r31
     c1c:	d1 08       	sbc	r13, r1
     c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <__stack+0x30f>
     c20:	b7 01       	movw	r22, r14
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     c28:	b7 01       	movw	r22, r14
     c2a:	c6 01       	movw	r24, r12
     c2c:	c0 96       	adiw	r24, 0x30	; 48
     c2e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     c32:	54 c1       	rjmp	.+680    	; 0xedc <__stack+0x5dd>
     c34:	83 36       	cpi	r24, 0x63	; 99
     c36:	31 f0       	breq	.+12     	; 0xc44 <__stack+0x345>
     c38:	83 37       	cpi	r24, 0x73	; 115
     c3a:	79 f0       	breq	.+30     	; 0xc5a <__stack+0x35b>
     c3c:	83 35       	cpi	r24, 0x53	; 83
     c3e:	09 f0       	breq	.+2      	; 0xc42 <__stack+0x343>
     c40:	56 c0       	rjmp	.+172    	; 0xcee <__stack+0x3ef>
     c42:	20 c0       	rjmp	.+64     	; 0xc84 <__stack+0x385>
     c44:	56 01       	movw	r10, r12
     c46:	32 e0       	ldi	r19, 0x02	; 2
     c48:	a3 0e       	add	r10, r19
     c4a:	b1 1c       	adc	r11, r1
     c4c:	f6 01       	movw	r30, r12
     c4e:	80 81       	ld	r24, Z
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	01 e0       	ldi	r16, 0x01	; 1
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	63 01       	movw	r12, r6
     c58:	12 c0       	rjmp	.+36     	; 0xc7e <__stack+0x37f>
     c5a:	56 01       	movw	r10, r12
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
     c5e:	af 0e       	add	r10, r31
     c60:	b1 1c       	adc	r11, r1
     c62:	f6 01       	movw	r30, r12
     c64:	c0 80       	ld	r12, Z
     c66:	d1 80       	ldd	r13, Z+1	; 0x01
     c68:	96 fe       	sbrs	r9, 6
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <__stack+0x373>
     c6c:	61 2f       	mov	r22, r17
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <__stack+0x377>
     c72:	6f ef       	ldi	r22, 0xFF	; 255
     c74:	7f ef       	ldi	r23, 0xFF	; 255
     c76:	c6 01       	movw	r24, r12
     c78:	0e 94 ad 10 	call	0x215a	; 0x215a <strnlen>
     c7c:	8c 01       	movw	r16, r24
     c7e:	f9 2d       	mov	r31, r9
     c80:	ff 77       	andi	r31, 0x7F	; 127
     c82:	14 c0       	rjmp	.+40     	; 0xcac <__stack+0x3ad>
     c84:	56 01       	movw	r10, r12
     c86:	22 e0       	ldi	r18, 0x02	; 2
     c88:	a2 0e       	add	r10, r18
     c8a:	b1 1c       	adc	r11, r1
     c8c:	f6 01       	movw	r30, r12
     c8e:	c0 80       	ld	r12, Z
     c90:	d1 80       	ldd	r13, Z+1	; 0x01
     c92:	96 fe       	sbrs	r9, 6
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <__stack+0x39d>
     c96:	61 2f       	mov	r22, r17
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <__stack+0x3a1>
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	7f ef       	ldi	r23, 0xFF	; 255
     ca0:	c6 01       	movw	r24, r12
     ca2:	0e 94 a2 10 	call	0x2144	; 0x2144 <strnlen_P>
     ca6:	8c 01       	movw	r16, r24
     ca8:	f9 2d       	mov	r31, r9
     caa:	f0 68       	ori	r31, 0x80	; 128
     cac:	9f 2e       	mov	r9, r31
     cae:	f3 fd       	sbrc	r31, 3
     cb0:	1a c0       	rjmp	.+52     	; 0xce6 <__stack+0x3e7>
     cb2:	85 2d       	mov	r24, r5
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	08 17       	cp	r16, r24
     cb8:	19 07       	cpc	r17, r25
     cba:	a8 f4       	brcc	.+42     	; 0xce6 <__stack+0x3e7>
     cbc:	b7 01       	movw	r22, r14
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     cc6:	5a 94       	dec	r5
     cc8:	f4 cf       	rjmp	.-24     	; 0xcb2 <__stack+0x3b3>
     cca:	f6 01       	movw	r30, r12
     ccc:	97 fc       	sbrc	r9, 7
     cce:	85 91       	lpm	r24, Z+
     cd0:	97 fe       	sbrs	r9, 7
     cd2:	81 91       	ld	r24, Z+
     cd4:	6f 01       	movw	r12, r30
     cd6:	b7 01       	movw	r22, r14
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     cde:	51 10       	cpse	r5, r1
     ce0:	5a 94       	dec	r5
     ce2:	01 50       	subi	r16, 0x01	; 1
     ce4:	11 09       	sbc	r17, r1
     ce6:	01 15       	cp	r16, r1
     ce8:	11 05       	cpc	r17, r1
     cea:	79 f7       	brne	.-34     	; 0xcca <__stack+0x3cb>
     cec:	f7 c0       	rjmp	.+494    	; 0xedc <__stack+0x5dd>
     cee:	84 36       	cpi	r24, 0x64	; 100
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <__stack+0x3f7>
     cf2:	89 36       	cpi	r24, 0x69	; 105
     cf4:	61 f5       	brne	.+88     	; 0xd4e <__stack+0x44f>
     cf6:	56 01       	movw	r10, r12
     cf8:	97 fe       	sbrs	r9, 7
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <__stack+0x40f>
     cfc:	24 e0       	ldi	r18, 0x04	; 4
     cfe:	a2 0e       	add	r10, r18
     d00:	b1 1c       	adc	r11, r1
     d02:	f6 01       	movw	r30, r12
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <__stack+0x423>
     d0e:	f2 e0       	ldi	r31, 0x02	; 2
     d10:	af 0e       	add	r10, r31
     d12:	b1 1c       	adc	r11, r1
     d14:	f6 01       	movw	r30, r12
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	07 2e       	mov	r0, r23
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	f9 2d       	mov	r31, r9
     d24:	ff 76       	andi	r31, 0x6F	; 111
     d26:	9f 2e       	mov	r9, r31
     d28:	97 ff       	sbrs	r25, 7
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <__stack+0x43f>
     d2c:	90 95       	com	r25
     d2e:	80 95       	com	r24
     d30:	70 95       	com	r23
     d32:	61 95       	neg	r22
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	8f 4f       	sbci	r24, 0xFF	; 255
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	f0 68       	ori	r31, 0x80	; 128
     d3c:	9f 2e       	mov	r9, r31
     d3e:	2a e0       	ldi	r18, 0x0A	; 10
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	a3 01       	movw	r20, r6
     d44:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ultoa_invert>
     d48:	c8 2e       	mov	r12, r24
     d4a:	c6 18       	sub	r12, r6
     d4c:	3f c0       	rjmp	.+126    	; 0xdcc <__stack+0x4cd>
     d4e:	09 2d       	mov	r16, r9
     d50:	85 37       	cpi	r24, 0x75	; 117
     d52:	21 f4       	brne	.+8      	; 0xd5c <__stack+0x45d>
     d54:	0f 7e       	andi	r16, 0xEF	; 239
     d56:	2a e0       	ldi	r18, 0x0A	; 10
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	1d c0       	rjmp	.+58     	; 0xd96 <__stack+0x497>
     d5c:	09 7f       	andi	r16, 0xF9	; 249
     d5e:	8f 36       	cpi	r24, 0x6F	; 111
     d60:	91 f0       	breq	.+36     	; 0xd86 <__stack+0x487>
     d62:	18 f4       	brcc	.+6      	; 0xd6a <__stack+0x46b>
     d64:	88 35       	cpi	r24, 0x58	; 88
     d66:	59 f0       	breq	.+22     	; 0xd7e <__stack+0x47f>
     d68:	c3 c0       	rjmp	.+390    	; 0xef0 <__stack+0x5f1>
     d6a:	80 37       	cpi	r24, 0x70	; 112
     d6c:	19 f0       	breq	.+6      	; 0xd74 <__stack+0x475>
     d6e:	88 37       	cpi	r24, 0x78	; 120
     d70:	11 f0       	breq	.+4      	; 0xd76 <__stack+0x477>
     d72:	be c0       	rjmp	.+380    	; 0xef0 <__stack+0x5f1>
     d74:	00 61       	ori	r16, 0x10	; 16
     d76:	04 ff       	sbrs	r16, 4
     d78:	09 c0       	rjmp	.+18     	; 0xd8c <__stack+0x48d>
     d7a:	04 60       	ori	r16, 0x04	; 4
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <__stack+0x48d>
     d7e:	94 fe       	sbrs	r9, 4
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <__stack+0x493>
     d82:	06 60       	ori	r16, 0x06	; 6
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <__stack+0x493>
     d86:	28 e0       	ldi	r18, 0x08	; 8
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <__stack+0x497>
     d8c:	20 e1       	ldi	r18, 0x10	; 16
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <__stack+0x497>
     d92:	20 e1       	ldi	r18, 0x10	; 16
     d94:	32 e0       	ldi	r19, 0x02	; 2
     d96:	56 01       	movw	r10, r12
     d98:	07 ff       	sbrs	r16, 7
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <__stack+0x4af>
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	a8 0e       	add	r10, r24
     da0:	b1 1c       	adc	r11, r1
     da2:	f6 01       	movw	r30, r12
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <__stack+0x4bf>
     dae:	f2 e0       	ldi	r31, 0x02	; 2
     db0:	af 0e       	add	r10, r31
     db2:	b1 1c       	adc	r11, r1
     db4:	f6 01       	movw	r30, r12
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a3 01       	movw	r20, r6
     dc0:	0e 94 4b 11 	call	0x2296	; 0x2296 <__ultoa_invert>
     dc4:	c8 2e       	mov	r12, r24
     dc6:	c6 18       	sub	r12, r6
     dc8:	0f 77       	andi	r16, 0x7F	; 127
     dca:	90 2e       	mov	r9, r16
     dcc:	96 fe       	sbrs	r9, 6
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <__stack+0x4e7>
     dd0:	09 2d       	mov	r16, r9
     dd2:	0e 7f       	andi	r16, 0xFE	; 254
     dd4:	c1 16       	cp	r12, r17
     dd6:	50 f4       	brcc	.+20     	; 0xdec <__stack+0x4ed>
     dd8:	94 fe       	sbrs	r9, 4
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <__stack+0x4f1>
     ddc:	92 fc       	sbrc	r9, 2
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <__stack+0x4f1>
     de0:	09 2d       	mov	r16, r9
     de2:	0e 7e       	andi	r16, 0xEE	; 238
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <__stack+0x4f1>
     de6:	dc 2c       	mov	r13, r12
     de8:	09 2d       	mov	r16, r9
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <__stack+0x4f3>
     dec:	dc 2c       	mov	r13, r12
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <__stack+0x4f3>
     df0:	d1 2e       	mov	r13, r17
     df2:	04 ff       	sbrs	r16, 4
     df4:	0d c0       	rjmp	.+26     	; 0xe10 <__stack+0x511>
     df6:	fe 01       	movw	r30, r28
     df8:	ec 0d       	add	r30, r12
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	80 33       	cpi	r24, 0x30	; 48
     e00:	11 f4       	brne	.+4      	; 0xe06 <__stack+0x507>
     e02:	09 7e       	andi	r16, 0xE9	; 233
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <__stack+0x519>
     e06:	02 ff       	sbrs	r16, 2
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <__stack+0x517>
     e0a:	d3 94       	inc	r13
     e0c:	d3 94       	inc	r13
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <__stack+0x519>
     e10:	80 2f       	mov	r24, r16
     e12:	86 78       	andi	r24, 0x86	; 134
     e14:	09 f0       	breq	.+2      	; 0xe18 <__stack+0x519>
     e16:	d3 94       	inc	r13
     e18:	03 fd       	sbrc	r16, 3
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <__stack+0x53f>
     e1c:	00 ff       	sbrs	r16, 0
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <__stack+0x52d>
     e20:	1c 2d       	mov	r17, r12
     e22:	d5 14       	cp	r13, r5
     e24:	80 f4       	brcc	.+32     	; 0xe46 <__stack+0x547>
     e26:	15 0d       	add	r17, r5
     e28:	1d 19       	sub	r17, r13
     e2a:	0d c0       	rjmp	.+26     	; 0xe46 <__stack+0x547>
     e2c:	d5 14       	cp	r13, r5
     e2e:	58 f4       	brcc	.+22     	; 0xe46 <__stack+0x547>
     e30:	b7 01       	movw	r22, r14
     e32:	80 e2       	ldi	r24, 0x20	; 32
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     e3a:	d3 94       	inc	r13
     e3c:	f7 cf       	rjmp	.-18     	; 0xe2c <__stack+0x52d>
     e3e:	d5 14       	cp	r13, r5
     e40:	10 f4       	brcc	.+4      	; 0xe46 <__stack+0x547>
     e42:	5d 18       	sub	r5, r13
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <__stack+0x549>
     e46:	51 2c       	mov	r5, r1
     e48:	04 ff       	sbrs	r16, 4
     e4a:	10 c0       	rjmp	.+32     	; 0xe6c <__stack+0x56d>
     e4c:	b7 01       	movw	r22, r14
     e4e:	80 e3       	ldi	r24, 0x30	; 48
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     e56:	02 ff       	sbrs	r16, 2
     e58:	17 c0       	rjmp	.+46     	; 0xe88 <__stack+0x589>
     e5a:	01 fd       	sbrc	r16, 1
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <__stack+0x565>
     e5e:	88 e7       	ldi	r24, 0x78	; 120
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <__stack+0x569>
     e64:	88 e5       	ldi	r24, 0x58	; 88
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b7 01       	movw	r22, r14
     e6a:	0c c0       	rjmp	.+24     	; 0xe84 <__stack+0x585>
     e6c:	80 2f       	mov	r24, r16
     e6e:	86 78       	andi	r24, 0x86	; 134
     e70:	59 f0       	breq	.+22     	; 0xe88 <__stack+0x589>
     e72:	01 ff       	sbrs	r16, 1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <__stack+0x57b>
     e76:	8b e2       	ldi	r24, 0x2B	; 43
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <__stack+0x57d>
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	07 fd       	sbrc	r16, 7
     e7e:	8d e2       	ldi	r24, 0x2D	; 45
     e80:	b7 01       	movw	r22, r14
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     e88:	c1 16       	cp	r12, r17
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <__stack+0x59b>
     e8c:	b7 01       	movw	r22, r14
     e8e:	80 e3       	ldi	r24, 0x30	; 48
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     e96:	11 50       	subi	r17, 0x01	; 1
     e98:	f7 cf       	rjmp	.-18     	; 0xe88 <__stack+0x589>
     e9a:	ca 94       	dec	r12
     e9c:	f3 01       	movw	r30, r6
     e9e:	ec 0d       	add	r30, r12
     ea0:	f1 1d       	adc	r31, r1
     ea2:	80 81       	ld	r24, Z
     ea4:	b7 01       	movw	r22, r14
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     eac:	c1 10       	cpse	r12, r1
     eae:	f5 cf       	rjmp	.-22     	; 0xe9a <__stack+0x59b>
     eb0:	15 c0       	rjmp	.+42     	; 0xedc <__stack+0x5dd>
     eb2:	f4 e0       	ldi	r31, 0x04	; 4
     eb4:	f5 15       	cp	r31, r5
     eb6:	60 f5       	brcc	.+88     	; 0xf10 <__stack+0x611>
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	58 1a       	sub	r5, r24
     ebc:	93 fe       	sbrs	r9, 3
     ebe:	1f c0       	rjmp	.+62     	; 0xefe <__stack+0x5ff>
     ec0:	01 11       	cpse	r16, r1
     ec2:	27 c0       	rjmp	.+78     	; 0xf12 <__stack+0x613>
     ec4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec6:	23 ff       	sbrs	r18, 3
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <__stack+0x61f>
     eca:	08 e6       	ldi	r16, 0x68	; 104
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	39 2d       	mov	r19, r9
     ed0:	30 71       	andi	r19, 0x10	; 16
     ed2:	93 2e       	mov	r9, r19
     ed4:	f8 01       	movw	r30, r16
     ed6:	84 91       	lpm	r24, Z
     ed8:	81 11       	cpse	r24, r1
     eda:	24 c0       	rjmp	.+72     	; 0xf24 <__stack+0x625>
     edc:	55 20       	and	r5, r5
     ede:	09 f4       	brne	.+2      	; 0xee2 <__stack+0x5e3>
     ee0:	e4 cc       	rjmp	.-1592   	; 0x8aa <vfprintf+0x58>
     ee2:	b7 01       	movw	r22, r14
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     eec:	5a 94       	dec	r5
     eee:	f6 cf       	rjmp	.-20     	; 0xedc <__stack+0x5dd>
     ef0:	f7 01       	movw	r30, r14
     ef2:	86 81       	ldd	r24, Z+6	; 0x06
     ef4:	97 81       	ldd	r25, Z+7	; 0x07
     ef6:	26 c0       	rjmp	.+76     	; 0xf44 <__stack+0x645>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	9f ef       	ldi	r25, 0xFF	; 255
     efc:	23 c0       	rjmp	.+70     	; 0xf44 <__stack+0x645>
     efe:	b7 01       	movw	r22, r14
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     f08:	5a 94       	dec	r5
     f0a:	51 10       	cpse	r5, r1
     f0c:	f8 cf       	rjmp	.-16     	; 0xefe <__stack+0x5ff>
     f0e:	d8 cf       	rjmp	.-80     	; 0xec0 <__stack+0x5c1>
     f10:	51 2c       	mov	r5, r1
     f12:	b7 01       	movw	r22, r14
     f14:	80 2f       	mov	r24, r16
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     f1c:	d3 cf       	rjmp	.-90     	; 0xec4 <__stack+0x5c5>
     f1e:	0c e6       	ldi	r16, 0x6C	; 108
     f20:	10 e0       	ldi	r17, 0x00	; 0
     f22:	d5 cf       	rjmp	.-86     	; 0xece <__stack+0x5cf>
     f24:	91 10       	cpse	r9, r1
     f26:	80 52       	subi	r24, 0x20	; 32
     f28:	b7 01       	movw	r22, r14
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <fputc>
     f30:	0f 5f       	subi	r16, 0xFF	; 255
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	cf cf       	rjmp	.-98     	; 0xed4 <__stack+0x5d5>
     f36:	23 e0       	ldi	r18, 0x03	; 3
     f38:	25 15       	cp	r18, r5
     f3a:	10 f4       	brcc	.+4      	; 0xf40 <__stack+0x641>
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	bd cf       	rjmp	.-134    	; 0xeba <__stack+0x5bb>
     f40:	51 2c       	mov	r5, r1
     f42:	c0 cf       	rjmp	.-128    	; 0xec4 <__stack+0x5c5>
     f44:	60 96       	adiw	r28, 0x10	; 16
     f46:	e2 e1       	ldi	r30, 0x12	; 18
     f48:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__epilogue_restores__>

00000f4c <putval>:
     f4c:	20 fd       	sbrc	r18, 0
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <putval+0x16>
     f50:	fc 01       	movw	r30, r24
     f52:	23 fd       	sbrc	r18, 3
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <putval+0x14>
     f56:	22 ff       	sbrs	r18, 2
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <putval+0x12>
     f5a:	73 83       	std	Z+3, r23	; 0x03
     f5c:	62 83       	std	Z+2, r22	; 0x02
     f5e:	51 83       	std	Z+1, r21	; 0x01
     f60:	40 83       	st	Z, r20
     f62:	08 95       	ret

00000f64 <mulacc>:
     f64:	44 fd       	sbrc	r20, 4
     f66:	17 c0       	rjmp	.+46     	; 0xf96 <mulacc+0x32>
     f68:	46 fd       	sbrc	r20, 6
     f6a:	17 c0       	rjmp	.+46     	; 0xf9a <mulacc+0x36>
     f6c:	ab 01       	movw	r20, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	da 01       	movw	r26, r20
     f72:	fb 01       	movw	r30, r22
     f74:	aa 0f       	add	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	ee 1f       	adc	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	10 94       	com	r1
     f7e:	d1 f7       	brne	.-12     	; 0xf74 <mulacc+0x10>
     f80:	4a 0f       	add	r20, r26
     f82:	5b 1f       	adc	r21, r27
     f84:	6e 1f       	adc	r22, r30
     f86:	7f 1f       	adc	r23, r31
     f88:	cb 01       	movw	r24, r22
     f8a:	ba 01       	movw	r22, r20
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <mulacc+0x44>
     f96:	33 e0       	ldi	r19, 0x03	; 3
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <mulacc+0x38>
     f9a:	34 e0       	ldi	r19, 0x04	; 4
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	31 50       	subi	r19, 0x01	; 1
     fa6:	d1 f7       	brne	.-12     	; 0xf9c <mulacc+0x38>
     fa8:	62 0f       	add	r22, r18
     faa:	71 1d       	adc	r23, r1
     fac:	81 1d       	adc	r24, r1
     fae:	91 1d       	adc	r25, r1
     fb0:	08 95       	ret

00000fb2 <skip_spaces>:
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	8c 01       	movw	r16, r24
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
     fc2:	ec 01       	movw	r28, r24
     fc4:	97 fd       	sbrc	r25, 7
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <skip_spaces+0x26>
     fc8:	0e 94 86 10 	call	0x210c	; 0x210c <isspace>
     fcc:	89 2b       	or	r24, r25
     fce:	b1 f7       	brne	.-20     	; 0xfbc <skip_spaces+0xa>
     fd0:	b8 01       	movw	r22, r16
     fd2:	ce 01       	movw	r24, r28
     fd4:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
     fd8:	ce 01       	movw	r24, r28
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <conv_int>:
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 ef       	ldi	r30, 0xF8	; 248
     fea:	f7 e0       	ldi	r31, 0x07	; 7
     fec:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__prologue_saves__+0xc>
     ff0:	7c 01       	movw	r14, r24
     ff2:	8b 01       	movw	r16, r22
     ff4:	6a 01       	movw	r12, r20
     ff6:	d2 2f       	mov	r29, r18
     ff8:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
     ffc:	9c 01       	movw	r18, r24
     ffe:	33 27       	eor	r19, r19
    1000:	2b 32       	cpi	r18, 0x2B	; 43
    1002:	31 05       	cpc	r19, r1
    1004:	21 f0       	breq	.+8      	; 0x100e <conv_int+0x2a>
    1006:	2d 32       	cpi	r18, 0x2D	; 45
    1008:	31 05       	cpc	r19, r1
    100a:	59 f4       	brne	.+22     	; 0x1022 <conv_int+0x3e>
    100c:	d0 68       	ori	r29, 0x80	; 128
    100e:	01 50       	subi	r16, 0x01	; 1
    1010:	11 09       	sbc	r17, r1
    1012:	11 f4       	brne	.+4      	; 0x1018 <conv_int+0x34>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	6b c0       	rjmp	.+214    	; 0x10ee <conv_int+0x10a>
    1018:	c7 01       	movw	r24, r14
    101a:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    101e:	97 fd       	sbrc	r25, 7
    1020:	f9 cf       	rjmp	.-14     	; 0x1014 <conv_int+0x30>
    1022:	cd 2f       	mov	r28, r29
    1024:	cd 7f       	andi	r28, 0xFD	; 253
    1026:	2d 2f       	mov	r18, r29
    1028:	20 73       	andi	r18, 0x30	; 48
    102a:	19 f5       	brne	.+70     	; 0x1072 <conv_int+0x8e>
    102c:	80 33       	cpi	r24, 0x30	; 48
    102e:	09 f5       	brne	.+66     	; 0x1072 <conv_int+0x8e>
    1030:	58 01       	movw	r10, r16
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	a8 1a       	sub	r10, r24
    1036:	b1 08       	sbc	r11, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <conv_int+0x58>
    103a:	45 c0       	rjmp	.+138    	; 0x10c6 <conv_int+0xe2>
    103c:	c7 01       	movw	r24, r14
    103e:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    1042:	97 fd       	sbrc	r25, 7
    1044:	40 c0       	rjmp	.+128    	; 0x10c6 <conv_int+0xe2>
    1046:	9c 01       	movw	r18, r24
    1048:	2f 7d       	andi	r18, 0xDF	; 223
    104a:	33 27       	eor	r19, r19
    104c:	28 35       	cpi	r18, 0x58	; 88
    104e:	31 05       	cpc	r19, r1
    1050:	51 f4       	brne	.+20     	; 0x1066 <conv_int+0x82>
    1052:	c2 64       	ori	r28, 0x42	; 66
    1054:	02 50       	subi	r16, 0x02	; 2
    1056:	11 09       	sbc	r17, r1
    1058:	b1 f1       	breq	.+108    	; 0x10c6 <conv_int+0xe2>
    105a:	c7 01       	movw	r24, r14
    105c:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    1060:	97 ff       	sbrs	r25, 7
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <conv_int+0x8e>
    1064:	30 c0       	rjmp	.+96     	; 0x10c6 <conv_int+0xe2>
    1066:	d6 ff       	sbrs	r29, 6
    1068:	02 c0       	rjmp	.+4      	; 0x106e <conv_int+0x8a>
    106a:	c2 60       	ori	r28, 0x02	; 2
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <conv_int+0x8c>
    106e:	c2 61       	ori	r28, 0x12	; 18
    1070:	85 01       	movw	r16, r10
    1072:	81 2c       	mov	r8, r1
    1074:	91 2c       	mov	r9, r1
    1076:	54 01       	movw	r10, r8
    1078:	20 ed       	ldi	r18, 0xD0	; 208
    107a:	28 0f       	add	r18, r24
    107c:	28 30       	cpi	r18, 0x08	; 8
    107e:	80 f0       	brcs	.+32     	; 0x10a0 <conv_int+0xbc>
    1080:	c4 ff       	sbrs	r28, 4
    1082:	04 c0       	rjmp	.+8      	; 0x108c <conv_int+0xa8>
    1084:	b7 01       	movw	r22, r14
    1086:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
    108a:	1a c0       	rjmp	.+52     	; 0x10c0 <conv_int+0xdc>
    108c:	2a 30       	cpi	r18, 0x0A	; 10
    108e:	40 f0       	brcs	.+16     	; 0x10a0 <conv_int+0xbc>
    1090:	c6 ff       	sbrs	r28, 6
    1092:	f8 cf       	rjmp	.-16     	; 0x1084 <conv_int+0xa0>
    1094:	2f 7d       	andi	r18, 0xDF	; 223
    1096:	3f ee       	ldi	r19, 0xEF	; 239
    1098:	32 0f       	add	r19, r18
    109a:	36 30       	cpi	r19, 0x06	; 6
    109c:	98 f7       	brcc	.-26     	; 0x1084 <conv_int+0xa0>
    109e:	27 50       	subi	r18, 0x07	; 7
    10a0:	4c 2f       	mov	r20, r28
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	0e 94 b2 07 	call	0xf64	; 0xf64 <mulacc>
    10aa:	4b 01       	movw	r8, r22
    10ac:	5c 01       	movw	r10, r24
    10ae:	c2 60       	ori	r28, 0x02	; 2
    10b0:	01 50       	subi	r16, 0x01	; 1
    10b2:	11 09       	sbc	r17, r1
    10b4:	59 f0       	breq	.+22     	; 0x10cc <conv_int+0xe8>
    10b6:	c7 01       	movw	r24, r14
    10b8:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    10bc:	97 ff       	sbrs	r25, 7
    10be:	dc cf       	rjmp	.-72     	; 0x1078 <conv_int+0x94>
    10c0:	c1 fd       	sbrc	r28, 1
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <conv_int+0xe8>
    10c4:	a7 cf       	rjmp	.-178    	; 0x1014 <conv_int+0x30>
    10c6:	81 2c       	mov	r8, r1
    10c8:	91 2c       	mov	r9, r1
    10ca:	54 01       	movw	r10, r8
    10cc:	c7 ff       	sbrs	r28, 7
    10ce:	08 c0       	rjmp	.+16     	; 0x10e0 <conv_int+0xfc>
    10d0:	b0 94       	com	r11
    10d2:	a0 94       	com	r10
    10d4:	90 94       	com	r9
    10d6:	80 94       	com	r8
    10d8:	81 1c       	adc	r8, r1
    10da:	91 1c       	adc	r9, r1
    10dc:	a1 1c       	adc	r10, r1
    10de:	b1 1c       	adc	r11, r1
    10e0:	2c 2f       	mov	r18, r28
    10e2:	b5 01       	movw	r22, r10
    10e4:	a4 01       	movw	r20, r8
    10e6:	c6 01       	movw	r24, r12
    10e8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <putval>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	ec e0       	ldi	r30, 0x0C	; 12
    10f4:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__epilogue_restores__+0xc>

000010f8 <conv_brk>:
    10f8:	a0 e2       	ldi	r26, 0x20	; 32
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__+0x4>
    1104:	5c 01       	movw	r10, r24
    1106:	4b 01       	movw	r8, r22
    1108:	7a 01       	movw	r14, r20
    110a:	8e 01       	movw	r16, r28
    110c:	0f 5f       	subi	r16, 0xFF	; 255
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	68 01       	movw	r12, r16
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	f8 01       	movw	r30, r16
    1116:	11 92       	st	Z+, r1
    1118:	8a 95       	dec	r24
    111a:	e9 f7       	brne	.-6      	; 0x1116 <conv_brk+0x1e>
    111c:	f5 01       	movw	r30, r10
    111e:	53 80       	ldd	r5, Z+3	; 0x03
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	61 2c       	mov	r6, r1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	71 2c       	mov	r7, r1
    112a:	a1 e0       	ldi	r26, 0x01	; 1
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	53 fc       	sbrc	r5, 3
    1132:	85 91       	lpm	r24, Z+
    1134:	53 fe       	sbrs	r5, 3
    1136:	81 91       	ld	r24, Z+
    1138:	8f 01       	movw	r16, r30
    113a:	48 2e       	mov	r4, r24
    113c:	9f 01       	movw	r18, r30
    113e:	81 11       	cpse	r24, r1
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <conv_brk+0x50>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	96 c0       	rjmp	.+300    	; 0x1274 <conv_brk+0x17c>
    1148:	8e 35       	cpi	r24, 0x5E	; 94
    114a:	19 f4       	brne	.+6      	; 0x1152 <conv_brk+0x5a>
    114c:	41 15       	cp	r20, r1
    114e:	51 05       	cpc	r21, r1
    1150:	51 f1       	breq	.+84     	; 0x11a6 <conv_brk+0xae>
    1152:	67 2d       	mov	r22, r7
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	64 17       	cp	r22, r20
    1158:	75 07       	cpc	r23, r21
    115a:	3c f4       	brge	.+14     	; 0x116a <conv_brk+0x72>
    115c:	8d 35       	cpi	r24, 0x5D	; 93
    115e:	61 f1       	breq	.+88     	; 0x11b8 <conv_brk+0xc0>
    1160:	8d 32       	cpi	r24, 0x2D	; 45
    1162:	19 f4       	brne	.+6      	; 0x116a <conv_brk+0x72>
    1164:	99 23       	and	r25, r25
    1166:	11 f1       	breq	.+68     	; 0x11ac <conv_brk+0xb4>
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <conv_brk+0x78>
    116a:	99 23       	and	r25, r25
    116c:	09 f4       	brne	.+2      	; 0x1170 <conv_brk+0x78>
    116e:	6d c0       	rjmp	.+218    	; 0x124a <conv_brk+0x152>
    1170:	84 2d       	mov	r24, r4
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	86 95       	lsr	r24
    1178:	f6 01       	movw	r30, r12
    117a:	e8 0f       	add	r30, r24
    117c:	f1 1d       	adc	r31, r1
    117e:	84 2d       	mov	r24, r4
    1180:	87 70       	andi	r24, 0x07	; 7
    1182:	8d 01       	movw	r16, r26
    1184:	02 c0       	rjmp	.+4      	; 0x118a <conv_brk+0x92>
    1186:	00 0f       	add	r16, r16
    1188:	11 1f       	adc	r17, r17
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <conv_brk+0x8e>
    118e:	c8 01       	movw	r24, r16
    1190:	90 81       	ld	r25, Z
    1192:	89 2b       	or	r24, r25
    1194:	80 83       	st	Z, r24
    1196:	64 14       	cp	r6, r4
    1198:	59 f0       	breq	.+22     	; 0x11b0 <conv_brk+0xb8>
    119a:	46 14       	cp	r4, r6
    119c:	10 f4       	brcc	.+4      	; 0x11a2 <conv_brk+0xaa>
    119e:	43 94       	inc	r4
    11a0:	e7 cf       	rjmp	.-50     	; 0x1170 <conv_brk+0x78>
    11a2:	4a 94       	dec	r4
    11a4:	e5 cf       	rjmp	.-54     	; 0x1170 <conv_brk+0x78>
    11a6:	77 24       	eor	r7, r7
    11a8:	73 94       	inc	r7
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <conv_brk+0xba>
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <conv_brk+0xba>
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	4f 5f       	subi	r20, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	bb cf       	rjmp	.-138    	; 0x112e <conv_brk+0x36>
    11b8:	99 23       	and	r25, r25
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <conv_brk+0xca>
    11bc:	8e 81       	ldd	r24, Y+6	; 0x06
    11be:	80 62       	ori	r24, 0x20	; 32
    11c0:	8e 83       	std	Y+6, r24	; 0x06
    11c2:	71 10       	cpse	r7, r1
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <conv_brk+0xd4>
    11c6:	77 24       	eor	r7, r7
    11c8:	73 94       	inc	r7
    11ca:	19 c0       	rjmp	.+50     	; 0x11fe <conv_brk+0x106>
    11cc:	f6 01       	movw	r30, r12
    11ce:	9e 01       	movw	r18, r28
    11d0:	2f 5d       	subi	r18, 0xDF	; 223
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	80 95       	com	r24
    11d8:	81 93       	st	Z+, r24
    11da:	2e 17       	cp	r18, r30
    11dc:	3f 07       	cpc	r19, r31
    11de:	d1 f7       	brne	.-12     	; 0x11d4 <conv_brk+0xdc>
    11e0:	f2 cf       	rjmp	.-28     	; 0x11c6 <conv_brk+0xce>
    11e2:	e1 14       	cp	r14, r1
    11e4:	f1 04       	cpc	r15, r1
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <conv_brk+0xfc>
    11e8:	f7 01       	movw	r30, r14
    11ea:	80 83       	st	Z, r24
    11ec:	b7 01       	movw	r22, r14
    11ee:	6f 5f       	subi	r22, 0xFF	; 255
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	7b 01       	movw	r14, r22
    11f4:	71 e0       	ldi	r23, 0x01	; 1
    11f6:	87 1a       	sub	r8, r23
    11f8:	91 08       	sbc	r9, r1
    11fa:	71 2c       	mov	r7, r1
    11fc:	f9 f0       	breq	.+62     	; 0x123c <conv_brk+0x144>
    11fe:	c5 01       	movw	r24, r10
    1200:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    1204:	97 fd       	sbrc	r25, 7
    1206:	18 c0       	rjmp	.+48     	; 0x1238 <conv_brk+0x140>
    1208:	fc 01       	movw	r30, r24
    120a:	ff 27       	eor	r31, r31
    120c:	23 e0       	ldi	r18, 0x03	; 3
    120e:	f5 95       	asr	r31
    1210:	e7 95       	ror	r30
    1212:	2a 95       	dec	r18
    1214:	e1 f7       	brne	.-8      	; 0x120e <conv_brk+0x116>
    1216:	ec 0d       	add	r30, r12
    1218:	fd 1d       	adc	r31, r13
    121a:	20 81       	ld	r18, Z
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	ac 01       	movw	r20, r24
    1220:	47 70       	andi	r20, 0x07	; 7
    1222:	55 27       	eor	r21, r21
    1224:	02 c0       	rjmp	.+4      	; 0x122a <conv_brk+0x132>
    1226:	35 95       	asr	r19
    1228:	27 95       	ror	r18
    122a:	4a 95       	dec	r20
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <conv_brk+0x12e>
    122e:	20 fd       	sbrc	r18, 0
    1230:	d8 cf       	rjmp	.-80     	; 0x11e2 <conv_brk+0xea>
    1232:	b5 01       	movw	r22, r10
    1234:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
    1238:	71 10       	cpse	r7, r1
    123a:	83 cf       	rjmp	.-250    	; 0x1142 <conv_brk+0x4a>
    123c:	e1 14       	cp	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	11 f0       	breq	.+4      	; 0x1246 <conv_brk+0x14e>
    1242:	f7 01       	movw	r30, r14
    1244:	10 82       	st	Z, r1
    1246:	c8 01       	movw	r24, r16
    1248:	15 c0       	rjmp	.+42     	; 0x1274 <conv_brk+0x17c>
    124a:	68 2f       	mov	r22, r24
    124c:	66 95       	lsr	r22
    124e:	66 95       	lsr	r22
    1250:	66 95       	lsr	r22
    1252:	f6 01       	movw	r30, r12
    1254:	e6 0f       	add	r30, r22
    1256:	f1 1d       	adc	r31, r1
    1258:	68 2f       	mov	r22, r24
    125a:	67 70       	andi	r22, 0x07	; 7
    125c:	8d 01       	movw	r16, r26
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <conv_brk+0x16c>
    1260:	00 0f       	add	r16, r16
    1262:	11 1f       	adc	r17, r17
    1264:	6a 95       	dec	r22
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <conv_brk+0x168>
    1268:	b8 01       	movw	r22, r16
    126a:	70 81       	ld	r23, Z
    126c:	67 2b       	or	r22, r23
    126e:	60 83       	st	Z, r22
    1270:	68 2e       	mov	r6, r24
    1272:	9f cf       	rjmp	.-194    	; 0x11b2 <conv_brk+0xba>
    1274:	a0 96       	adiw	r28, 0x20	; 32
    1276:	e0 e1       	ldi	r30, 0x10	; 16
    1278:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__epilogue_restores__+0x4>

0000127c <conv_flt>:
    127c:	2f 92       	push	r2
    127e:	3f 92       	push	r3
    1280:	4f 92       	push	r4
    1282:	5f 92       	push	r5
    1284:	6f 92       	push	r6
    1286:	7f 92       	push	r7
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	6c 01       	movw	r12, r24
    12a0:	8b 01       	movw	r16, r22
    12a2:	1a 01       	movw	r2, r20
    12a4:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    12a8:	ec 01       	movw	r28, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	8b 32       	cpi	r24, 0x2B	; 43
    12ae:	91 05       	cpc	r25, r1
    12b0:	29 f0       	breq	.+10     	; 0x12bc <conv_flt+0x40>
    12b2:	8d 97       	sbiw	r24, 0x2d	; 45
    12b4:	81 f4       	brne	.+32     	; 0x12d6 <conv_flt+0x5a>
    12b6:	30 e8       	ldi	r19, 0x80	; 128
    12b8:	93 2e       	mov	r9, r19
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <conv_flt+0x42>
    12bc:	91 2c       	mov	r9, r1
    12be:	01 50       	subi	r16, 0x01	; 1
    12c0:	11 09       	sbc	r17, r1
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <conv_flt+0x4c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0c c1       	rjmp	.+536    	; 0x14e0 <conv_flt+0x264>
    12c8:	c6 01       	movw	r24, r12
    12ca:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    12ce:	ec 01       	movw	r28, r24
    12d0:	97 ff       	sbrs	r25, 7
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <conv_flt+0x5c>
    12d4:	f7 cf       	rjmp	.-18     	; 0x12c4 <conv_flt+0x48>
    12d6:	91 2c       	mov	r9, r1
    12d8:	ce 01       	movw	r24, r28
    12da:	0e 94 8f 10 	call	0x211e	; 0x211e <tolower>
    12de:	89 36       	cpi	r24, 0x69	; 105
    12e0:	91 05       	cpc	r25, r1
    12e2:	31 f0       	breq	.+12     	; 0x12f0 <conv_flt+0x74>
    12e4:	8e 36       	cpi	r24, 0x6E	; 110
    12e6:	91 05       	cpc	r25, r1
    12e8:	99 f5       	brne	.+102    	; 0x1350 <conv_flt+0xd4>
    12ea:	cc e7       	ldi	r28, 0x7C	; 124
    12ec:	d1 e0       	ldi	r29, 0x01	; 1
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <conv_flt+0x78>
    12f0:	cf e7       	ldi	r28, 0x7F	; 127
    12f2:	d1 e0       	ldi	r29, 0x01	; 1
    12f4:	21 96       	adiw	r28, 0x01	; 1
    12f6:	fe 01       	movw	r30, r28
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	b4 90       	lpm	r11, Z
    12fc:	bb 20       	and	r11, r11
    12fe:	c9 f0       	breq	.+50     	; 0x1332 <conv_flt+0xb6>
    1300:	01 50       	subi	r16, 0x01	; 1
    1302:	11 09       	sbc	r17, r1
    1304:	91 f0       	breq	.+36     	; 0x132a <conv_flt+0xae>
    1306:	c6 01       	movw	r24, r12
    1308:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    130c:	7c 01       	movw	r14, r24
    130e:	97 fd       	sbrc	r25, 7
    1310:	0c c0       	rjmp	.+24     	; 0x132a <conv_flt+0xae>
    1312:	0e 94 8f 10 	call	0x211e	; 0x211e <tolower>
    1316:	99 27       	eor	r25, r25
    1318:	eb 2d       	mov	r30, r11
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8e 17       	cp	r24, r30
    131e:	9f 07       	cpc	r25, r31
    1320:	49 f3       	breq	.-46     	; 0x12f4 <conv_flt+0x78>
    1322:	b6 01       	movw	r22, r12
    1324:	c7 01       	movw	r24, r14
    1326:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
    132a:	c2 58       	subi	r28, 0x82	; 130
    132c:	d1 40       	sbci	r29, 0x01	; 1
    132e:	51 f6       	brne	.-108    	; 0x12c4 <conv_flt+0x48>
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <conv_flt+0xbc>
    1332:	cf 57       	subi	r28, 0x7F	; 127
    1334:	d1 40       	sbci	r29, 0x01	; 1
    1336:	29 f0       	breq	.+10     	; 0x1342 <conv_flt+0xc6>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a0 e8       	ldi	r26, 0x80	; 128
    133e:	bf e7       	ldi	r27, 0x7F	; 127
    1340:	04 c0       	rjmp	.+8      	; 0x134a <conv_flt+0xce>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 ec       	ldi	r26, 0xC0	; 192
    1348:	bf e7       	ldi	r27, 0x7F	; 127
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	b8 c0       	rjmp	.+368    	; 0x14c0 <conv_flt+0x244>
    1350:	41 2c       	mov	r4, r1
    1352:	51 2c       	mov	r5, r1
    1354:	32 01       	movw	r6, r4
    1356:	e1 2c       	mov	r14, r1
    1358:	f1 2c       	mov	r15, r1
    135a:	2c 2f       	mov	r18, r28
    135c:	20 53       	subi	r18, 0x30	; 48
    135e:	2a 30       	cpi	r18, 0x0A	; 10
    1360:	10 f5       	brcc	.+68     	; 0x13a6 <conv_flt+0x12a>
    1362:	e9 2d       	mov	r30, r9
    1364:	e2 60       	ori	r30, 0x02	; 2
    1366:	be 2e       	mov	r11, r30
    1368:	89 2d       	mov	r24, r9
    136a:	88 70       	andi	r24, 0x08	; 8
    136c:	92 fe       	sbrs	r9, 2
    136e:	06 c0       	rjmp	.+12     	; 0x137c <conv_flt+0x100>
    1370:	81 11       	cpse	r24, r1
    1372:	20 c0       	rjmp	.+64     	; 0x13b4 <conv_flt+0x138>
    1374:	ff ef       	ldi	r31, 0xFF	; 255
    1376:	ef 1a       	sub	r14, r31
    1378:	ff 0a       	sbc	r15, r31
    137a:	1c c0       	rjmp	.+56     	; 0x13b4 <conv_flt+0x138>
    137c:	88 23       	and	r24, r24
    137e:	19 f0       	breq	.+6      	; 0x1386 <conv_flt+0x10a>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	e8 1a       	sub	r14, r24
    1384:	f1 08       	sbc	r15, r1
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	c3 01       	movw	r24, r6
    138a:	b2 01       	movw	r22, r4
    138c:	0e 94 b2 07 	call	0xf64	; 0xf64 <mulacc>
    1390:	2b 01       	movw	r4, r22
    1392:	3c 01       	movw	r6, r24
    1394:	68 39       	cpi	r22, 0x98	; 152
    1396:	79 49       	sbci	r23, 0x99	; 153
    1398:	89 49       	sbci	r24, 0x99	; 153
    139a:	99 41       	sbci	r25, 0x19	; 25
    139c:	58 f0       	brcs	.+22     	; 0x13b4 <conv_flt+0x138>
    139e:	f9 2d       	mov	r31, r9
    13a0:	f6 60       	ori	r31, 0x06	; 6
    13a2:	bf 2e       	mov	r11, r31
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <conv_flt+0x138>
    13a6:	2e 3f       	cpi	r18, 0xFE	; 254
    13a8:	89 f4       	brne	.+34     	; 0x13cc <conv_flt+0x150>
    13aa:	93 fc       	sbrc	r9, 3
    13ac:	0f c0       	rjmp	.+30     	; 0x13cc <conv_flt+0x150>
    13ae:	29 2d       	mov	r18, r9
    13b0:	28 60       	ori	r18, 0x08	; 8
    13b2:	b2 2e       	mov	r11, r18
    13b4:	01 50       	subi	r16, 0x01	; 1
    13b6:	11 09       	sbc	r17, r1
    13b8:	41 f0       	breq	.+16     	; 0x13ca <conv_flt+0x14e>
    13ba:	c6 01       	movw	r24, r12
    13bc:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    13c0:	ec 01       	movw	r28, r24
    13c2:	9b 2c       	mov	r9, r11
    13c4:	97 ff       	sbrs	r25, 7
    13c6:	c9 cf       	rjmp	.-110    	; 0x135a <conv_flt+0xde>
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <conv_flt+0x150>
    13ca:	9b 2c       	mov	r9, r11
    13cc:	91 fe       	sbrs	r9, 1
    13ce:	7a cf       	rjmp	.-268    	; 0x12c4 <conv_flt+0x48>
    13d0:	ce 01       	movw	r24, r28
    13d2:	8f 7d       	andi	r24, 0xDF	; 223
    13d4:	99 27       	eor	r25, r25
    13d6:	85 34       	cpi	r24, 0x45	; 69
    13d8:	91 05       	cpc	r25, r1
    13da:	09 f0       	breq	.+2      	; 0x13de <conv_flt+0x162>
    13dc:	42 c0       	rjmp	.+132    	; 0x1462 <conv_flt+0x1e6>
    13de:	58 01       	movw	r10, r16
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	a8 1a       	sub	r10, r24
    13e4:	b1 08       	sbc	r11, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <conv_flt+0x16e>
    13e8:	6d cf       	rjmp	.-294    	; 0x12c4 <conv_flt+0x48>
    13ea:	c6 01       	movw	r24, r12
    13ec:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    13f0:	ec 01       	movw	r28, r24
    13f2:	97 fd       	sbrc	r25, 7
    13f4:	67 cf       	rjmp	.-306    	; 0x12c4 <conv_flt+0x48>
    13f6:	99 27       	eor	r25, r25
    13f8:	8b 32       	cpi	r24, 0x2B	; 43
    13fa:	91 05       	cpc	r25, r1
    13fc:	29 f0       	breq	.+10     	; 0x1408 <conv_flt+0x18c>
    13fe:	8d 97       	sbiw	r24, 0x2d	; 45
    1400:	69 f4       	brne	.+26     	; 0x141c <conv_flt+0x1a0>
    1402:	e9 2d       	mov	r30, r9
    1404:	e0 61       	ori	r30, 0x10	; 16
    1406:	9e 2e       	mov	r9, r30
    1408:	58 01       	movw	r10, r16
    140a:	f2 e0       	ldi	r31, 0x02	; 2
    140c:	af 1a       	sub	r10, r31
    140e:	b1 08       	sbc	r11, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <conv_flt+0x198>
    1412:	58 cf       	rjmp	.-336    	; 0x12c4 <conv_flt+0x48>
    1414:	c6 01       	movw	r24, r12
    1416:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    141a:	ec 01       	movw	r28, r24
    141c:	ce 01       	movw	r24, r28
    141e:	c0 97       	sbiw	r24, 0x30	; 48
    1420:	0a 97       	sbiw	r24, 0x0a	; 10
    1422:	08 f0       	brcs	.+2      	; 0x1426 <conv_flt+0x1aa>
    1424:	4f cf       	rjmp	.-354    	; 0x12c4 <conv_flt+0x48>
    1426:	85 01       	movw	r16, r10
    1428:	a1 2c       	mov	r10, r1
    142a:	b1 2c       	mov	r11, r1
    142c:	b5 01       	movw	r22, r10
    142e:	bb 0c       	add	r11, r11
    1430:	88 0b       	sbc	r24, r24
    1432:	99 0b       	sbc	r25, r25
    1434:	2c 2f       	mov	r18, r28
    1436:	20 53       	subi	r18, 0x30	; 48
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	0e 94 b2 07 	call	0xf64	; 0xf64 <mulacc>
    143e:	5b 01       	movw	r10, r22
    1440:	01 50       	subi	r16, 0x01	; 1
    1442:	11 09       	sbc	r17, r1
    1444:	39 f0       	breq	.+14     	; 0x1454 <conv_flt+0x1d8>
    1446:	c6 01       	movw	r24, r12
    1448:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    144c:	ec 01       	movw	r28, r24
    144e:	c0 97       	sbiw	r24, 0x30	; 48
    1450:	0a 97       	sbiw	r24, 0x0a	; 10
    1452:	60 f3       	brcs	.-40     	; 0x142c <conv_flt+0x1b0>
    1454:	94 fe       	sbrs	r9, 4
    1456:	03 c0       	rjmp	.+6      	; 0x145e <conv_flt+0x1e2>
    1458:	b1 94       	neg	r11
    145a:	a1 94       	neg	r10
    145c:	b1 08       	sbc	r11, r1
    145e:	ea 0c       	add	r14, r10
    1460:	fb 1c       	adc	r15, r11
    1462:	01 2b       	or	r16, r17
    1464:	31 f0       	breq	.+12     	; 0x1472 <conv_flt+0x1f6>
    1466:	d7 fd       	sbrc	r29, 7
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <conv_flt+0x1f6>
    146a:	b6 01       	movw	r22, r12
    146c:	ce 01       	movw	r24, r28
    146e:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
    1472:	c3 01       	movw	r24, r6
    1474:	b2 01       	movw	r22, r4
    1476:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__floatunsisf>
    147a:	f7 fe       	sbrs	r15, 7
    147c:	06 c0       	rjmp	.+12     	; 0x148a <conv_flt+0x20e>
    147e:	f1 94       	neg	r15
    1480:	e1 94       	neg	r14
    1482:	f1 08       	sbc	r15, r1
    1484:	cb e9       	ldi	r28, 0x9B	; 155
    1486:	d1 e0       	ldi	r29, 0x01	; 1
    1488:	02 c0       	rjmp	.+4      	; 0x148e <conv_flt+0x212>
    148a:	c3 eb       	ldi	r28, 0xB3	; 179
    148c:	d1 e0       	ldi	r29, 0x01	; 1
    148e:	6e 01       	movw	r12, r28
    1490:	28 e1       	ldi	r18, 0x18	; 24
    1492:	c2 1a       	sub	r12, r18
    1494:	d1 08       	sbc	r13, r1
    1496:	00 e2       	ldi	r16, 0x20	; 32
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	e0 16       	cp	r14, r16
    149c:	f1 06       	cpc	r15, r17
    149e:	50 f0       	brcs	.+20     	; 0x14b4 <conv_flt+0x238>
    14a0:	fe 01       	movw	r30, r28
    14a2:	25 91       	lpm	r18, Z+
    14a4:	35 91       	lpm	r19, Z+
    14a6:	45 91       	lpm	r20, Z+
    14a8:	54 91       	lpm	r21, Z
    14aa:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    14ae:	e0 1a       	sub	r14, r16
    14b0:	f1 0a       	sbc	r15, r17
    14b2:	f3 cf       	rjmp	.-26     	; 0x149a <conv_flt+0x21e>
    14b4:	24 97       	sbiw	r28, 0x04	; 4
    14b6:	16 95       	lsr	r17
    14b8:	07 95       	ror	r16
    14ba:	cc 16       	cp	r12, r28
    14bc:	dd 06       	cpc	r13, r29
    14be:	69 f7       	brne	.-38     	; 0x149a <conv_flt+0x21e>
    14c0:	97 fe       	sbrs	r9, 7
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <conv_flt+0x252>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	b0 58       	subi	r27, 0x80	; 128
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	21 14       	cp	r2, r1
    14d0:	31 04       	cpc	r3, r1
    14d2:	29 f0       	breq	.+10     	; 0x14de <conv_flt+0x262>
    14d4:	f1 01       	movw	r30, r2
    14d6:	60 83       	st	Z, r22
    14d8:	71 83       	std	Z+1, r23	; 0x01
    14da:	82 83       	std	Z+2, r24	; 0x02
    14dc:	93 83       	std	Z+3, r25	; 0x03
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	cf 90       	pop	r12
    14f0:	bf 90       	pop	r11
    14f2:	af 90       	pop	r10
    14f4:	9f 90       	pop	r9
    14f6:	7f 90       	pop	r7
    14f8:	6f 90       	pop	r6
    14fa:	5f 90       	pop	r5
    14fc:	4f 90       	pop	r4
    14fe:	3f 90       	pop	r3
    1500:	2f 90       	pop	r2
    1502:	08 95       	ret

00001504 <vfscanf>:
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e8       	ldi	r30, 0x88	; 136
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__prologue_saves__+0x8>
    1510:	5c 01       	movw	r10, r24
    1512:	eb 01       	movw	r28, r22
    1514:	4a 01       	movw	r8, r20
    1516:	fc 01       	movw	r30, r24
    1518:	17 82       	std	Z+7, r1	; 0x07
    151a:	16 82       	std	Z+6, r1	; 0x06
    151c:	61 2c       	mov	r6, r1
    151e:	f5 01       	movw	r30, r10
    1520:	03 81       	ldd	r16, Z+3	; 0x03
    1522:	fe 01       	movw	r30, r28
    1524:	03 fd       	sbrc	r16, 3
    1526:	85 91       	lpm	r24, Z+
    1528:	03 ff       	sbrs	r16, 3
    152a:	81 91       	ld	r24, Z+
    152c:	18 2f       	mov	r17, r24
    152e:	ef 01       	movw	r28, r30
    1530:	88 23       	and	r24, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <vfscanf+0x32>
    1534:	0f c1       	rjmp	.+542    	; 0x1754 <vfscanf+0x250>
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 86 10 	call	0x210c	; 0x210c <isspace>
    153c:	89 2b       	or	r24, r25
    153e:	21 f0       	breq	.+8      	; 0x1548 <vfscanf+0x44>
    1540:	c5 01       	movw	r24, r10
    1542:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <skip_spaces>
    1546:	eb cf       	rjmp	.-42     	; 0x151e <vfscanf+0x1a>
    1548:	15 32       	cpi	r17, 0x25	; 37
    154a:	41 f4       	brne	.+16     	; 0x155c <vfscanf+0x58>
    154c:	fe 01       	movw	r30, r28
    154e:	03 fd       	sbrc	r16, 3
    1550:	15 91       	lpm	r17, Z+
    1552:	03 ff       	sbrs	r16, 3
    1554:	11 91       	ld	r17, Z+
    1556:	ef 01       	movw	r28, r30
    1558:	15 32       	cpi	r17, 0x25	; 37
    155a:	81 f4       	brne	.+32     	; 0x157c <vfscanf+0x78>
    155c:	c5 01       	movw	r24, r10
    155e:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    1562:	97 fd       	sbrc	r25, 7
    1564:	f5 c0       	rjmp	.+490    	; 0x1750 <vfscanf+0x24c>
    1566:	41 2f       	mov	r20, r17
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	9c 01       	movw	r18, r24
    156c:	33 27       	eor	r19, r19
    156e:	24 17       	cp	r18, r20
    1570:	35 07       	cpc	r19, r21
    1572:	a9 f2       	breq	.-86     	; 0x151e <vfscanf+0x1a>
    1574:	b5 01       	movw	r22, r10
    1576:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
    157a:	ec c0       	rjmp	.+472    	; 0x1754 <vfscanf+0x250>
    157c:	1a 32       	cpi	r17, 0x2A	; 42
    157e:	41 f4       	brne	.+16     	; 0x1590 <vfscanf+0x8c>
    1580:	03 fd       	sbrc	r16, 3
    1582:	15 91       	lpm	r17, Z+
    1584:	03 ff       	sbrs	r16, 3
    1586:	11 91       	ld	r17, Z+
    1588:	ef 01       	movw	r28, r30
    158a:	77 24       	eor	r7, r7
    158c:	73 94       	inc	r7
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <vfscanf+0x8e>
    1590:	71 2c       	mov	r7, r1
    1592:	e1 2c       	mov	r14, r1
    1594:	f1 2c       	mov	r15, r1
    1596:	20 ed       	ldi	r18, 0xD0	; 208
    1598:	21 0f       	add	r18, r17
    159a:	2a 30       	cpi	r18, 0x0A	; 10
    159c:	88 f4       	brcc	.+34     	; 0x15c0 <vfscanf+0xbc>
    159e:	f7 2d       	mov	r31, r7
    15a0:	f2 60       	ori	r31, 0x02	; 2
    15a2:	7f 2e       	mov	r7, r31
    15a4:	b7 01       	movw	r22, r14
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	0e 94 b2 07 	call	0xf64	; 0xf64 <mulacc>
    15b0:	7b 01       	movw	r14, r22
    15b2:	fe 01       	movw	r30, r28
    15b4:	03 fd       	sbrc	r16, 3
    15b6:	15 91       	lpm	r17, Z+
    15b8:	03 ff       	sbrs	r16, 3
    15ba:	11 91       	ld	r17, Z+
    15bc:	ef 01       	movw	r28, r30
    15be:	eb cf       	rjmp	.-42     	; 0x1596 <vfscanf+0x92>
    15c0:	71 fe       	sbrs	r7, 1
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <vfscanf+0xc8>
    15c4:	e1 14       	cp	r14, r1
    15c6:	f1 04       	cpc	r15, r1
    15c8:	21 f4       	brne	.+8      	; 0x15d2 <vfscanf+0xce>
    15ca:	c4 c0       	rjmp	.+392    	; 0x1754 <vfscanf+0x250>
    15cc:	ee 24       	eor	r14, r14
    15ce:	ea 94       	dec	r14
    15d0:	fe 2c       	mov	r15, r14
    15d2:	18 36       	cpi	r17, 0x68	; 104
    15d4:	19 f0       	breq	.+6      	; 0x15dc <vfscanf+0xd8>
    15d6:	1c 36       	cpi	r17, 0x6C	; 108
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <vfscanf+0xee>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <vfscanf+0x100>
    15dc:	fe 01       	movw	r30, r28
    15de:	03 fd       	sbrc	r16, 3
    15e0:	15 91       	lpm	r17, Z+
    15e2:	03 ff       	sbrs	r16, 3
    15e4:	11 91       	ld	r17, Z+
    15e6:	ef 01       	movw	r28, r30
    15e8:	18 36       	cpi	r17, 0x68	; 104
    15ea:	61 f4       	brne	.+24     	; 0x1604 <vfscanf+0x100>
    15ec:	87 2d       	mov	r24, r7
    15ee:	88 60       	ori	r24, 0x08	; 8
    15f0:	78 2e       	mov	r7, r24
    15f2:	97 2d       	mov	r25, r7
    15f4:	94 60       	ori	r25, 0x04	; 4
    15f6:	79 2e       	mov	r7, r25
    15f8:	fe 01       	movw	r30, r28
    15fa:	03 fd       	sbrc	r16, 3
    15fc:	15 91       	lpm	r17, Z+
    15fe:	03 ff       	sbrs	r16, 3
    1600:	11 91       	ld	r17, Z+
    1602:	ef 01       	movw	r28, r30
    1604:	11 23       	and	r17, r17
    1606:	09 f4       	brne	.+2      	; 0x160a <vfscanf+0x106>
    1608:	a5 c0       	rjmp	.+330    	; 0x1754 <vfscanf+0x250>
    160a:	61 2f       	mov	r22, r17
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	8a e6       	ldi	r24, 0x6A	; 106
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 97 10 	call	0x212e	; 0x212e <strchr_P>
    1616:	89 2b       	or	r24, r25
    1618:	09 f4       	brne	.+2      	; 0x161c <vfscanf+0x118>
    161a:	9c c0       	rjmp	.+312    	; 0x1754 <vfscanf+0x250>
    161c:	70 fc       	sbrc	r7, 0
    161e:	07 c0       	rjmp	.+14     	; 0x162e <vfscanf+0x12a>
    1620:	f4 01       	movw	r30, r8
    1622:	c0 80       	ld	r12, Z
    1624:	d1 80       	ldd	r13, Z+1	; 0x01
    1626:	c4 01       	movw	r24, r8
    1628:	02 96       	adiw	r24, 0x02	; 2
    162a:	4c 01       	movw	r8, r24
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfscanf+0x12e>
    162e:	c1 2c       	mov	r12, r1
    1630:	d1 2c       	mov	r13, r1
    1632:	1e 36       	cpi	r17, 0x6E	; 110
    1634:	51 f4       	brne	.+20     	; 0x164a <vfscanf+0x146>
    1636:	f5 01       	movw	r30, r10
    1638:	46 81       	ldd	r20, Z+6	; 0x06
    163a:	57 81       	ldd	r21, Z+7	; 0x07
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	27 2d       	mov	r18, r7
    1642:	c6 01       	movw	r24, r12
    1644:	0e 94 a6 07 	call	0xf4c	; 0xf4c <putval>
    1648:	6a cf       	rjmp	.-300    	; 0x151e <vfscanf+0x1a>
    164a:	13 36       	cpi	r17, 0x63	; 99
    164c:	b9 f4       	brne	.+46     	; 0x167c <vfscanf+0x178>
    164e:	71 fc       	sbrc	r7, 1
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <vfscanf+0x154>
    1652:	ee 24       	eor	r14, r14
    1654:	e3 94       	inc	r14
    1656:	f1 2c       	mov	r15, r1
    1658:	c5 01       	movw	r24, r10
    165a:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    165e:	97 fd       	sbrc	r25, 7
    1660:	77 c0       	rjmp	.+238    	; 0x1750 <vfscanf+0x24c>
    1662:	c1 14       	cp	r12, r1
    1664:	d1 04       	cpc	r13, r1
    1666:	29 f0       	breq	.+10     	; 0x1672 <vfscanf+0x16e>
    1668:	f6 01       	movw	r30, r12
    166a:	80 83       	st	Z, r24
    166c:	c6 01       	movw	r24, r12
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	6c 01       	movw	r12, r24
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	e9 1a       	sub	r14, r25
    1676:	f1 08       	sbc	r15, r1
    1678:	79 f7       	brne	.-34     	; 0x1658 <vfscanf+0x154>
    167a:	66 c0       	rjmp	.+204    	; 0x1748 <vfscanf+0x244>
    167c:	1b 35       	cpi	r17, 0x5B	; 91
    167e:	59 f4       	brne	.+22     	; 0x1696 <vfscanf+0x192>
    1680:	9e 01       	movw	r18, r28
    1682:	a6 01       	movw	r20, r12
    1684:	b7 01       	movw	r22, r14
    1686:	c5 01       	movw	r24, r10
    1688:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <conv_brk>
    168c:	ec 01       	movw	r28, r24
    168e:	89 2b       	or	r24, r25
    1690:	09 f0       	breq	.+2      	; 0x1694 <vfscanf+0x190>
    1692:	5a c0       	rjmp	.+180    	; 0x1748 <vfscanf+0x244>
    1694:	54 c0       	rjmp	.+168    	; 0x173e <vfscanf+0x23a>
    1696:	c5 01       	movw	r24, r10
    1698:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <skip_spaces>
    169c:	97 fd       	sbrc	r25, 7
    169e:	58 c0       	rjmp	.+176    	; 0x1750 <vfscanf+0x24c>
    16a0:	1f 36       	cpi	r17, 0x6F	; 111
    16a2:	e1 f1       	breq	.+120    	; 0x171c <vfscanf+0x218>
    16a4:	40 f4       	brcc	.+16     	; 0x16b6 <vfscanf+0x1b2>
    16a6:	14 36       	cpi	r17, 0x64	; 100
    16a8:	a9 f1       	breq	.+106    	; 0x1714 <vfscanf+0x210>
    16aa:	19 36       	cpi	r17, 0x69	; 105
    16ac:	d1 f1       	breq	.+116    	; 0x1722 <vfscanf+0x21e>
    16ae:	18 35       	cpi	r17, 0x58	; 88
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <vfscanf+0x1b0>
    16b2:	3e c0       	rjmp	.+124    	; 0x1730 <vfscanf+0x22c>
    16b4:	2b c0       	rjmp	.+86     	; 0x170c <vfscanf+0x208>
    16b6:	13 37       	cpi	r17, 0x73	; 115
    16b8:	a9 f0       	breq	.+42     	; 0x16e4 <vfscanf+0x1e0>
    16ba:	18 f4       	brcc	.+6      	; 0x16c2 <vfscanf+0x1be>
    16bc:	10 37       	cpi	r17, 0x70	; 112
    16be:	31 f1       	breq	.+76     	; 0x170c <vfscanf+0x208>
    16c0:	37 c0       	rjmp	.+110    	; 0x1730 <vfscanf+0x22c>
    16c2:	15 37       	cpi	r17, 0x75	; 117
    16c4:	39 f1       	breq	.+78     	; 0x1714 <vfscanf+0x210>
    16c6:	18 37       	cpi	r17, 0x78	; 120
    16c8:	09 f1       	breq	.+66     	; 0x170c <vfscanf+0x208>
    16ca:	32 c0       	rjmp	.+100    	; 0x1730 <vfscanf+0x22c>
    16cc:	c1 14       	cp	r12, r1
    16ce:	d1 04       	cpc	r13, r1
    16d0:	29 f0       	breq	.+10     	; 0x16dc <vfscanf+0x1d8>
    16d2:	f6 01       	movw	r30, r12
    16d4:	00 83       	st	Z, r16
    16d6:	c6 01       	movw	r24, r12
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	6c 01       	movw	r12, r24
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	e9 1a       	sub	r14, r25
    16e0:	f1 08       	sbc	r15, r1
    16e2:	71 f0       	breq	.+28     	; 0x1700 <vfscanf+0x1fc>
    16e4:	c5 01       	movw	r24, r10
    16e6:	0e 94 b8 10 	call	0x2170	; 0x2170 <fgetc>
    16ea:	8c 01       	movw	r16, r24
    16ec:	97 fd       	sbrc	r25, 7
    16ee:	08 c0       	rjmp	.+16     	; 0x1700 <vfscanf+0x1fc>
    16f0:	0e 94 86 10 	call	0x210c	; 0x210c <isspace>
    16f4:	89 2b       	or	r24, r25
    16f6:	51 f3       	breq	.-44     	; 0x16cc <vfscanf+0x1c8>
    16f8:	b5 01       	movw	r22, r10
    16fa:	c8 01       	movw	r24, r16
    16fc:	0e 94 32 11 	call	0x2264	; 0x2264 <ungetc>
    1700:	c1 14       	cp	r12, r1
    1702:	d1 04       	cpc	r13, r1
    1704:	09 f1       	breq	.+66     	; 0x1748 <vfscanf+0x244>
    1706:	f6 01       	movw	r30, r12
    1708:	10 82       	st	Z, r1
    170a:	1e c0       	rjmp	.+60     	; 0x1748 <vfscanf+0x244>
    170c:	f7 2d       	mov	r31, r7
    170e:	f0 64       	ori	r31, 0x40	; 64
    1710:	7f 2e       	mov	r7, r31
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <vfscanf+0x21e>
    1714:	87 2d       	mov	r24, r7
    1716:	80 62       	ori	r24, 0x20	; 32
    1718:	78 2e       	mov	r7, r24
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <vfscanf+0x21e>
    171c:	97 2d       	mov	r25, r7
    171e:	90 61       	ori	r25, 0x10	; 16
    1720:	79 2e       	mov	r7, r25
    1722:	27 2d       	mov	r18, r7
    1724:	a6 01       	movw	r20, r12
    1726:	b7 01       	movw	r22, r14
    1728:	c5 01       	movw	r24, r10
    172a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <conv_int>
    172e:	05 c0       	rjmp	.+10     	; 0x173a <vfscanf+0x236>
    1730:	a6 01       	movw	r20, r12
    1732:	b7 01       	movw	r22, r14
    1734:	c5 01       	movw	r24, r10
    1736:	0e 94 3e 09 	call	0x127c	; 0x127c <conv_flt>
    173a:	81 11       	cpse	r24, r1
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <vfscanf+0x244>
    173e:	f5 01       	movw	r30, r10
    1740:	83 81       	ldd	r24, Z+3	; 0x03
    1742:	80 73       	andi	r24, 0x30	; 48
    1744:	29 f4       	brne	.+10     	; 0x1750 <vfscanf+0x24c>
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <vfscanf+0x250>
    1748:	70 fc       	sbrc	r7, 0
    174a:	e9 ce       	rjmp	.-558    	; 0x151e <vfscanf+0x1a>
    174c:	63 94       	inc	r6
    174e:	e7 ce       	rjmp	.-562    	; 0x151e <vfscanf+0x1a>
    1750:	66 20       	and	r6, r6
    1752:	19 f0       	breq	.+6      	; 0x175a <vfscanf+0x256>
    1754:	86 2d       	mov	r24, r6
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <vfscanf+0x25a>
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	ee e0       	ldi	r30, 0x0E	; 14
    1764:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__epilogue_restores__+0x8>

00001768 <main>:
};




int main() {
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	62 97       	sbiw	r28, 0x12	; 18
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
  BUZZ_DDR |= _BV(BUZZ);
    177c:	21 9a       	sbi	0x04, 1	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    177e:	30 e9       	ldi	r19, 0x90	; 144
    1780:	23 2e       	mov	r2, r19
    1782:	33 24       	eor	r3, r3
    1784:	33 94       	inc	r3
    1786:	27 eb       	ldi	r18, 0xB7	; 183
    1788:	32 e0       	ldi	r19, 0x02	; 2
    178a:	3e 87       	std	Y+14, r19	; 0x0e
    178c:	2d 87       	std	Y+13, r18	; 0x0d
    178e:	47 eb       	ldi	r20, 0xB7	; 183
    1790:	51 e0       	ldi	r21, 0x01	; 1
    1792:	58 8b       	std	Y+16, r21	; 0x10
    1794:	4f 87       	std	Y+15, r20	; 0x0f
  {
    for(int i = 0; i < 128; i++)
    {
      //TONE(pgm_read_byte(&utwor[i]),pgm_read_byte(&tempo[i]));

      int wartosc = pgm_read_word(&astro[i]);
    1796:	ed 85       	ldd	r30, Y+13	; 0x0d
    1798:	fe 85       	ldd	r31, Y+14	; 0x0e
    179a:	45 91       	lpm	r20, Z+
    179c:	54 91       	lpm	r21, Z
      int dlugosc = pgm_read_word(&astro_tempo[i]);
    179e:	ef 85       	ldd	r30, Y+15	; 0x0f
    17a0:	f8 89       	ldd	r31, Y+16	; 0x10
    17a2:	a5 91       	lpm	r26, Z+
    17a4:	b4 91       	lpm	r27, Z
      if(wartosc == 0)
    17a6:	41 15       	cp	r20, r1
    17a8:	51 05       	cpc	r21, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <main+0x46>
    17ac:	56 c1       	rjmp	.+684    	; 0x1a5a <main+0x2f2>
        _delay_ms( (dlugosc) );
      else
        TONE(wartosc,dlugosc);
    17ae:	28 ee       	ldi	r18, 0xE8	; 232
    17b0:	33 e0       	ldi	r19, 0x03	; 3
    17b2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__usmulhisi3>
    17b6:	6a 01       	movw	r12, r20
    17b8:	55 0f       	add	r21, r21
    17ba:	ee 08       	sbc	r14, r14
    17bc:	ff 08       	sbc	r15, r15
    17be:	a7 01       	movw	r20, r14
    17c0:	96 01       	movw	r18, r12
    17c2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__udivmodsi4>
    17c6:	da 01       	movw	r26, r20
    17c8:	c9 01       	movw	r24, r18
    17ca:	b6 95       	lsr	r27
    17cc:	a7 95       	ror	r26
    17ce:	97 95       	ror	r25
    17d0:	87 95       	ror	r24
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	af 83       	std	Y+7, r26	; 0x07
    17d8:	b8 87       	std	Y+8, r27	; 0x08
    17da:	89 2b       	or	r24, r25
    17dc:	8a 2b       	or	r24, r26
    17de:	8b 2b       	or	r24, r27
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <main+0x7c>
    17e2:	e3 c0       	rjmp	.+454    	; 0x19aa <main+0x242>
    17e4:	c7 01       	movw	r24, r14
    17e6:	b6 01       	movw	r22, r12
    17e8:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatsisf>
    17ec:	69 87       	std	Y+9, r22	; 0x09
    17ee:	7a 87       	std	Y+10, r23	; 0x0a
    17f0:	8b 87       	std	Y+11, r24	; 0x0b
    17f2:	9c 87       	std	Y+12, r25	; 0x0c
    17f4:	2b ea       	ldi	r18, 0xAB	; 171
    17f6:	3a ea       	ldi	r19, 0xAA	; 170
    17f8:	4a ea       	ldi	r20, 0xAA	; 170
    17fa:	50 e4       	ldi	r21, 0x40	; 64
    17fc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    1800:	6b 01       	movw	r12, r22
    1802:	7c 01       	movw	r14, r24
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	50 e4       	ldi	r21, 0x40	; 64
    180c:	69 85       	ldd	r22, Y+9	; 0x09
    180e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1810:	8b 85       	ldd	r24, Y+11	; 0x0b
    1812:	9c 85       	ldd	r25, Y+12	; 0x0c
    1814:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    1818:	2b 01       	movw	r4, r22
    181a:	3c 01       	movw	r6, r24
    181c:	1a 82       	std	Y+2, r1	; 0x02
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ba 8b       	std	Y+18, r27	; 0x12
    1826:	a9 8b       	std	Y+17, r26	; 0x11
    1828:	29 9a       	sbi	0x05, 1	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	c7 01       	movw	r24, r14
    1834:	b6 01       	movw	r22, r12
    1836:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
    183a:	87 fd       	sbrc	r24, 7
    183c:	f0 c0       	rjmp	.+480    	; 0x1a1e <main+0x2b6>
		__ticks = 1;
	else if (__tmp2 > 65535)
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	3f ef       	ldi	r19, 0xFF	; 255
    1842:	4f e7       	ldi	r20, 0x7F	; 127
    1844:	57 e4       	ldi	r21, 0x47	; 71
    1846:	c3 01       	movw	r24, r6
    1848:	b2 01       	movw	r22, r4
    184a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    184e:	18 16       	cp	r1, r24
    1850:	0c f0       	brlt	.+2      	; 0x1854 <main+0xec>
    1852:	d1 c0       	rjmp	.+418    	; 0x19f6 <main+0x28e>
	{
		_delay_ms(__us / 1000.0);
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a e7       	ldi	r20, 0x7A	; 122
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	69 85       	ldd	r22, Y+9	; 0x09
    185e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1860:	8b 85       	ldd	r24, Y+11	; 0x0b
    1862:	9c 85       	ldd	r25, Y+12	; 0x0c
    1864:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__divsf3>
    1868:	69 83       	std	Y+1, r22	; 0x01
    186a:	7a 83       	std	Y+2, r23	; 0x02
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a e7       	ldi	r20, 0x7A	; 122
    1876:	55 e4       	ldi	r21, 0x45	; 69
    1878:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    187c:	4b 01       	movw	r8, r22
    187e:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
    188c:	87 fd       	sbrc	r24, 7
    188e:	1f c1       	rjmp	.+574    	; 0x1ace <main+0x366>
		__ticks = 1;
	else if (__tmp > 65535)
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	3f ef       	ldi	r19, 0xFF	; 255
    1894:	4f e7       	ldi	r20, 0x7F	; 127
    1896:	57 e4       	ldi	r21, 0x47	; 71
    1898:	c5 01       	movw	r24, r10
    189a:	b4 01       	movw	r22, r8
    189c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <main+0x13e>
    18a4:	ca c0       	rjmp	.+404    	; 0x1a3a <main+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	69 81       	ldd	r22, Y+1	; 0x01
    18b0:	7a 81       	ldd	r23, Y+2	; 0x02
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    18ba:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
		while(__ticks)
    18be:	61 15       	cp	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	31 f0       	breq	.+12     	; 0x18d0 <main+0x168>
    18c4:	c1 01       	movw	r24, r2
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <main+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ca:	61 50       	subi	r22, 0x01	; 1
    18cc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	d1 f7       	brne	.-12     	; 0x18c4 <main+0x15c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18d0:	81 2f       	mov	r24, r17
    18d2:	8a 95       	dec	r24
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <main+0x16a>
    18d6:	29 98       	cbi	0x05, 1	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	c7 01       	movw	r24, r14
    18e2:	b6 01       	movw	r22, r12
    18e4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
    18e8:	87 fd       	sbrc	r24, 7
    18ea:	97 c0       	rjmp	.+302    	; 0x1a1a <main+0x2b2>
		__ticks = 1;
	else if (__tmp2 > 65535)
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	c3 01       	movw	r24, r6
    18f6:	b2 01       	movw	r22, r4
    18f8:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <main+0x19a>
    1900:	68 c0       	rjmp	.+208    	; 0x19d2 <main+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a e7       	ldi	r20, 0x7A	; 122
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	69 85       	ldd	r22, Y+9	; 0x09
    190c:	7a 85       	ldd	r23, Y+10	; 0x0a
    190e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1910:	9c 85       	ldd	r25, Y+12	; 0x0c
    1912:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__divsf3>
    1916:	69 83       	std	Y+1, r22	; 0x01
    1918:	7a 83       	std	Y+2, r23	; 0x02
    191a:	8b 83       	std	Y+3, r24	; 0x03
    191c:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a e7       	ldi	r20, 0x7A	; 122
    1924:	55 e4       	ldi	r21, 0x45	; 69
    1926:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    192a:	4b 01       	movw	r8, r22
    192c:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
    193a:	87 fd       	sbrc	r24, 7
    193c:	c5 c0       	rjmp	.+394    	; 0x1ac8 <main+0x360>
		__ticks = 1;
	else if (__tmp > 65535)
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	c5 01       	movw	r24, r10
    1948:	b4 01       	movw	r22, r8
    194a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    194e:	18 16       	cp	r1, r24
    1950:	0c f0       	brlt	.+2      	; 0x1954 <main+0x1ec>
    1952:	7b c0       	rjmp	.+246    	; 0x1a4a <main+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	69 81       	ldd	r22, Y+1	; 0x01
    195e:	7a 81       	ldd	r23, Y+2	; 0x02
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    1968:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
		while(__ticks)
    196c:	61 15       	cp	r22, r1
    196e:	71 05       	cpc	r23, r1
    1970:	31 f0       	breq	.+12     	; 0x197e <main+0x216>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1972:	c1 01       	movw	r24, r2
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <main+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	61 50       	subi	r22, 0x01	; 1
    197a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	d1 f7       	brne	.-12     	; 0x1972 <main+0x20a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197e:	80 2f       	mov	r24, r16
    1980:	8a 95       	dec	r24
    1982:	f1 f7       	brne	.-4      	; 0x1980 <main+0x218>
    1984:	29 89       	ldd	r18, Y+17	; 0x11
    1986:	3a 89       	ldd	r19, Y+18	; 0x12
    1988:	2f 5f       	subi	r18, 0xFF	; 255
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	3a 8b       	std	Y+18, r19	; 0x12
    198e:	29 8b       	std	Y+17, r18	; 0x11
    1990:	c9 01       	movw	r24, r18
    1992:	a0 e0       	ldi	r26, 0x00	; 0
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	2d 81       	ldd	r18, Y+5	; 0x05
    1998:	3e 81       	ldd	r19, Y+6	; 0x06
    199a:	4f 81       	ldd	r20, Y+7	; 0x07
    199c:	58 85       	ldd	r21, Y+8	; 0x08
    199e:	82 17       	cp	r24, r18
    19a0:	93 07       	cpc	r25, r19
    19a2:	a4 07       	cpc	r26, r20
    19a4:	b5 07       	cpc	r27, r21
    19a6:	08 f4       	brcc	.+2      	; 0x19aa <main+0x242>
    19a8:	3f cf       	rjmp	.-386    	; 0x1828 <main+0xc0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19aa:	80 e4       	ldi	r24, 0x40	; 64
    19ac:	9c e9       	ldi	r25, 0x9C	; 156
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <main+0x246>
    19b2:	4d 85       	ldd	r20, Y+13	; 0x0d
    19b4:	5e 85       	ldd	r21, Y+14	; 0x0e
    19b6:	4e 5f       	subi	r20, 0xFE	; 254
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	5e 87       	std	Y+14, r21	; 0x0e
    19bc:	4d 87       	std	Y+13, r20	; 0x0d
    19be:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c0:	98 89       	ldd	r25, Y+16	; 0x10
    19c2:	02 96       	adiw	r24, 0x02	; 2
    19c4:	98 8b       	std	Y+16, r25	; 0x10
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
int main() {
  BUZZ_DDR |= _BV(BUZZ);

  while (1)
  {
    for(int i = 0; i < 128; i++)
    19c8:	47 5b       	subi	r20, 0xB7	; 183
    19ca:	53 40       	sbci	r21, 0x03	; 3
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <main+0x268>
    19ce:	e3 ce       	rjmp	.-570    	; 0x1796 <main+0x2e>
    19d0:	da ce       	rjmp	.-588    	; 0x1786 <main+0x1e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	53 e4       	ldi	r21, 0x43	; 67
    19da:	c7 01       	movw	r24, r14
    19dc:	b6 01       	movw	r22, r12
    19de:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	f4 f4       	brge	.+60     	; 0x1a22 <main+0x2ba>
    19e6:	c3 01       	movw	r24, r6
    19e8:	b2 01       	movw	r22, r4
    19ea:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    19ee:	cb 01       	movw	r24, r22
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <main+0x288>
    19f4:	c7 cf       	rjmp	.-114    	; 0x1984 <main+0x21c>
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	53 e4       	ldi	r21, 0x43	; 67
    19fe:	c7 01       	movw	r24, r14
    1a00:	b6 01       	movw	r22, r12
    1a02:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	94 f4       	brge	.+36     	; 0x1a2e <main+0x2c6>
    1a0a:	c3 01       	movw	r24, r6
    1a0c:	b2 01       	movw	r22, r4
    1a0e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    1a12:	cb 01       	movw	r24, r22
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <main+0x2ac>
    1a18:	5e cf       	rjmp	.-324    	; 0x18d6 <main+0x16e>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1a1a:	01 e0       	ldi	r16, 0x01	; 1
    1a1c:	b0 cf       	rjmp	.-160    	; 0x197e <main+0x216>
    1a1e:	11 e0       	ldi	r17, 0x01	; 1
    1a20:	57 cf       	rjmp	.-338    	; 0x18d0 <main+0x168>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a22:	c7 01       	movw	r24, r14
    1a24:	b6 01       	movw	r22, r12
    1a26:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    1a2a:	06 2f       	mov	r16, r22
    1a2c:	a8 cf       	rjmp	.-176    	; 0x197e <main+0x216>
    1a2e:	c7 01       	movw	r24, r14
    1a30:	b6 01       	movw	r22, r12
    1a32:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    1a36:	16 2f       	mov	r17, r22
    1a38:	4b cf       	rjmp	.-362    	; 0x18d0 <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	c5 01       	movw	r24, r10
    1a3c:	b4 01       	movw	r22, r8
    1a3e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    1a42:	cb 01       	movw	r24, r22
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <main+0x2dc>
    1a48:	43 cf       	rjmp	.-378    	; 0x18d0 <main+0x168>
    1a4a:	c5 01       	movw	r24, r10
    1a4c:	b4 01       	movw	r22, r8
    1a4e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    1a52:	cb 01       	movw	r24, r22
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <main+0x2ec>
    1a58:	92 cf       	rjmp	.-220    	; 0x197e <main+0x216>
      //TONE(pgm_read_byte(&utwor[i]),pgm_read_byte(&tempo[i]));

      int wartosc = pgm_read_word(&astro[i]);
      int dlugosc = pgm_read_word(&astro_tempo[i]);
      if(wartosc == 0)
        _delay_ms( (dlugosc) );
    1a5a:	bd 01       	movw	r22, r26
    1a5c:	bb 0f       	add	r27, r27
    1a5e:	88 0b       	sbc	r24, r24
    1a60:	99 0b       	sbc	r25, r25
    1a62:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatsisf>
    1a66:	4b 01       	movw	r8, r22
    1a68:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	55 e4       	ldi	r21, 0x45	; 69
    1a72:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    1a76:	6b 01       	movw	r12, r22
    1a78:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
    1a86:	87 fd       	sbrc	r24, 7
    1a88:	2d c0       	rjmp	.+90     	; 0x1ae4 <main+0x37c>
		__ticks = 1;
	else if (__tmp > 65535)
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	c7 01       	movw	r24, r14
    1a94:	b6 01       	movw	r22, r12
    1a96:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__gesf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	dc f4       	brge	.+54     	; 0x1ad4 <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	c5 01       	movw	r24, r10
    1aa8:	b4 01       	movw	r22, r8
    1aaa:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3>
    1aae:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
		while(__ticks)
    1ab2:	61 15       	cp	r22, r1
    1ab4:	71 05       	cpc	r23, r1
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <main+0x352>
    1ab8:	78 cf       	rjmp	.-272    	; 0x19aa <main+0x242>
    1aba:	c1 01       	movw	r24, r2
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <main+0x354>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	61 50       	subi	r22, 0x01	; 1
    1ac2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	d1 f7       	brne	.-12     	; 0x1aba <main+0x352>
    1ac6:	71 cf       	rjmp	.-286    	; 0x19aa <main+0x242>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	c2 cf       	rjmp	.-124    	; 0x1a52 <main+0x2ea>
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	b7 cf       	rjmp	.-146    	; 0x1a42 <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fixunssfsi>
    1adc:	cb 01       	movw	r24, r22
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <main+0x376>
    1ae2:	63 cf       	rjmp	.-314    	; 0x19aa <main+0x242>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	f9 cf       	rjmp	.-14     	; 0x1adc <main+0x374>

00001aea <__udivmodsi4>:
    1aea:	a1 e2       	ldi	r26, 0x21	; 33
    1aec:	1a 2e       	mov	r1, r26
    1aee:	aa 1b       	sub	r26, r26
    1af0:	bb 1b       	sub	r27, r27
    1af2:	fd 01       	movw	r30, r26
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <__udivmodsi4_ep>

00001af6 <__udivmodsi4_loop>:
    1af6:	aa 1f       	adc	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	ee 1f       	adc	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	a2 17       	cp	r26, r18
    1b00:	b3 07       	cpc	r27, r19
    1b02:	e4 07       	cpc	r30, r20
    1b04:	f5 07       	cpc	r31, r21
    1b06:	20 f0       	brcs	.+8      	; 0x1b10 <__udivmodsi4_ep>
    1b08:	a2 1b       	sub	r26, r18
    1b0a:	b3 0b       	sbc	r27, r19
    1b0c:	e4 0b       	sbc	r30, r20
    1b0e:	f5 0b       	sbc	r31, r21

00001b10 <__udivmodsi4_ep>:
    1b10:	66 1f       	adc	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	1a 94       	dec	r1
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <__udivmodsi4_loop>
    1b1c:	60 95       	com	r22
    1b1e:	70 95       	com	r23
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	bd 01       	movw	r22, r26
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	08 95       	ret

00001b2e <__usmulhisi3>:
    1b2e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__umulhisi3>

00001b32 <__usmulhisi3_tail>:
    1b32:	b7 ff       	sbrs	r27, 7
    1b34:	08 95       	ret
    1b36:	82 1b       	sub	r24, r18
    1b38:	93 0b       	sbc	r25, r19
    1b3a:	08 95       	ret

00001b3c <__prologue_saves__>:
    1b3c:	2f 92       	push	r2
    1b3e:	3f 92       	push	r3
    1b40:	4f 92       	push	r4
    1b42:	5f 92       	push	r5
    1b44:	6f 92       	push	r6
    1b46:	7f 92       	push	r7
    1b48:	8f 92       	push	r8
    1b4a:	9f 92       	push	r9
    1b4c:	af 92       	push	r10
    1b4e:	bf 92       	push	r11
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	ca 1b       	sub	r28, r26
    1b66:	db 0b       	sbc	r29, r27
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	09 94       	ijmp

00001b74 <__epilogue_restores__>:
    1b74:	2a 88       	ldd	r2, Y+18	; 0x12
    1b76:	39 88       	ldd	r3, Y+17	; 0x11
    1b78:	48 88       	ldd	r4, Y+16	; 0x10
    1b7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b80:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b82:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b84:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b86:	b9 84       	ldd	r11, Y+9	; 0x09
    1b88:	c8 84       	ldd	r12, Y+8	; 0x08
    1b8a:	df 80       	ldd	r13, Y+7	; 0x07
    1b8c:	ee 80       	ldd	r14, Y+6	; 0x06
    1b8e:	fd 80       	ldd	r15, Y+5	; 0x05
    1b90:	0c 81       	ldd	r16, Y+4	; 0x04
    1b92:	1b 81       	ldd	r17, Y+3	; 0x03
    1b94:	aa 81       	ldd	r26, Y+2	; 0x02
    1b96:	b9 81       	ldd	r27, Y+1	; 0x01
    1b98:	ce 0f       	add	r28, r30
    1b9a:	d1 1d       	adc	r29, r1
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	ed 01       	movw	r28, r26
    1ba8:	08 95       	ret

00001baa <__umulhisi3>:
    1baa:	a2 9f       	mul	r26, r18
    1bac:	b0 01       	movw	r22, r0
    1bae:	b3 9f       	mul	r27, r19
    1bb0:	c0 01       	movw	r24, r0
    1bb2:	a3 9f       	mul	r26, r19
    1bb4:	70 0d       	add	r23, r0
    1bb6:	81 1d       	adc	r24, r1
    1bb8:	11 24       	eor	r1, r1
    1bba:	91 1d       	adc	r25, r1
    1bbc:	b2 9f       	mul	r27, r18
    1bbe:	70 0d       	add	r23, r0
    1bc0:	81 1d       	adc	r24, r1
    1bc2:	11 24       	eor	r1, r1
    1bc4:	91 1d       	adc	r25, r1
    1bc6:	08 95       	ret

00001bc8 <__cmpsf2>:
    1bc8:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fp_cmp>
    1bcc:	08 f4       	brcc	.+2      	; 0x1bd0 <__cmpsf2+0x8>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	08 95       	ret

00001bd2 <__divsf3>:
    1bd2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__divsf3x>
    1bd6:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__fp_round>
    1bda:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fp_pscB>
    1bde:	58 f0       	brcs	.+22     	; 0x1bf6 <__divsf3+0x24>
    1be0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__fp_pscA>
    1be4:	40 f0       	brcs	.+16     	; 0x1bf6 <__divsf3+0x24>
    1be6:	29 f4       	brne	.+10     	; 0x1bf2 <__divsf3+0x20>
    1be8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bea:	29 f0       	breq	.+10     	; 0x1bf6 <__divsf3+0x24>
    1bec:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_inf>
    1bf0:	51 11       	cpse	r21, r1
    1bf2:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_szero>
    1bf6:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__fp_nan>

00001bfa <__divsf3x>:
    1bfa:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fp_split3>
    1bfe:	68 f3       	brcs	.-38     	; 0x1bda <__divsf3+0x8>

00001c00 <__divsf3_pse>:
    1c00:	99 23       	and	r25, r25
    1c02:	b1 f3       	breq	.-20     	; 0x1bf0 <__divsf3+0x1e>
    1c04:	55 23       	and	r21, r21
    1c06:	91 f3       	breq	.-28     	; 0x1bec <__divsf3+0x1a>
    1c08:	95 1b       	sub	r25, r21
    1c0a:	55 0b       	sbc	r21, r21
    1c0c:	bb 27       	eor	r27, r27
    1c0e:	aa 27       	eor	r26, r26
    1c10:	62 17       	cp	r22, r18
    1c12:	73 07       	cpc	r23, r19
    1c14:	84 07       	cpc	r24, r20
    1c16:	38 f0       	brcs	.+14     	; 0x1c26 <__divsf3_pse+0x26>
    1c18:	9f 5f       	subi	r25, 0xFF	; 255
    1c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1c:	22 0f       	add	r18, r18
    1c1e:	33 1f       	adc	r19, r19
    1c20:	44 1f       	adc	r20, r20
    1c22:	aa 1f       	adc	r26, r26
    1c24:	a9 f3       	breq	.-22     	; 0x1c10 <__divsf3_pse+0x10>
    1c26:	35 d0       	rcall	.+106    	; 0x1c92 <__divsf3_pse+0x92>
    1c28:	0e 2e       	mov	r0, r30
    1c2a:	3a f0       	brmi	.+14     	; 0x1c3a <__divsf3_pse+0x3a>
    1c2c:	e0 e8       	ldi	r30, 0x80	; 128
    1c2e:	32 d0       	rcall	.+100    	; 0x1c94 <__divsf3_pse+0x94>
    1c30:	91 50       	subi	r25, 0x01	; 1
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	e6 95       	lsr	r30
    1c36:	00 1c       	adc	r0, r0
    1c38:	ca f7       	brpl	.-14     	; 0x1c2c <__divsf3_pse+0x2c>
    1c3a:	2b d0       	rcall	.+86     	; 0x1c92 <__divsf3_pse+0x92>
    1c3c:	fe 2f       	mov	r31, r30
    1c3e:	29 d0       	rcall	.+82     	; 0x1c92 <__divsf3_pse+0x92>
    1c40:	66 0f       	add	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	88 1f       	adc	r24, r24
    1c46:	bb 1f       	adc	r27, r27
    1c48:	26 17       	cp	r18, r22
    1c4a:	37 07       	cpc	r19, r23
    1c4c:	48 07       	cpc	r20, r24
    1c4e:	ab 07       	cpc	r26, r27
    1c50:	b0 e8       	ldi	r27, 0x80	; 128
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <__divsf3_pse+0x56>
    1c54:	bb 0b       	sbc	r27, r27
    1c56:	80 2d       	mov	r24, r0
    1c58:	bf 01       	movw	r22, r30
    1c5a:	ff 27       	eor	r31, r31
    1c5c:	93 58       	subi	r25, 0x83	; 131
    1c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c60:	3a f0       	brmi	.+14     	; 0x1c70 <__divsf3_pse+0x70>
    1c62:	9e 3f       	cpi	r25, 0xFE	; 254
    1c64:	51 05       	cpc	r21, r1
    1c66:	78 f0       	brcs	.+30     	; 0x1c86 <__divsf3_pse+0x86>
    1c68:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_inf>
    1c6c:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_szero>
    1c70:	5f 3f       	cpi	r21, 0xFF	; 255
    1c72:	e4 f3       	brlt	.-8      	; 0x1c6c <__divsf3_pse+0x6c>
    1c74:	98 3e       	cpi	r25, 0xE8	; 232
    1c76:	d4 f3       	brlt	.-12     	; 0x1c6c <__divsf3_pse+0x6c>
    1c78:	86 95       	lsr	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b7 95       	ror	r27
    1c80:	f7 95       	ror	r31
    1c82:	9f 5f       	subi	r25, 0xFF	; 255
    1c84:	c9 f7       	brne	.-14     	; 0x1c78 <__divsf3_pse+0x78>
    1c86:	88 0f       	add	r24, r24
    1c88:	91 1d       	adc	r25, r1
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	97 f9       	bld	r25, 7
    1c90:	08 95       	ret
    1c92:	e1 e0       	ldi	r30, 0x01	; 1
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	bb 1f       	adc	r27, r27
    1c9c:	62 17       	cp	r22, r18
    1c9e:	73 07       	cpc	r23, r19
    1ca0:	84 07       	cpc	r24, r20
    1ca2:	ba 07       	cpc	r27, r26
    1ca4:	20 f0       	brcs	.+8      	; 0x1cae <__divsf3_pse+0xae>
    1ca6:	62 1b       	sub	r22, r18
    1ca8:	73 0b       	sbc	r23, r19
    1caa:	84 0b       	sbc	r24, r20
    1cac:	ba 0b       	sbc	r27, r26
    1cae:	ee 1f       	adc	r30, r30
    1cb0:	88 f7       	brcc	.-30     	; 0x1c94 <__divsf3_pse+0x94>
    1cb2:	e0 95       	com	r30
    1cb4:	08 95       	ret

00001cb6 <__fixunssfsi>:
    1cb6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__fp_splitA>
    1cba:	88 f0       	brcs	.+34     	; 0x1cde <__fixunssfsi+0x28>
    1cbc:	9f 57       	subi	r25, 0x7F	; 127
    1cbe:	98 f0       	brcs	.+38     	; 0x1ce6 <__fixunssfsi+0x30>
    1cc0:	b9 2f       	mov	r27, r25
    1cc2:	99 27       	eor	r25, r25
    1cc4:	b7 51       	subi	r27, 0x17	; 23
    1cc6:	b0 f0       	brcs	.+44     	; 0x1cf4 <__fixunssfsi+0x3e>
    1cc8:	e1 f0       	breq	.+56     	; 0x1d02 <__fixunssfsi+0x4c>
    1cca:	66 0f       	add	r22, r22
    1ccc:	77 1f       	adc	r23, r23
    1cce:	88 1f       	adc	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	1a f0       	brmi	.+6      	; 0x1cda <__fixunssfsi+0x24>
    1cd4:	ba 95       	dec	r27
    1cd6:	c9 f7       	brne	.-14     	; 0x1cca <__fixunssfsi+0x14>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <__fixunssfsi+0x4c>
    1cda:	b1 30       	cpi	r27, 0x01	; 1
    1cdc:	91 f0       	breq	.+36     	; 0x1d02 <__fixunssfsi+0x4c>
    1cde:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fp_zero>
    1ce2:	b1 e0       	ldi	r27, 0x01	; 1
    1ce4:	08 95       	ret
    1ce6:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_zero>
    1cea:	67 2f       	mov	r22, r23
    1cec:	78 2f       	mov	r23, r24
    1cee:	88 27       	eor	r24, r24
    1cf0:	b8 5f       	subi	r27, 0xF8	; 248
    1cf2:	39 f0       	breq	.+14     	; 0x1d02 <__fixunssfsi+0x4c>
    1cf4:	b9 3f       	cpi	r27, 0xF9	; 249
    1cf6:	cc f3       	brlt	.-14     	; 0x1cea <__fixunssfsi+0x34>
    1cf8:	86 95       	lsr	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	b3 95       	inc	r27
    1d00:	d9 f7       	brne	.-10     	; 0x1cf8 <__fixunssfsi+0x42>
    1d02:	3e f4       	brtc	.+14     	; 0x1d12 <__fixunssfsi+0x5c>
    1d04:	90 95       	com	r25
    1d06:	80 95       	com	r24
    1d08:	70 95       	com	r23
    1d0a:	61 95       	neg	r22
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	08 95       	ret

00001d14 <__floatunsisf>:
    1d14:	e8 94       	clt
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <__floatsisf+0x12>

00001d18 <__floatsisf>:
    1d18:	97 fb       	bst	r25, 7
    1d1a:	3e f4       	brtc	.+14     	; 0x1d2a <__floatsisf+0x12>
    1d1c:	90 95       	com	r25
    1d1e:	80 95       	com	r24
    1d20:	70 95       	com	r23
    1d22:	61 95       	neg	r22
    1d24:	7f 4f       	sbci	r23, 0xFF	; 255
    1d26:	8f 4f       	sbci	r24, 0xFF	; 255
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	99 23       	and	r25, r25
    1d2c:	a9 f0       	breq	.+42     	; 0x1d58 <__floatsisf+0x40>
    1d2e:	f9 2f       	mov	r31, r25
    1d30:	96 e9       	ldi	r25, 0x96	; 150
    1d32:	bb 27       	eor	r27, r27
    1d34:	93 95       	inc	r25
    1d36:	f6 95       	lsr	r31
    1d38:	87 95       	ror	r24
    1d3a:	77 95       	ror	r23
    1d3c:	67 95       	ror	r22
    1d3e:	b7 95       	ror	r27
    1d40:	f1 11       	cpse	r31, r1
    1d42:	f8 cf       	rjmp	.-16     	; 0x1d34 <__floatsisf+0x1c>
    1d44:	fa f4       	brpl	.+62     	; 0x1d84 <__floatsisf+0x6c>
    1d46:	bb 0f       	add	r27, r27
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <__floatsisf+0x36>
    1d4a:	60 ff       	sbrs	r22, 0
    1d4c:	1b c0       	rjmp	.+54     	; 0x1d84 <__floatsisf+0x6c>
    1d4e:	6f 5f       	subi	r22, 0xFF	; 255
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	8f 4f       	sbci	r24, 0xFF	; 255
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <__floatsisf+0x6c>
    1d58:	88 23       	and	r24, r24
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <__floatsisf+0x48>
    1d5c:	96 e9       	ldi	r25, 0x96	; 150
    1d5e:	11 c0       	rjmp	.+34     	; 0x1d82 <__floatsisf+0x6a>
    1d60:	77 23       	and	r23, r23
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <__floatsisf+0x54>
    1d64:	9e e8       	ldi	r25, 0x8E	; 142
    1d66:	87 2f       	mov	r24, r23
    1d68:	76 2f       	mov	r23, r22
    1d6a:	05 c0       	rjmp	.+10     	; 0x1d76 <__floatsisf+0x5e>
    1d6c:	66 23       	and	r22, r22
    1d6e:	71 f0       	breq	.+28     	; 0x1d8c <__floatsisf+0x74>
    1d70:	96 e8       	ldi	r25, 0x86	; 134
    1d72:	86 2f       	mov	r24, r22
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	2a f0       	brmi	.+10     	; 0x1d84 <__floatsisf+0x6c>
    1d7a:	9a 95       	dec	r25
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	88 1f       	adc	r24, r24
    1d82:	da f7       	brpl	.-10     	; 0x1d7a <__floatsisf+0x62>
    1d84:	88 0f       	add	r24, r24
    1d86:	96 95       	lsr	r25
    1d88:	87 95       	ror	r24
    1d8a:	97 f9       	bld	r25, 7
    1d8c:	08 95       	ret

00001d8e <__fp_cmp>:
    1d8e:	99 0f       	add	r25, r25
    1d90:	00 08       	sbc	r0, r0
    1d92:	55 0f       	add	r21, r21
    1d94:	aa 0b       	sbc	r26, r26
    1d96:	e0 e8       	ldi	r30, 0x80	; 128
    1d98:	fe ef       	ldi	r31, 0xFE	; 254
    1d9a:	16 16       	cp	r1, r22
    1d9c:	17 06       	cpc	r1, r23
    1d9e:	e8 07       	cpc	r30, r24
    1da0:	f9 07       	cpc	r31, r25
    1da2:	c0 f0       	brcs	.+48     	; 0x1dd4 <__fp_cmp+0x46>
    1da4:	12 16       	cp	r1, r18
    1da6:	13 06       	cpc	r1, r19
    1da8:	e4 07       	cpc	r30, r20
    1daa:	f5 07       	cpc	r31, r21
    1dac:	98 f0       	brcs	.+38     	; 0x1dd4 <__fp_cmp+0x46>
    1dae:	62 1b       	sub	r22, r18
    1db0:	73 0b       	sbc	r23, r19
    1db2:	84 0b       	sbc	r24, r20
    1db4:	95 0b       	sbc	r25, r21
    1db6:	39 f4       	brne	.+14     	; 0x1dc6 <__fp_cmp+0x38>
    1db8:	0a 26       	eor	r0, r26
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <__fp_cmp+0x46>
    1dbc:	23 2b       	or	r18, r19
    1dbe:	24 2b       	or	r18, r20
    1dc0:	25 2b       	or	r18, r21
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <__fp_cmp+0x3e>
    1dc4:	08 95       	ret
    1dc6:	0a 26       	eor	r0, r26
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <__fp_cmp+0x3e>
    1dca:	a1 40       	sbci	r26, 0x01	; 1
    1dcc:	a6 95       	lsr	r26
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	81 1d       	adc	r24, r1
    1dd2:	81 1d       	adc	r24, r1
    1dd4:	08 95       	ret

00001dd6 <__fp_inf>:
    1dd6:	97 f9       	bld	r25, 7
    1dd8:	9f 67       	ori	r25, 0x7F	; 127
    1dda:	80 e8       	ldi	r24, 0x80	; 128
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	08 95       	ret

00001de2 <__fp_nan>:
    1de2:	9f ef       	ldi	r25, 0xFF	; 255
    1de4:	80 ec       	ldi	r24, 0xC0	; 192
    1de6:	08 95       	ret

00001de8 <__fp_pscA>:
    1de8:	00 24       	eor	r0, r0
    1dea:	0a 94       	dec	r0
    1dec:	16 16       	cp	r1, r22
    1dee:	17 06       	cpc	r1, r23
    1df0:	18 06       	cpc	r1, r24
    1df2:	09 06       	cpc	r0, r25
    1df4:	08 95       	ret

00001df6 <__fp_pscB>:
    1df6:	00 24       	eor	r0, r0
    1df8:	0a 94       	dec	r0
    1dfa:	12 16       	cp	r1, r18
    1dfc:	13 06       	cpc	r1, r19
    1dfe:	14 06       	cpc	r1, r20
    1e00:	05 06       	cpc	r0, r21
    1e02:	08 95       	ret

00001e04 <__fp_round>:
    1e04:	09 2e       	mov	r0, r25
    1e06:	03 94       	inc	r0
    1e08:	00 0c       	add	r0, r0
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <__fp_round+0xc>
    1e0c:	88 23       	and	r24, r24
    1e0e:	52 f0       	brmi	.+20     	; 0x1e24 <__fp_round+0x20>
    1e10:	bb 0f       	add	r27, r27
    1e12:	40 f4       	brcc	.+16     	; 0x1e24 <__fp_round+0x20>
    1e14:	bf 2b       	or	r27, r31
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <__fp_round+0x18>
    1e18:	60 ff       	sbrs	r22, 0
    1e1a:	04 c0       	rjmp	.+8      	; 0x1e24 <__fp_round+0x20>
    1e1c:	6f 5f       	subi	r22, 0xFF	; 255
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8f 4f       	sbci	r24, 0xFF	; 255
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	08 95       	ret

00001e26 <__fp_split3>:
    1e26:	57 fd       	sbrc	r21, 7
    1e28:	90 58       	subi	r25, 0x80	; 128
    1e2a:	44 0f       	add	r20, r20
    1e2c:	55 1f       	adc	r21, r21
    1e2e:	59 f0       	breq	.+22     	; 0x1e46 <__fp_splitA+0x10>
    1e30:	5f 3f       	cpi	r21, 0xFF	; 255
    1e32:	71 f0       	breq	.+28     	; 0x1e50 <__fp_splitA+0x1a>
    1e34:	47 95       	ror	r20

00001e36 <__fp_splitA>:
    1e36:	88 0f       	add	r24, r24
    1e38:	97 fb       	bst	r25, 7
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	61 f0       	breq	.+24     	; 0x1e56 <__fp_splitA+0x20>
    1e3e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e40:	79 f0       	breq	.+30     	; 0x1e60 <__fp_splitA+0x2a>
    1e42:	87 95       	ror	r24
    1e44:	08 95       	ret
    1e46:	12 16       	cp	r1, r18
    1e48:	13 06       	cpc	r1, r19
    1e4a:	14 06       	cpc	r1, r20
    1e4c:	55 1f       	adc	r21, r21
    1e4e:	f2 cf       	rjmp	.-28     	; 0x1e34 <__fp_split3+0xe>
    1e50:	46 95       	lsr	r20
    1e52:	f1 df       	rcall	.-30     	; 0x1e36 <__fp_splitA>
    1e54:	08 c0       	rjmp	.+16     	; 0x1e66 <__fp_splitA+0x30>
    1e56:	16 16       	cp	r1, r22
    1e58:	17 06       	cpc	r1, r23
    1e5a:	18 06       	cpc	r1, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	f1 cf       	rjmp	.-30     	; 0x1e42 <__fp_splitA+0xc>
    1e60:	86 95       	lsr	r24
    1e62:	71 05       	cpc	r23, r1
    1e64:	61 05       	cpc	r22, r1
    1e66:	08 94       	sec
    1e68:	08 95       	ret

00001e6a <__fp_zero>:
    1e6a:	e8 94       	clt

00001e6c <__fp_szero>:
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	66 27       	eor	r22, r22
    1e70:	77 27       	eor	r23, r23
    1e72:	cb 01       	movw	r24, r22
    1e74:	97 f9       	bld	r25, 7
    1e76:	08 95       	ret

00001e78 <__gesf2>:
    1e78:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__fp_cmp>
    1e7c:	08 f4       	brcc	.+2      	; 0x1e80 <__gesf2+0x8>
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	08 95       	ret

00001e82 <__mulsf3>:
    1e82:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__mulsf3x>
    1e86:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__fp_round>
    1e8a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__fp_pscA>
    1e8e:	38 f0       	brcs	.+14     	; 0x1e9e <__mulsf3+0x1c>
    1e90:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fp_pscB>
    1e94:	20 f0       	brcs	.+8      	; 0x1e9e <__mulsf3+0x1c>
    1e96:	95 23       	and	r25, r21
    1e98:	11 f0       	breq	.+4      	; 0x1e9e <__mulsf3+0x1c>
    1e9a:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_inf>
    1e9e:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__fp_nan>
    1ea2:	11 24       	eor	r1, r1
    1ea4:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_szero>

00001ea8 <__mulsf3x>:
    1ea8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fp_split3>
    1eac:	70 f3       	brcs	.-36     	; 0x1e8a <__mulsf3+0x8>

00001eae <__mulsf3_pse>:
    1eae:	95 9f       	mul	r25, r21
    1eb0:	c1 f3       	breq	.-16     	; 0x1ea2 <__mulsf3+0x20>
    1eb2:	95 0f       	add	r25, r21
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	55 1f       	adc	r21, r21
    1eb8:	62 9f       	mul	r22, r18
    1eba:	f0 01       	movw	r30, r0
    1ebc:	72 9f       	mul	r23, r18
    1ebe:	bb 27       	eor	r27, r27
    1ec0:	f0 0d       	add	r31, r0
    1ec2:	b1 1d       	adc	r27, r1
    1ec4:	63 9f       	mul	r22, r19
    1ec6:	aa 27       	eor	r26, r26
    1ec8:	f0 0d       	add	r31, r0
    1eca:	b1 1d       	adc	r27, r1
    1ecc:	aa 1f       	adc	r26, r26
    1ece:	64 9f       	mul	r22, r20
    1ed0:	66 27       	eor	r22, r22
    1ed2:	b0 0d       	add	r27, r0
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	66 1f       	adc	r22, r22
    1ed8:	82 9f       	mul	r24, r18
    1eda:	22 27       	eor	r18, r18
    1edc:	b0 0d       	add	r27, r0
    1ede:	a1 1d       	adc	r26, r1
    1ee0:	62 1f       	adc	r22, r18
    1ee2:	73 9f       	mul	r23, r19
    1ee4:	b0 0d       	add	r27, r0
    1ee6:	a1 1d       	adc	r26, r1
    1ee8:	62 1f       	adc	r22, r18
    1eea:	83 9f       	mul	r24, r19
    1eec:	a0 0d       	add	r26, r0
    1eee:	61 1d       	adc	r22, r1
    1ef0:	22 1f       	adc	r18, r18
    1ef2:	74 9f       	mul	r23, r20
    1ef4:	33 27       	eor	r19, r19
    1ef6:	a0 0d       	add	r26, r0
    1ef8:	61 1d       	adc	r22, r1
    1efa:	23 1f       	adc	r18, r19
    1efc:	84 9f       	mul	r24, r20
    1efe:	60 0d       	add	r22, r0
    1f00:	21 1d       	adc	r18, r1
    1f02:	82 2f       	mov	r24, r18
    1f04:	76 2f       	mov	r23, r22
    1f06:	6a 2f       	mov	r22, r26
    1f08:	11 24       	eor	r1, r1
    1f0a:	9f 57       	subi	r25, 0x7F	; 127
    1f0c:	50 40       	sbci	r21, 0x00	; 0
    1f0e:	9a f0       	brmi	.+38     	; 0x1f36 <__mulsf3_pse+0x88>
    1f10:	f1 f0       	breq	.+60     	; 0x1f4e <__mulsf3_pse+0xa0>
    1f12:	88 23       	and	r24, r24
    1f14:	4a f0       	brmi	.+18     	; 0x1f28 <__mulsf3_pse+0x7a>
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	bb 1f       	adc	r27, r27
    1f1c:	66 1f       	adc	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	88 1f       	adc	r24, r24
    1f22:	91 50       	subi	r25, 0x01	; 1
    1f24:	50 40       	sbci	r21, 0x00	; 0
    1f26:	a9 f7       	brne	.-22     	; 0x1f12 <__mulsf3_pse+0x64>
    1f28:	9e 3f       	cpi	r25, 0xFE	; 254
    1f2a:	51 05       	cpc	r21, r1
    1f2c:	80 f0       	brcs	.+32     	; 0x1f4e <__mulsf3_pse+0xa0>
    1f2e:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_inf>
    1f32:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__fp_szero>
    1f36:	5f 3f       	cpi	r21, 0xFF	; 255
    1f38:	e4 f3       	brlt	.-8      	; 0x1f32 <__mulsf3_pse+0x84>
    1f3a:	98 3e       	cpi	r25, 0xE8	; 232
    1f3c:	d4 f3       	brlt	.-12     	; 0x1f32 <__mulsf3_pse+0x84>
    1f3e:	86 95       	lsr	r24
    1f40:	77 95       	ror	r23
    1f42:	67 95       	ror	r22
    1f44:	b7 95       	ror	r27
    1f46:	f7 95       	ror	r31
    1f48:	e7 95       	ror	r30
    1f4a:	9f 5f       	subi	r25, 0xFF	; 255
    1f4c:	c1 f7       	brne	.-16     	; 0x1f3e <__mulsf3_pse+0x90>
    1f4e:	fe 2b       	or	r31, r30
    1f50:	88 0f       	add	r24, r24
    1f52:	91 1d       	adc	r25, r1
    1f54:	96 95       	lsr	r25
    1f56:	87 95       	ror	r24
    1f58:	97 f9       	bld	r25, 7
    1f5a:	08 95       	ret

00001f5c <__ftoa_engine>:
    1f5c:	28 30       	cpi	r18, 0x08	; 8
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <__ftoa_engine+0x6>
    1f60:	27 e0       	ldi	r18, 0x07	; 7
    1f62:	33 27       	eor	r19, r19
    1f64:	da 01       	movw	r26, r20
    1f66:	99 0f       	add	r25, r25
    1f68:	31 1d       	adc	r19, r1
    1f6a:	87 fd       	sbrc	r24, 7
    1f6c:	91 60       	ori	r25, 0x01	; 1
    1f6e:	00 96       	adiw	r24, 0x00	; 0
    1f70:	61 05       	cpc	r22, r1
    1f72:	71 05       	cpc	r23, r1
    1f74:	39 f4       	brne	.+14     	; 0x1f84 <__ftoa_engine+0x28>
    1f76:	32 60       	ori	r19, 0x02	; 2
    1f78:	2e 5f       	subi	r18, 0xFE	; 254
    1f7a:	3d 93       	st	X+, r19
    1f7c:	30 e3       	ldi	r19, 0x30	; 48
    1f7e:	2a 95       	dec	r18
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <__ftoa_engine+0x1e>
    1f82:	08 95       	ret
    1f84:	9f 3f       	cpi	r25, 0xFF	; 255
    1f86:	30 f0       	brcs	.+12     	; 0x1f94 <__ftoa_engine+0x38>
    1f88:	80 38       	cpi	r24, 0x80	; 128
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	61 05       	cpc	r22, r1
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <__ftoa_engine+0x36>
    1f90:	3c 5f       	subi	r19, 0xFC	; 252
    1f92:	3c 5f       	subi	r19, 0xFC	; 252
    1f94:	3d 93       	st	X+, r19
    1f96:	91 30       	cpi	r25, 0x01	; 1
    1f98:	08 f0       	brcs	.+2      	; 0x1f9c <__ftoa_engine+0x40>
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	91 1d       	adc	r25, r1
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	1f 93       	push	r17
    1fa4:	0f 93       	push	r16
    1fa6:	ff 92       	push	r15
    1fa8:	ef 92       	push	r14
    1faa:	19 2f       	mov	r17, r25
    1fac:	98 7f       	andi	r25, 0xF8	; 248
    1fae:	96 95       	lsr	r25
    1fb0:	e9 2f       	mov	r30, r25
    1fb2:	96 95       	lsr	r25
    1fb4:	96 95       	lsr	r25
    1fb6:	e9 0f       	add	r30, r25
    1fb8:	ff 27       	eor	r31, r31
    1fba:	e6 53       	subi	r30, 0x36	; 54
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	99 27       	eor	r25, r25
    1fc0:	33 27       	eor	r19, r19
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	a7 01       	movw	r20, r14
    1fc8:	e7 01       	movw	r28, r14
    1fca:	05 90       	lpm	r0, Z+
    1fcc:	08 94       	sec
    1fce:	07 94       	ror	r0
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__ftoa_engine+0x80>
    1fd2:	36 0f       	add	r19, r22
    1fd4:	e7 1e       	adc	r14, r23
    1fd6:	f8 1e       	adc	r15, r24
    1fd8:	49 1f       	adc	r20, r25
    1fda:	51 1d       	adc	r21, r1
    1fdc:	66 0f       	add	r22, r22
    1fde:	77 1f       	adc	r23, r23
    1fe0:	88 1f       	adc	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	06 94       	lsr	r0
    1fe6:	a1 f7       	brne	.-24     	; 0x1fd0 <__ftoa_engine+0x74>
    1fe8:	05 90       	lpm	r0, Z+
    1fea:	07 94       	ror	r0
    1fec:	28 f4       	brcc	.+10     	; 0x1ff8 <__ftoa_engine+0x9c>
    1fee:	e7 0e       	add	r14, r23
    1ff0:	f8 1e       	adc	r15, r24
    1ff2:	49 1f       	adc	r20, r25
    1ff4:	56 1f       	adc	r21, r22
    1ff6:	c1 1d       	adc	r28, r1
    1ff8:	77 0f       	add	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	66 1f       	adc	r22, r22
    2000:	06 94       	lsr	r0
    2002:	a1 f7       	brne	.-24     	; 0x1fec <__ftoa_engine+0x90>
    2004:	05 90       	lpm	r0, Z+
    2006:	07 94       	ror	r0
    2008:	28 f4       	brcc	.+10     	; 0x2014 <__ftoa_engine+0xb8>
    200a:	f8 0e       	add	r15, r24
    200c:	49 1f       	adc	r20, r25
    200e:	56 1f       	adc	r21, r22
    2010:	c7 1f       	adc	r28, r23
    2012:	d1 1d       	adc	r29, r1
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	66 1f       	adc	r22, r22
    201a:	77 1f       	adc	r23, r23
    201c:	06 94       	lsr	r0
    201e:	a1 f7       	brne	.-24     	; 0x2008 <__ftoa_engine+0xac>
    2020:	05 90       	lpm	r0, Z+
    2022:	07 94       	ror	r0
    2024:	20 f4       	brcc	.+8      	; 0x202e <__ftoa_engine+0xd2>
    2026:	49 0f       	add	r20, r25
    2028:	56 1f       	adc	r21, r22
    202a:	c7 1f       	adc	r28, r23
    202c:	d8 1f       	adc	r29, r24
    202e:	99 0f       	add	r25, r25
    2030:	66 1f       	adc	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	06 94       	lsr	r0
    2038:	a9 f7       	brne	.-22     	; 0x2024 <__ftoa_engine+0xc8>
    203a:	84 91       	lpm	r24, Z
    203c:	10 95       	com	r17
    203e:	17 70       	andi	r17, 0x07	; 7
    2040:	41 f0       	breq	.+16     	; 0x2052 <__ftoa_engine+0xf6>
    2042:	d6 95       	lsr	r29
    2044:	c7 95       	ror	r28
    2046:	57 95       	ror	r21
    2048:	47 95       	ror	r20
    204a:	f7 94       	ror	r15
    204c:	e7 94       	ror	r14
    204e:	1a 95       	dec	r17
    2050:	c1 f7       	brne	.-16     	; 0x2042 <__ftoa_engine+0xe6>
    2052:	e0 e7       	ldi	r30, 0x70	; 112
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	68 94       	set
    2058:	15 90       	lpm	r1, Z+
    205a:	15 91       	lpm	r17, Z+
    205c:	35 91       	lpm	r19, Z+
    205e:	65 91       	lpm	r22, Z+
    2060:	95 91       	lpm	r25, Z+
    2062:	05 90       	lpm	r0, Z+
    2064:	7f e2       	ldi	r23, 0x2F	; 47
    2066:	73 95       	inc	r23
    2068:	e1 18       	sub	r14, r1
    206a:	f1 0a       	sbc	r15, r17
    206c:	43 0b       	sbc	r20, r19
    206e:	56 0b       	sbc	r21, r22
    2070:	c9 0b       	sbc	r28, r25
    2072:	d0 09       	sbc	r29, r0
    2074:	c0 f7       	brcc	.-16     	; 0x2066 <__ftoa_engine+0x10a>
    2076:	e1 0c       	add	r14, r1
    2078:	f1 1e       	adc	r15, r17
    207a:	43 1f       	adc	r20, r19
    207c:	56 1f       	adc	r21, r22
    207e:	c9 1f       	adc	r28, r25
    2080:	d0 1d       	adc	r29, r0
    2082:	7e f4       	brtc	.+30     	; 0x20a2 <__ftoa_engine+0x146>
    2084:	70 33       	cpi	r23, 0x30	; 48
    2086:	11 f4       	brne	.+4      	; 0x208c <__ftoa_engine+0x130>
    2088:	8a 95       	dec	r24
    208a:	e6 cf       	rjmp	.-52     	; 0x2058 <__ftoa_engine+0xfc>
    208c:	e8 94       	clt
    208e:	01 50       	subi	r16, 0x01	; 1
    2090:	30 f0       	brcs	.+12     	; 0x209e <__ftoa_engine+0x142>
    2092:	08 0f       	add	r16, r24
    2094:	0a f4       	brpl	.+2      	; 0x2098 <__ftoa_engine+0x13c>
    2096:	00 27       	eor	r16, r16
    2098:	02 17       	cp	r16, r18
    209a:	08 f4       	brcc	.+2      	; 0x209e <__ftoa_engine+0x142>
    209c:	20 2f       	mov	r18, r16
    209e:	23 95       	inc	r18
    20a0:	02 2f       	mov	r16, r18
    20a2:	7a 33       	cpi	r23, 0x3A	; 58
    20a4:	28 f0       	brcs	.+10     	; 0x20b0 <__ftoa_engine+0x154>
    20a6:	79 e3       	ldi	r23, 0x39	; 57
    20a8:	7d 93       	st	X+, r23
    20aa:	2a 95       	dec	r18
    20ac:	e9 f7       	brne	.-6      	; 0x20a8 <__ftoa_engine+0x14c>
    20ae:	10 c0       	rjmp	.+32     	; 0x20d0 <__ftoa_engine+0x174>
    20b0:	7d 93       	st	X+, r23
    20b2:	2a 95       	dec	r18
    20b4:	89 f6       	brne	.-94     	; 0x2058 <__ftoa_engine+0xfc>
    20b6:	06 94       	lsr	r0
    20b8:	97 95       	ror	r25
    20ba:	67 95       	ror	r22
    20bc:	37 95       	ror	r19
    20be:	17 95       	ror	r17
    20c0:	17 94       	ror	r1
    20c2:	e1 18       	sub	r14, r1
    20c4:	f1 0a       	sbc	r15, r17
    20c6:	43 0b       	sbc	r20, r19
    20c8:	56 0b       	sbc	r21, r22
    20ca:	c9 0b       	sbc	r28, r25
    20cc:	d0 09       	sbc	r29, r0
    20ce:	98 f0       	brcs	.+38     	; 0x20f6 <__ftoa_engine+0x19a>
    20d0:	23 95       	inc	r18
    20d2:	7e 91       	ld	r23, -X
    20d4:	73 95       	inc	r23
    20d6:	7a 33       	cpi	r23, 0x3A	; 58
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <__ftoa_engine+0x180>
    20da:	70 e3       	ldi	r23, 0x30	; 48
    20dc:	7c 93       	st	X, r23
    20de:	20 13       	cpse	r18, r16
    20e0:	b8 f7       	brcc	.-18     	; 0x20d0 <__ftoa_engine+0x174>
    20e2:	7e 91       	ld	r23, -X
    20e4:	70 61       	ori	r23, 0x10	; 16
    20e6:	7d 93       	st	X+, r23
    20e8:	30 f0       	brcs	.+12     	; 0x20f6 <__ftoa_engine+0x19a>
    20ea:	83 95       	inc	r24
    20ec:	71 e3       	ldi	r23, 0x31	; 49
    20ee:	7d 93       	st	X+, r23
    20f0:	70 e3       	ldi	r23, 0x30	; 48
    20f2:	2a 95       	dec	r18
    20f4:	e1 f7       	brne	.-8      	; 0x20ee <__ftoa_engine+0x192>
    20f6:	11 24       	eor	r1, r1
    20f8:	ef 90       	pop	r14
    20fa:	ff 90       	pop	r15
    20fc:	0f 91       	pop	r16
    20fe:	1f 91       	pop	r17
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	99 27       	eor	r25, r25
    2106:	87 fd       	sbrc	r24, 7
    2108:	90 95       	com	r25
    210a:	08 95       	ret

0000210c <isspace>:
    210c:	91 11       	cpse	r25, r1
    210e:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__ctype_isfalse>
    2112:	80 32       	cpi	r24, 0x20	; 32
    2114:	19 f0       	breq	.+6      	; 0x211c <isspace+0x10>
    2116:	89 50       	subi	r24, 0x09	; 9
    2118:	85 50       	subi	r24, 0x05	; 5
    211a:	c8 f7       	brcc	.-14     	; 0x210e <isspace+0x2>
    211c:	08 95       	ret

0000211e <tolower>:
    211e:	91 11       	cpse	r25, r1
    2120:	08 95       	ret
    2122:	81 54       	subi	r24, 0x41	; 65
    2124:	8a 51       	subi	r24, 0x1A	; 26
    2126:	08 f4       	brcc	.+2      	; 0x212a <tolower+0xc>
    2128:	80 5e       	subi	r24, 0xE0	; 224
    212a:	85 5a       	subi	r24, 0xA5	; 165
    212c:	08 95       	ret

0000212e <strchr_P>:
    212e:	fc 01       	movw	r30, r24
    2130:	05 90       	lpm	r0, Z+
    2132:	06 16       	cp	r0, r22
    2134:	21 f0       	breq	.+8      	; 0x213e <strchr_P+0x10>
    2136:	00 20       	and	r0, r0
    2138:	d9 f7       	brne	.-10     	; 0x2130 <strchr_P+0x2>
    213a:	c0 01       	movw	r24, r0
    213c:	08 95       	ret
    213e:	31 97       	sbiw	r30, 0x01	; 1
    2140:	cf 01       	movw	r24, r30
    2142:	08 95       	ret

00002144 <strnlen_P>:
    2144:	fc 01       	movw	r30, r24
    2146:	05 90       	lpm	r0, Z+
    2148:	61 50       	subi	r22, 0x01	; 1
    214a:	70 40       	sbci	r23, 0x00	; 0
    214c:	01 10       	cpse	r0, r1
    214e:	d8 f7       	brcc	.-10     	; 0x2146 <strnlen_P+0x2>
    2150:	80 95       	com	r24
    2152:	90 95       	com	r25
    2154:	8e 0f       	add	r24, r30
    2156:	9f 1f       	adc	r25, r31
    2158:	08 95       	ret

0000215a <strnlen>:
    215a:	fc 01       	movw	r30, r24
    215c:	61 50       	subi	r22, 0x01	; 1
    215e:	70 40       	sbci	r23, 0x00	; 0
    2160:	01 90       	ld	r0, Z+
    2162:	01 10       	cpse	r0, r1
    2164:	d8 f7       	brcc	.-10     	; 0x215c <strnlen+0x2>
    2166:	80 95       	com	r24
    2168:	90 95       	com	r25
    216a:	8e 0f       	add	r24, r30
    216c:	9f 1f       	adc	r25, r31
    216e:	08 95       	ret

00002170 <fgetc>:
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	20 ff       	sbrs	r18, 0
    217a:	33 c0       	rjmp	.+102    	; 0x21e2 <fgetc+0x72>
    217c:	26 ff       	sbrs	r18, 6
    217e:	0a c0       	rjmp	.+20     	; 0x2194 <fgetc+0x24>
    2180:	2f 7b       	andi	r18, 0xBF	; 191
    2182:	2b 83       	std	Y+3, r18	; 0x03
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	9f 81       	ldd	r25, Y+7	; 0x07
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	9f 83       	std	Y+7, r25	; 0x07
    218c:	8e 83       	std	Y+6, r24	; 0x06
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	29 c0       	rjmp	.+82     	; 0x21e6 <fgetc+0x76>
    2194:	22 ff       	sbrs	r18, 2
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <fgetc+0x46>
    2198:	e8 81       	ld	r30, Y
    219a:	f9 81       	ldd	r31, Y+1	; 0x01
    219c:	80 81       	ld	r24, Z
    219e:	08 2e       	mov	r0, r24
    21a0:	00 0c       	add	r0, r0
    21a2:	99 0b       	sbc	r25, r25
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	19 f4       	brne	.+6      	; 0x21ae <fgetc+0x3e>
    21a8:	20 62       	ori	r18, 0x20	; 32
    21aa:	2b 83       	std	Y+3, r18	; 0x03
    21ac:	1a c0       	rjmp	.+52     	; 0x21e2 <fgetc+0x72>
    21ae:	31 96       	adiw	r30, 0x01	; 1
    21b0:	f9 83       	std	Y+1, r31	; 0x01
    21b2:	e8 83       	st	Y, r30
    21b4:	0e c0       	rjmp	.+28     	; 0x21d2 <fgetc+0x62>
    21b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    21b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    21ba:	09 95       	icall
    21bc:	97 ff       	sbrs	r25, 7
    21be:	09 c0       	rjmp	.+18     	; 0x21d2 <fgetc+0x62>
    21c0:	2b 81       	ldd	r18, Y+3	; 0x03
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	11 f0       	breq	.+4      	; 0x21ca <fgetc+0x5a>
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <fgetc+0x5c>
    21ca:	80 e1       	ldi	r24, 0x10	; 16
    21cc:	82 2b       	or	r24, r18
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	08 c0       	rjmp	.+16     	; 0x21e2 <fgetc+0x72>
    21d2:	2e 81       	ldd	r18, Y+6	; 0x06
    21d4:	3f 81       	ldd	r19, Y+7	; 0x07
    21d6:	2f 5f       	subi	r18, 0xFF	; 255
    21d8:	3f 4f       	sbci	r19, 0xFF	; 255
    21da:	3f 83       	std	Y+7, r19	; 0x07
    21dc:	2e 83       	std	Y+6, r18	; 0x06
    21de:	99 27       	eor	r25, r25
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <fgetc+0x76>
    21e2:	8f ef       	ldi	r24, 0xFF	; 255
    21e4:	9f ef       	ldi	r25, 0xFF	; 255
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <fputc>:
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	fb 01       	movw	r30, r22
    21f6:	23 81       	ldd	r18, Z+3	; 0x03
    21f8:	21 fd       	sbrc	r18, 1
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <fputc+0x16>
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	9f ef       	ldi	r25, 0xFF	; 255
    2200:	2c c0       	rjmp	.+88     	; 0x225a <fputc+0x6e>
    2202:	22 ff       	sbrs	r18, 2
    2204:	16 c0       	rjmp	.+44     	; 0x2232 <fputc+0x46>
    2206:	46 81       	ldd	r20, Z+6	; 0x06
    2208:	57 81       	ldd	r21, Z+7	; 0x07
    220a:	24 81       	ldd	r18, Z+4	; 0x04
    220c:	35 81       	ldd	r19, Z+5	; 0x05
    220e:	42 17       	cp	r20, r18
    2210:	53 07       	cpc	r21, r19
    2212:	44 f4       	brge	.+16     	; 0x2224 <fputc+0x38>
    2214:	a0 81       	ld	r26, Z
    2216:	b1 81       	ldd	r27, Z+1	; 0x01
    2218:	9d 01       	movw	r18, r26
    221a:	2f 5f       	subi	r18, 0xFF	; 255
    221c:	3f 4f       	sbci	r19, 0xFF	; 255
    221e:	31 83       	std	Z+1, r19	; 0x01
    2220:	20 83       	st	Z, r18
    2222:	8c 93       	st	X, r24
    2224:	26 81       	ldd	r18, Z+6	; 0x06
    2226:	37 81       	ldd	r19, Z+7	; 0x07
    2228:	2f 5f       	subi	r18, 0xFF	; 255
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	37 83       	std	Z+7, r19	; 0x07
    222e:	26 83       	std	Z+6, r18	; 0x06
    2230:	14 c0       	rjmp	.+40     	; 0x225a <fputc+0x6e>
    2232:	8b 01       	movw	r16, r22
    2234:	ec 01       	movw	r28, r24
    2236:	fb 01       	movw	r30, r22
    2238:	00 84       	ldd	r0, Z+8	; 0x08
    223a:	f1 85       	ldd	r31, Z+9	; 0x09
    223c:	e0 2d       	mov	r30, r0
    223e:	09 95       	icall
    2240:	89 2b       	or	r24, r25
    2242:	e1 f6       	brne	.-72     	; 0x21fc <fputc+0x10>
    2244:	d8 01       	movw	r26, r16
    2246:	16 96       	adiw	r26, 0x06	; 6
    2248:	8d 91       	ld	r24, X+
    224a:	9c 91       	ld	r25, X
    224c:	17 97       	sbiw	r26, 0x07	; 7
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	17 96       	adiw	r26, 0x07	; 7
    2252:	9c 93       	st	X, r25
    2254:	8e 93       	st	-X, r24
    2256:	16 97       	sbiw	r26, 0x06	; 6
    2258:	ce 01       	movw	r24, r28
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <ungetc>:
    2264:	fb 01       	movw	r30, r22
    2266:	23 81       	ldd	r18, Z+3	; 0x03
    2268:	20 ff       	sbrs	r18, 0
    226a:	12 c0       	rjmp	.+36     	; 0x2290 <ungetc+0x2c>
    226c:	26 fd       	sbrc	r18, 6
    226e:	10 c0       	rjmp	.+32     	; 0x2290 <ungetc+0x2c>
    2270:	8f 3f       	cpi	r24, 0xFF	; 255
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	93 07       	cpc	r25, r19
    2276:	61 f0       	breq	.+24     	; 0x2290 <ungetc+0x2c>
    2278:	82 83       	std	Z+2, r24	; 0x02
    227a:	2f 7d       	andi	r18, 0xDF	; 223
    227c:	20 64       	ori	r18, 0x40	; 64
    227e:	23 83       	std	Z+3, r18	; 0x03
    2280:	26 81       	ldd	r18, Z+6	; 0x06
    2282:	37 81       	ldd	r19, Z+7	; 0x07
    2284:	21 50       	subi	r18, 0x01	; 1
    2286:	31 09       	sbc	r19, r1
    2288:	37 83       	std	Z+7, r19	; 0x07
    228a:	26 83       	std	Z+6, r18	; 0x06
    228c:	99 27       	eor	r25, r25
    228e:	08 95       	ret
    2290:	8f ef       	ldi	r24, 0xFF	; 255
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	08 95       	ret

00002296 <__ultoa_invert>:
    2296:	fa 01       	movw	r30, r20
    2298:	aa 27       	eor	r26, r26
    229a:	28 30       	cpi	r18, 0x08	; 8
    229c:	51 f1       	breq	.+84     	; 0x22f2 <__ultoa_invert+0x5c>
    229e:	20 31       	cpi	r18, 0x10	; 16
    22a0:	81 f1       	breq	.+96     	; 0x2302 <__ultoa_invert+0x6c>
    22a2:	e8 94       	clt
    22a4:	6f 93       	push	r22
    22a6:	6e 7f       	andi	r22, 0xFE	; 254
    22a8:	6e 5f       	subi	r22, 0xFE	; 254
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	8f 4f       	sbci	r24, 0xFF	; 255
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	af 4f       	sbci	r26, 0xFF	; 255
    22b2:	b1 e0       	ldi	r27, 0x01	; 1
    22b4:	3e d0       	rcall	.+124    	; 0x2332 <__ultoa_invert+0x9c>
    22b6:	b4 e0       	ldi	r27, 0x04	; 4
    22b8:	3c d0       	rcall	.+120    	; 0x2332 <__ultoa_invert+0x9c>
    22ba:	67 0f       	add	r22, r23
    22bc:	78 1f       	adc	r23, r24
    22be:	89 1f       	adc	r24, r25
    22c0:	9a 1f       	adc	r25, r26
    22c2:	a1 1d       	adc	r26, r1
    22c4:	68 0f       	add	r22, r24
    22c6:	79 1f       	adc	r23, r25
    22c8:	8a 1f       	adc	r24, r26
    22ca:	91 1d       	adc	r25, r1
    22cc:	a1 1d       	adc	r26, r1
    22ce:	6a 0f       	add	r22, r26
    22d0:	71 1d       	adc	r23, r1
    22d2:	81 1d       	adc	r24, r1
    22d4:	91 1d       	adc	r25, r1
    22d6:	a1 1d       	adc	r26, r1
    22d8:	20 d0       	rcall	.+64     	; 0x231a <__ultoa_invert+0x84>
    22da:	09 f4       	brne	.+2      	; 0x22de <__ultoa_invert+0x48>
    22dc:	68 94       	set
    22de:	3f 91       	pop	r19
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	26 9f       	mul	r18, r22
    22e4:	11 24       	eor	r1, r1
    22e6:	30 19       	sub	r19, r0
    22e8:	30 5d       	subi	r19, 0xD0	; 208
    22ea:	31 93       	st	Z+, r19
    22ec:	de f6       	brtc	.-74     	; 0x22a4 <__ultoa_invert+0xe>
    22ee:	cf 01       	movw	r24, r30
    22f0:	08 95       	ret
    22f2:	46 2f       	mov	r20, r22
    22f4:	47 70       	andi	r20, 0x07	; 7
    22f6:	40 5d       	subi	r20, 0xD0	; 208
    22f8:	41 93       	st	Z+, r20
    22fa:	b3 e0       	ldi	r27, 0x03	; 3
    22fc:	0f d0       	rcall	.+30     	; 0x231c <__ultoa_invert+0x86>
    22fe:	c9 f7       	brne	.-14     	; 0x22f2 <__ultoa_invert+0x5c>
    2300:	f6 cf       	rjmp	.-20     	; 0x22ee <__ultoa_invert+0x58>
    2302:	46 2f       	mov	r20, r22
    2304:	4f 70       	andi	r20, 0x0F	; 15
    2306:	40 5d       	subi	r20, 0xD0	; 208
    2308:	4a 33       	cpi	r20, 0x3A	; 58
    230a:	18 f0       	brcs	.+6      	; 0x2312 <__ultoa_invert+0x7c>
    230c:	49 5d       	subi	r20, 0xD9	; 217
    230e:	31 fd       	sbrc	r19, 1
    2310:	40 52       	subi	r20, 0x20	; 32
    2312:	41 93       	st	Z+, r20
    2314:	02 d0       	rcall	.+4      	; 0x231a <__ultoa_invert+0x84>
    2316:	a9 f7       	brne	.-22     	; 0x2302 <__ultoa_invert+0x6c>
    2318:	ea cf       	rjmp	.-44     	; 0x22ee <__ultoa_invert+0x58>
    231a:	b4 e0       	ldi	r27, 0x04	; 4
    231c:	a6 95       	lsr	r26
    231e:	97 95       	ror	r25
    2320:	87 95       	ror	r24
    2322:	77 95       	ror	r23
    2324:	67 95       	ror	r22
    2326:	ba 95       	dec	r27
    2328:	c9 f7       	brne	.-14     	; 0x231c <__ultoa_invert+0x86>
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	61 05       	cpc	r22, r1
    232e:	71 05       	cpc	r23, r1
    2330:	08 95       	ret
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	0a 2e       	mov	r0, r26
    2338:	06 94       	lsr	r0
    233a:	57 95       	ror	r21
    233c:	47 95       	ror	r20
    233e:	37 95       	ror	r19
    2340:	27 95       	ror	r18
    2342:	ba 95       	dec	r27
    2344:	c9 f7       	brne	.-14     	; 0x2338 <__ultoa_invert+0xa2>
    2346:	62 0f       	add	r22, r18
    2348:	73 1f       	adc	r23, r19
    234a:	84 1f       	adc	r24, r20
    234c:	95 1f       	adc	r25, r21
    234e:	a0 1d       	adc	r26, r0
    2350:	08 95       	ret

00002352 <__ctype_isfalse>:
    2352:	99 27       	eor	r25, r25
    2354:	88 27       	eor	r24, r24

00002356 <__ctype_istrue>:
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
